(()=>{let e,t,n,r,a,s,i,o;function l(e,t){return Object.keys(t).forEach(function(n){"default"===n||"__esModule"===n||e.hasOwnProperty(n)||Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[n]}})}),e}var u,h,p,d,c,f,m,g,y,b,x,k,v,w,I,S,N,T,C,$,E,A="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{};function R(e,t,n,r){Object.defineProperty(e,t,{get:n,set:r,enumerable:!0,configurable:!0})}var F={},D={},_=A.parcelRequire2a3d;null==_&&((_=function(e){if(e in F)return F[e].exports;if(e in D){var t=D[e];delete D[e];var n={id:e,exports:{}};return F[e]=n,t.call(n.exports,n,n.exports),n.exports}var r=Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}).register=function(e,t){D[e]=t},A.parcelRequire2a3d=_),_.register("foUwZ",function(e,t){}),_.register("gj6Et",function(e,t){!function(e,t,n){function r(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));t=r>>>0,r-=t,r*=t,t=r>>>0,r-=t,t+=4294967296*r}return(t>>>0)*23283064365386963e-26});n.next=function(){var e=2091639*n.s0+23283064365386963e-26*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1)}function a(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function s(e,t){var n=new r(e),s=t&&t.state,i=n.next;return i.int32=function(){return 4294967296*n.next()|0},i.double=function(){return i()+(2097152*i()|0)*11102230246251565e-32},i.quick=i,s&&("object"==typeof s&&a(s,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=s:n&&n.amd?n(function(){return s}):this.alea=s}(0,e,"function"==typeof define&&define)}),_.register("4gDjz",function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function s(e,t){var n=new r(e),s=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do var e=n.next()>>>11,t=(n.next()>>>0)/4294967296,r=(e+t)/2097152;while(0===r)return r},i.int32=n.next,i.quick=i,s&&("object"==typeof s&&a(s,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=s:n&&n.amd?n(function(){return s}):this.xor128=s}(0,e,"function"==typeof define&&define)}),_.register("HLBv4",function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^(e^e<<1))|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function a(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function s(e,t){var n=new r(e),s=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do var e=n.next()>>>11,t=(n.next()>>>0)/4294967296,r=(e+t)/2097152;while(0===r)return r},i.int32=n.next,i.quick=i,s&&("object"==typeof s&&a(s,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=s:n&&n.amd?n(function(){return s}):this.xorwow=s}(0,e,"function"==typeof define&&define)}),_.register("ktaoY",function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.x,a=t.i;return e=r[a],e^=e>>>7,n=e^e<<24,e=r[a+1&7],n^=e^e>>>10,e=r[a+3&7],n^=e^e>>>3,e=r[a+4&7],n^=e^e<<7,e=r[a+7&7],e^=e<<13,n^=e^e<<9,r[a]=n,t.i=a+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(n=0,t=""+t;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function a(e,t){return t.x=e.x.slice(),t.i=e.i,t}function s(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do var e=n.next()>>>11,t=(n.next()>>>0)/4294967296,r=(e+t)/2097152;while(0===r)return r},i.int32=n.next,i.quick=i,s&&(s.x&&a(s,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=s:n&&n.amd?n(function(){return s}):this.xorshift7=s}(0,e,"function"==typeof define&&define)}),_.register("gBs5C",function(e,t){!function(e,t,n){function r(e){var t=this;t.next=function(){var e,n,r=t.w,a=t.X,s=t.i;return t.w=r=r+1640531527|0,n=a[s+34&127],e=a[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[s]=n^e,t.i=s,n+(r^r>>>16)|0},function(e,t){var n,r,a,s,i,o=[],l=128;for(t===(0|t)?(r=t,t=null):(t+="\x00",r=0,l=Math.max(l,t.length)),a=0,s=-32;s<l;++s)t&&(r^=t.charCodeAt((s+32)%t.length)),0===s&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(i=i+1640531527|0,a=0==(n=o[127&s]^=r+i)?a+1:0);for(a>=128&&(o[127&(t&&t.length||0)]=-1),a=127,s=512;s>0;--s)r=o[a+34&127],n=o[a=a+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[a]=r^n;e.w=i,e.X=o,e.i=a}(t,e)}function a(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function s(e,t){null==e&&(e=+new Date);var n=new r(e),s=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do var e=n.next()>>>11,t=(n.next()>>>0)/4294967296,r=(e+t)/2097152;while(0===r)return r},i.int32=n.next,i.quick=i,s&&(s.X&&a(s,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=s:n&&n.amd?n(function(){return s}):this.xor4096=s}(0,e,"function"==typeof define&&define)}),_.register("ktLSh",function(e,t){!function(e,t,n){function r(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function a(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function s(e,t){var n=new r(e),s=t&&t.state,i=function(){return(n.next()>>>0)/4294967296};return i.double=function(){do var e=n.next()>>>11,t=(n.next()>>>0)/4294967296,r=(e+t)/2097152;while(0===r)return r},i.int32=n.next,i.quick=i,s&&("object"==typeof s&&a(s,n),i.state=function(){return a(n,{})}),i}t&&t.exports?t.exports=s:n&&n.amd?n(function(){return s}):this.tychei=s}(0,e,"function"==typeof define&&define)});class O{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class M{refCount(e){return L("refCount")}incRef(e){return L("incRef")}timerAvailable(){return!0}time(e){return L("time")}read(e){return L("read")}readSync(e){return L("readSync")}readToGPU(e,t){return L("readToGPU")}numDataIds(){return L("numDataIds")}disposeData(e,t){return L("disposeData")}write(e,t,n){return L("write")}move(e,t,n,r,a){return L("move")}memory(){return L("memory")}floatPrecision(){return L("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return L("dispose")}}function L(e){throw Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}var z={};function P(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,U(e,--t,n)}function B(e,t){if(e.length!==t.length)throw Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,U(e,--n,r),U(t,n,r)}function W(e,t,n){return Math.max(e,Math.min(t,n))}function V(e){return e%2==0?e:e+1}function U(e,t,n){let r=e[t];e[t]=e[n],e[n]=r}function G(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function H(e,t){let n=Math.random();return t*n+(1-n)*e}function q(e,t){let n=0;for(let r=0;r<e.length;r++){let a=Number(e[r])-Number(t[r]);n+=a*a}return n}function j(e,t){if(!e)throw Error("string"==typeof t?t:t())}function K(e,t,n=""){j(Q(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function X(e){j(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function Y(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||ef(e)&&!n)for(let r=0;r<e.length;++r)Y(e[r],t,n);else t.push(e);return t}function Z(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function J(e){return 0===e.length}function Q(e,t){if(e===t)return!0;if(null==e||null==t||e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function ee(e){return e%1==0}function et(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;{if(e===-1/0)return -1;let t=Math.exp(2*e);return(t-1)/(t+1)}}function en(e){let t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function er(e){let t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return P(t),t}function ea(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function es(e,t=e=>0,n,r=setTimeout){return new Promise((a,s)=>{let i=0,o=()=>{if(e()){a();return}i++;let l=t(i);if(null!=n&&i>=n){s();return}r(o,l)};o()})}function ei(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);let a=e.slice();return a[r]=t/n,a}function eo(e,t){let n=t.length;return j((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`),j(e.every(e=>ee(e)),()=>`All values in axis param must be integers but got axis ${e}`),e.map(e=>e<0?n+e:e)}function el(e,t){let n=[],r=[],a=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||a?null:eo(t,e).sort(),i=0;for(let t=0;t<e.length;++t){if(null!=s){if(s[i]===t&&1!==e[t])throw Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==s[i]||s[i]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),s[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function eu(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else throw Error(`Unknown data type ${e}`);return n}function eh(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else if("string"===e)n=Array(t);else throw Error(`Unknown data type ${e}`);return n}function ep(e,t){for(let n=0;n<e.length;n++){let r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function ed(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function ec(e,t){return"complex64"!==t&&("float32"!==t||"complex64"===e)&&("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)}function ef(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function em(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw Error(`Unknown dtype ${e}`)}function eg(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function ey(e){return"string"==typeof e||e instanceof String}function eb(e){return"boolean"==typeof e}function ex(e){return"number"==typeof e}function ek(e){if(Array.isArray(e))return ek(e[0]);if(e instanceof Float32Array);else if(e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray)return"int32";else if(ex(e));else if(ey(e))return"string";else if(eb(e))return"bool";return"float32"}function ev(e){return!!(e&&e.constructor&&e.call&&e.apply)}function ew(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function eI(e){let t=e.length;if(t<2)return[];let n=Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function eS(e,t,n=!1){if(0===e.length)return t[0];let r=e.reduce((e,t)=>e*t)*(n?2:1);if(0===r)return[];if(r!==t.length)throw Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return function e(t,n,r,a=!1){let s=[];if(1===n.length){let e=n[0]*(a?2:1);for(let n=0;n<e;n++)s[n]=r[t+n]}else{let i=n[0],o=n.slice(1),l=o.reduce((e,t)=>e*t)*(a?2:1);for(let n=0;n<i;n++)s[n]=e(t+n*l,o,r,a)}return s}(0,e,t,n)}function eN(e,t){let n=eT(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function eT(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw Error(`Unknown data type ${t}`)}function eC(e,t){let n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return eS(e,new Float32Array(n));if("int32"===t)return eS(e,new Int32Array(n));if("bool"===t)return eS(e,new Uint8Array(n));throw Error(`Unknown data type ${t}`)}function e$(e){e.forEach(t=>{j(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function eE(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function eA(e,t,n){if(0===t)return[];if(1===t)return[e];let r=Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function eR(e){return e&&e.then&&"function"==typeof e.then}R(z,"shuffle",()=>P),R(z,"swap",()=>U),R(z,"shuffleCombo",()=>B),R(z,"clamp",()=>W),R(z,"nearestLargerEven",()=>V),R(z,"sum",()=>G),R(z,"randUniform",()=>H),R(z,"distSquared",()=>q),R(z,"assert",()=>j),R(z,"assertShapesMatch",()=>K),R(z,"arraysEqual",()=>Q),R(z,"assertNonNull",()=>X),R(z,"flatten",()=>Y),R(z,"isTypedArray",()=>ef),R(z,"sizeFromShape",()=>Z),R(z,"isScalarShape",()=>J),R(z,"isInt",()=>ee),R(z,"tanh",()=>et),R(z,"sizeToSquarishShape",()=>en),R(z,"createShuffledIndices",()=>er),R(z,"rightPad",()=>ea),R(z,"repeatedTry",()=>es),R(z,"inferFromImplicitShape",()=>ei),R(z,"parseAxisParam",()=>eo),R(z,"squeezeShape",()=>el),R(z,"getTypedArrayFromDType",()=>eu),R(z,"getArrayFromDType",()=>eh),R(z,"checkConversionForErrors",()=>ep),R(z,"isValidDtype",()=>ed),R(z,"hasEncodingLoss",()=>ec),R(z,"bytesPerElement",()=>em),R(z,"bytesFromStringArray",()=>eg),R(z,"isString",()=>ey),R(z,"isBoolean",()=>eb),R(z,"isNumber",()=>ex),R(z,"inferDtype",()=>ek),R(z,"isFunction",()=>ev),R(z,"nearestDivisor",()=>ew),R(z,"computeStrides",()=>eI),R(z,"toNestedArray",()=>eS),R(z,"makeOnesTypedArray",()=>eN),R(z,"makeZerosTypedArray",()=>eT),R(z,"makeZerosNestedTypedArray",()=>eC),R(z,"assertNonNegativeIntegerDimensions",()=>e$),R(z,"locToIndex",()=>eE),R(z,"indexToLoc",()=>eA),R(z,"isPromise",()=>eR);let eF="tfjsflags";class eD{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=e_,this.populateURLFlags()}setPlatform(e,t){null==this.platform||eM.getBool("IS_TEST")||eM.getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){let t=this.urlFlags[e];eM.getBool("IS_TEST")||eM.getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];let t=this.evaluateFlag(e);if(eR(t))throw Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;let e=this.getQueryParams(this.global.location.search);if(eF in e){let t=e[eF].split(",");t.forEach(e=>{let[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(`${+t}`===t)return+t;throw Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)})}}}function e_(e){let t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>{var r,a;return r=n[0],a=n[1],t[decodeURIComponent(r)]=decodeURIComponent(a||""),n.join("=")}),t}function eO(){return eM}let eM=null;var eL={},ez=eL={};function eP(){throw Error("setTimeout has not been defined")}function eB(){throw Error("clearTimeout has not been defined")}function eW(e){if(u===setTimeout)return setTimeout(e,0);if((u===eP||!u)&&setTimeout)return u=setTimeout,setTimeout(e,0);try{return u(e,0)}catch(t){try{return u.call(null,e,0)}catch(t){return u.call(this,e,0)}}}!function(){try{u="function"==typeof setTimeout?setTimeout:eP}catch(e){u=eP}try{h="function"==typeof clearTimeout?clearTimeout:eB}catch(e){h=eB}}();var eV=[],eU=!1,eG=-1;function eH(){eU&&p&&(eU=!1,p.length?eV=p.concat(eV):eG=-1,eV.length&&eq())}function eq(){if(!eU){var e=eW(eH);eU=!0;for(var t=eV.length;t;){for(p=eV,eV=[];++eG<t;)p&&p[eG].run();eG=-1,t=eV.length}p=null,eU=!1,function(e){if(h===clearTimeout)return clearTimeout(e);if((h===eB||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(e);try{h(e)}catch(t){try{return h.call(null,e)}catch(t){return h.call(this,e)}}}(e)}}function ej(e,t){this.fun=e,this.array=t}function eK(){}function eX(){if(null==e){let t;if("undefined"!=typeof window)t=window;else if(void 0!==A)t=A;else if(void 0!==eL)t=eL;else if("undefined"!=typeof self)t=self;else throw Error("Could not find a global object");e=t}return e}function eY(e,t){let n=function(){let e=eX();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{let r=t();return n.set(e,r),n.get(e)}}ez.nextTick=function(e){var t=Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];eV.push(new ej(e,t)),1!==eV.length||eU||eW(eq)},ej.prototype.run=function(){this.fun.apply(null,this.array)},ez.title="browser",ez.browser=!0,ez.env={},ez.argv=[],ez.version="",ez.versions={},ez.on=eK,ez.addListener=eK,ez.once=eK,ez.off=eK,ez.removeListener=eK,ez.removeAllListeners=eK,ez.emit=eK,ez.prependListener=eK,ez.prependOnceListener=eK,ez.listeners=function(e){return[]},ez.binding=function(e){throw Error("process.binding is not supported")},ez.cwd=function(){return"/"},ez.chdir=function(e){throw Error("process.chdir is not supported")},ez.umask=function(){return 0};var eZ={};R(eZ,"Abs",()=>eJ),R(eZ,"Acos",()=>eQ),R(eZ,"Acosh",()=>e0),R(eZ,"Add",()=>e1),R(eZ,"AddN",()=>e2),R(eZ,"All",()=>e3),R(eZ,"Any",()=>e4),R(eZ,"ArgMax",()=>e6),R(eZ,"ArgMin",()=>e5),R(eZ,"Asin",()=>e8),R(eZ,"Asinh",()=>e7),R(eZ,"Atan",()=>e9),R(eZ,"Atanh",()=>te),R(eZ,"Atan2",()=>tt),R(eZ,"AvgPool",()=>tn),R(eZ,"AvgPoolGrad",()=>tr),R(eZ,"AvgPool3D",()=>ta),R(eZ,"AvgPool3DGrad",()=>ts),R(eZ,"BatchMatMul",()=>ti),R(eZ,"BatchToSpaceND",()=>to),R(eZ,"Bincount",()=>tl),R(eZ,"BroadcastTo",()=>tu),R(eZ,"BroadcastArgs",()=>th),R(eZ,"Cast",()=>tp),R(eZ,"Ceil",()=>td),R(eZ,"ClipByValue",()=>tc),R(eZ,"Complex",()=>tf),R(eZ,"ComplexAbs",()=>tm),R(eZ,"Concat",()=>tg),R(eZ,"Conv2D",()=>ty),R(eZ,"Conv2DBackpropFilter",()=>tb),R(eZ,"Conv2DBackpropInput",()=>tx),R(eZ,"Conv3D",()=>tk),R(eZ,"Conv3DBackpropFilterV2",()=>tv),R(eZ,"Conv3DBackpropInputV2",()=>tw),R(eZ,"Cos",()=>tI),R(eZ,"Cosh",()=>tS),R(eZ,"Cumprod",()=>tN),R(eZ,"Cumsum",()=>tT),R(eZ,"CropAndResize",()=>tC),R(eZ,"DenseBincount",()=>t$),R(eZ,"DepthToSpace",()=>tE),R(eZ,"DepthwiseConv2dNative",()=>tA),R(eZ,"DepthwiseConv2dNativeBackpropFilter",()=>tR),R(eZ,"DepthwiseConv2dNativeBackpropInput",()=>tF),R(eZ,"Diag",()=>tD),R(eZ,"Dilation2D",()=>t_),R(eZ,"Dilation2DBackpropInput",()=>tO),R(eZ,"Dilation2DBackpropFilter",()=>tM),R(eZ,"RealDiv",()=>tL),R(eZ,"Einsum",()=>tz),R(eZ,"Elu",()=>tP),R(eZ,"EluGrad",()=>tB),R(eZ,"Erf",()=>tW),R(eZ,"Equal",()=>tV),R(eZ,"Exp",()=>tU),R(eZ,"ExpandDims",()=>tG),R(eZ,"Expm1",()=>tH),R(eZ,"FFT",()=>tq),R(eZ,"Fill",()=>tj),R(eZ,"FlipLeftRight",()=>tK),R(eZ,"Floor",()=>tX),R(eZ,"FloorDiv",()=>tY),R(eZ,"FusedBatchNorm",()=>tZ),R(eZ,"GatherV2",()=>tJ),R(eZ,"GatherNd",()=>tQ),R(eZ,"Greater",()=>t0),R(eZ,"GreaterEqual",()=>t1),R(eZ,"Identity",()=>t2),R(eZ,"IFFT",()=>t3),R(eZ,"Imag",()=>t4),R(eZ,"IsFinite",()=>t6),R(eZ,"IsInf",()=>t5),R(eZ,"IsNan",()=>t8),R(eZ,"LeakyRelu",()=>t7),R(eZ,"Less",()=>t9),R(eZ,"LessEqual",()=>ne),R(eZ,"LinSpace",()=>nt),R(eZ,"Log",()=>nn),R(eZ,"Log1p",()=>nr),R(eZ,"LogicalAnd",()=>na),R(eZ,"LogicalNot",()=>ns),R(eZ,"LogicalOr",()=>ni),R(eZ,"LogicalXor",()=>no),R(eZ,"LogSoftmax",()=>nl),R(eZ,"LowerBound",()=>nu),R(eZ,"LRN",()=>nh),R(eZ,"LRNGrad",()=>np),R(eZ,"Max",()=>nd),R(eZ,"Maximum",()=>nc),R(eZ,"MaxPool",()=>nf),R(eZ,"MaxPoolGrad",()=>nm),R(eZ,"MaxPool3D",()=>ng),R(eZ,"MaxPool3DGrad",()=>ny),R(eZ,"MaxPoolWithArgmax",()=>nb),R(eZ,"Mean",()=>nx),R(eZ,"Min",()=>nk),R(eZ,"Minimum",()=>nv),R(eZ,"MirrorPad",()=>nw),R(eZ,"Mod",()=>nI),R(eZ,"Multinomial",()=>nS),R(eZ,"Multiply",()=>nN),R(eZ,"Neg",()=>nT),R(eZ,"NotEqual",()=>nC),R(eZ,"NonMaxSuppressionV3",()=>n$),R(eZ,"NonMaxSuppressionV4",()=>nE),R(eZ,"NonMaxSuppressionV5",()=>nA),R(eZ,"OnesLike",()=>nR),R(eZ,"OneHot",()=>nF),R(eZ,"Pack",()=>nD),R(eZ,"PadV2",()=>n_),R(eZ,"Pool",()=>nO),R(eZ,"Pow",()=>nM),R(eZ,"Prelu",()=>nL),R(eZ,"Prod",()=>nz),R(eZ,"RaggedGather",()=>nP),R(eZ,"RaggedTensorToTensor",()=>nB),R(eZ,"Range",()=>nW),R(eZ,"Real",()=>nV),R(eZ,"Reciprocal",()=>nU),R(eZ,"Relu",()=>nG),R(eZ,"Reshape",()=>nH),R(eZ,"ResizeNearestNeighbor",()=>nq),R(eZ,"ResizeNearestNeighborGrad",()=>nj),R(eZ,"ResizeBilinear",()=>nK),R(eZ,"ResizeBilinearGrad",()=>nX),R(eZ,"Relu6",()=>nY),R(eZ,"Reverse",()=>nZ),R(eZ,"Round",()=>nJ),R(eZ,"Rsqrt",()=>nQ),R(eZ,"ScatterNd",()=>n0),R(eZ,"SearchSorted",()=>n1),R(eZ,"Select",()=>n2),R(eZ,"Selu",()=>n3),R(eZ,"Slice",()=>n4),R(eZ,"Sin",()=>n6),R(eZ,"Sinh",()=>n5),R(eZ,"Sign",()=>n8),R(eZ,"Sigmoid",()=>n7),R(eZ,"Softplus",()=>n9),R(eZ,"Sqrt",()=>re),R(eZ,"Sum",()=>rt),R(eZ,"SpaceToBatchND",()=>rn),R(eZ,"SplitV",()=>rr),R(eZ,"Softmax",()=>ra),R(eZ,"SparseFillEmptyRows",()=>rs),R(eZ,"SparseReshape",()=>ri),R(eZ,"SparseSegmentMean",()=>ro),R(eZ,"SparseSegmentSum",()=>rl),R(eZ,"SparseToDense",()=>ru),R(eZ,"SquaredDifference",()=>rh),R(eZ,"Square",()=>rp),R(eZ,"StridedSlice",()=>rd),R(eZ,"StringNGrams",()=>rc),R(eZ,"StringSplit",()=>rf),R(eZ,"StringToHashBucketFast",()=>rm),R(eZ,"Sub",()=>rg),R(eZ,"Tan",()=>ry),R(eZ,"Tanh",()=>rb),R(eZ,"Tile",()=>rx),R(eZ,"TopK",()=>rk),R(eZ,"Transform",()=>rv),R(eZ,"Transpose",()=>rw),R(eZ,"Unique",()=>rI),R(eZ,"Unpack",()=>rS),R(eZ,"UnsortedSegmentSum",()=>rN),R(eZ,"UpperBound",()=>rT),R(eZ,"ZerosLike",()=>rC),R(eZ,"Step",()=>r$),R(eZ,"FromPixels",()=>rE),R(eZ,"RotateWithOffset",()=>rA),R(eZ,"_FusedMatMul",()=>rR),R(eZ,"FusedConv2D",()=>rF),R(eZ,"FusedDepthwiseConv2D",()=>rD);let eJ="Abs",eQ="Acos",e0="Acosh",e1="Add",e2="AddN",e3="All",e4="Any",e6="ArgMax",e5="ArgMin",e8="Asin",e7="Asinh",e9="Atan",te="Atanh",tt="Atan2",tn="AvgPool",tr="AvgPoolGrad",ta="AvgPool3D",ts="AvgPool3DGrad",ti="BatchMatMul",to="BatchToSpaceND",tl="Bincount",tu="BroadcastTo",th="BroadcastArgs",tp="Cast",td="Ceil",tc="ClipByValue",tf="Complex",tm="ComplexAbs",tg="Concat",ty="Conv2D",tb="Conv2DBackpropFilter",tx="Conv2DBackpropInput",tk="Conv3D",tv="Conv3DBackpropFilterV2",tw="Conv3DBackpropInputV2",tI="Cos",tS="Cosh",tN="Cumprod",tT="Cumsum",tC="CropAndResize",t$="DenseBincount",tE="DepthToSpace",tA="DepthwiseConv2dNative",tR="DepthwiseConv2dNativeBackpropFilter",tF="DepthwiseConv2dNativeBackpropInput",tD="Diag",t_="Dilation2D",tO="Dilation2DBackpropInput",tM="Dilation2DBackpropFilter",tL="RealDiv",tz="Einsum",tP="Elu",tB="EluGrad",tW="Erf",tV="Equal",tU="Exp",tG="ExpandDims",tH="Expm1",tq="FFT",tj="Fill",tK="FlipLeftRight",tX="Floor",tY="FloorDiv",tZ="FusedBatchNorm",tJ="GatherV2",tQ="GatherNd",t0="Greater",t1="GreaterEqual",t2="Identity",t3="IFFT",t4="Imag",t6="IsFinite",t5="IsInf",t8="IsNan",t7="LeakyRelu",t9="Less",ne="LessEqual",nt="LinSpace",nn="Log",nr="Log1p",na="LogicalAnd",ns="LogicalNot",ni="LogicalOr",no="LogicalXor",nl="LogSoftmax",nu="LowerBound",nh="LRN",np="LRNGrad",nd="Max",nc="Maximum",nf="MaxPool",nm="MaxPoolGrad",ng="MaxPool3D",ny="MaxPool3DGrad",nb="MaxPoolWithArgmax",nx="Mean",nk="Min",nv="Minimum",nw="MirrorPad",nI="Mod",nS="Multinomial",nN="Multiply",nT="Neg",nC="NotEqual",n$="NonMaxSuppressionV3",nE="NonMaxSuppressionV4",nA="NonMaxSuppressionV5",nR="OnesLike",nF="OneHot",nD="Pack",n_="PadV2",nO="Pool",nM="Pow",nL="Prelu",nz="Prod",nP="RaggedGather",nB="RaggedTensorToTensor",nW="Range",nV="Real",nU="Reciprocal",nG="Relu",nH="Reshape",nq="ResizeNearestNeighbor",nj="ResizeNearestNeighborGrad",nK="ResizeBilinear",nX="ResizeBilinearGrad",nY="Relu6",nZ="Reverse",nJ="Round",nQ="Rsqrt",n0="ScatterNd",n1="SearchSorted",n2="Select",n3="Selu",n4="Slice",n6="Sin",n5="Sinh",n8="Sign",n7="Sigmoid",n9="Softplus",re="Sqrt",rt="Sum",rn="SpaceToBatchND",rr="SplitV",ra="Softmax",rs="SparseFillEmptyRows",ri="SparseReshape",ro="SparseSegmentMean",rl="SparseSegmentSum",ru="SparseToDense",rh="SquaredDifference",rp="Square",rd="StridedSlice",rc="StringNGrams",rf="StringSplit",rm="StringToHashBucketFast",rg="Sub",ry="Tan",rb="Tanh",rx="Tile",rk="TopK",rv="Transform",rw="Transpose",rI="Unique",rS="Unpack",rN="UnsortedSegmentSum",rT="UpperBound",rC="ZerosLike",r$="Step",rE="FromPixels",rA="RotateWithOffset",rR="_FusedMatMul",rF="FusedConv2D",rD="FusedDepthwiseConv2D";var r_={};R(r_,"getKernel",()=>rB),R(r_,"getGradient",()=>rW),R(r_,"getKernelsForBackend",()=>rV),R(r_,"registerKernel",()=>rU),R(r_,"registerGradient",()=>rG),R(r_,"unregisterKernel",()=>rH),R(r_,"unregisterGradient",()=>rq),R(r_,"copyRegisteredKernels",()=>rj);var rO={};function rM(...e){eM.getBool("IS_TEST")||eM.getBool("PROD")||console.warn(...e)}function rL(...e){eM.getBool("IS_TEST")||eM.getBool("PROD")||console.log(...e)}R(rO,"warn",()=>rM),R(rO,"log",()=>rL);let rz=eY("kernelRegistry",()=>new Map),rP=eY("gradRegistry",()=>new Map);function rB(e,t){let n=rK(e,t);return rz.get(n)}function rW(e){return rP.get(e)}function rV(e){let t=rz.entries(),n=[];for(;;){let{done:r,value:a}=t.next();if(r)break;let[s,i]=a,[o]=s.split("_");o===e&&n.push(i)}return n}function rU(e){let{kernelName:t,backendName:n}=e,r=rK(t,n);rz.has(r)&&rM(`The kernel '${t}' for backend '${n}' is already registered`),rz.set(r,e)}function rG(e){let{kernelName:t}=e;rP.has(t)&&eM.getBool("DEBUG")&&rM(`Overriding the gradient for '${t}'`),rP.set(t,e)}function rH(e,t){let n=rK(e,t);if(!rz.has(n))throw Error(`The kernel '${e}' for backend '${t}' is not registered`);rz.delete(n)}function rq(e){if(!rP.has(e))throw Error(`The gradient '${e}' for backend is not registered`);rP.delete(e)}function rj(e,t){let n=rV(e);n.forEach(e=>{let n=Object.assign({},e,{backendName:t});rU(n)})}function rK(e,t){return`${t}_${e}`}var rX={};R(rX,"createScalarValue",()=>aS),R(rX,"encodeString",()=>a$),R(rX,"toTypedArray",()=>aN),R(rX,"now",()=>aT),R(rX,"fetch",()=>aC),R(rX,"decodeString",()=>aE);var rY={};R(rY,"hexToLong",()=>ac),R(rY,"fingerPrint64",()=>aI);var rZ={};rZ=rQ;var rJ=null;try{rJ=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function rQ(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function r0(e){return!0===(e&&e.__isLong__)}rQ.prototype.__isLong__,Object.defineProperty(rQ.prototype,"__isLong__",{value:!0}),rQ.isLong=r0;var r1={},r2={};function r3(e,t){var n,r,a;return t?(e>>>=0,(a=0<=e&&e<256)&&(r=r2[e]))?r:(n=r6(e,(0|e)<0?-1:0,!0),a&&(r2[e]=n),n):(e|=0,(a=-128<=e&&e<128)&&(r=r1[e]))?r:(n=r6(e,e<0?-1:0,!1),a&&(r1[e]=n),n)}function r4(e,t){if(isNaN(e))return t?aa:ar;if(t){if(e<0)return aa;if(e>=ae)return au}else{if(e<=-at)return ah;if(e+1>=at)return al}return e<0?r4(-e,t).neg():r6(e%r9|0,e/r9|0,t)}function r6(e,t,n){return new rQ(e,t,n)}rQ.fromInt=r3,rQ.fromNumber=r4,rQ.fromBits=r6;var r5=Math.pow;function r8(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return ar;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return r8(e.substring(1),t,n).neg();for(var r,a=r4(r5(n,8)),s=ar,i=0;i<e.length;i+=8){var o=Math.min(8,e.length-i),l=parseInt(e.substring(i,i+o),n);if(o<8){var u=r4(r5(n,o));s=s.mul(u).add(r4(l))}else s=(s=s.mul(a)).add(r4(l))}return s.unsigned=t,s}function r7(e,t){return"number"==typeof e?r4(e,t):"string"==typeof e?r8(e,t):r6(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}rQ.fromString=r8,rQ.fromValue=r7;var r9=4294967296,ae=18446744073709552e3,at=0x7fffffffffffffff,an=r3(16777216),ar=r3(0);rQ.ZERO=ar;var aa=r3(0,!0);rQ.UZERO=aa;var as=r3(1);rQ.ONE=as;var ai=r3(1,!0);rQ.UONE=ai;var ao=r3(-1);rQ.NEG_ONE=ao;var al=r6(-1,2147483647,!1);rQ.MAX_VALUE=al;var au=r6(-1,-1,!0);rQ.MAX_UNSIGNED_VALUE=au;var ah=r6(0,-2147483648,!1);rQ.MIN_VALUE=ah;var ap=rQ.prototype;ap.toInt=function(){return this.unsigned?this.low>>>0:this.low},ap.toNumber=function(){return this.unsigned?(this.high>>>0)*r9+(this.low>>>0):this.high*r9+(this.low>>>0)},ap.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(!this.eq(ah))return"-"+this.neg().toString(e);var t=r4(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}for(var a=r4(r5(e,6),this.unsigned),s=this,i="";;){var o=s.div(a),l=(s.sub(o.mul(a)).toInt()>>>0).toString(e);if((s=o).isZero())return l+i;for(;l.length<6;)l="0"+l;i=""+l+i}},ap.getHighBits=function(){return this.high},ap.getHighBitsUnsigned=function(){return this.high>>>0},ap.getLowBits=function(){return this.low},ap.getLowBitsUnsigned=function(){return this.low>>>0},ap.getNumBitsAbs=function(){if(this.isNegative())return this.eq(ah)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&(e&1<<t)==0;t--);return 0!=this.high?t+33:t+1},ap.isZero=function(){return 0===this.high&&0===this.low},ap.eqz=ap.isZero,ap.isNegative=function(){return!this.unsigned&&this.high<0},ap.isPositive=function(){return this.unsigned||this.high>=0},ap.isOdd=function(){return(1&this.low)==1},ap.isEven=function(){return(1&this.low)==0},ap.equals=function(e){return r0(e)||(e=r7(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},ap.eq=ap.equals,ap.notEquals=function(e){return!this.eq(e)},ap.neq=ap.notEquals,ap.ne=ap.notEquals,ap.lessThan=function(e){return 0>this.comp(e)},ap.lt=ap.lessThan,ap.lessThanOrEqual=function(e){return 0>=this.comp(e)},ap.lte=ap.lessThanOrEqual,ap.le=ap.lessThanOrEqual,ap.greaterThan=function(e){return this.comp(e)>0},ap.gt=ap.greaterThan,ap.greaterThanOrEqual=function(e){return this.comp(e)>=0},ap.gte=ap.greaterThanOrEqual,ap.ge=ap.greaterThanOrEqual,ap.compare=function(e){if(r0(e)||(e=r7(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},ap.comp=ap.compare,ap.negate=function(){return!this.unsigned&&this.eq(ah)?ah:this.not().add(as)},ap.neg=ap.negate,ap.add=function(e){r0(e)||(e=r7(e));var t,n,r=this.high>>>16,a=65535&this.high,s=this.low>>>16,i=65535&this.low,o=e.high>>>16,l=65535&e.high,u=e.low>>>16,h=65535&e.low,p=0,d=0;return t=0+((n=0+(i+h))>>>16),n&=65535,t+=s+u,d+=t>>>16,t&=65535,d+=a+l,p+=d>>>16,d&=65535,p+=r+o,r6(t<<16|n,(p&=65535)<<16|d,this.unsigned)},ap.subtract=function(e){return r0(e)||(e=r7(e)),this.add(e.neg())},ap.sub=ap.subtract,ap.multiply=function(e){if(this.isZero())return ar;if(r0(e)||(e=r7(e)),rJ)return r6(rJ.mul(this.low,this.high,e.low,e.high),rJ.get_high(),this.unsigned);if(e.isZero())return ar;if(this.eq(ah))return e.isOdd()?ah:ar;if(e.eq(ah))return this.isOdd()?ah:ar;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(an)&&e.lt(an))return r4(this.toNumber()*e.toNumber(),this.unsigned);var t,n,r=this.high>>>16,a=65535&this.high,s=this.low>>>16,i=65535&this.low,o=e.high>>>16,l=65535&e.high,u=e.low>>>16,h=65535&e.low,p=0,d=0;return t=0+((n=0+i*h)>>>16),n&=65535,t+=s*h,d+=t>>>16,t&=65535,t+=i*u,d+=t>>>16,t&=65535,d+=a*h,p+=d>>>16,d&=65535,d+=s*u,p+=d>>>16,d&=65535,d+=i*l,p+=d>>>16,d&=65535,p+=r*h+a*u+s*l+i*o,r6(t<<16|n,(p&=65535)<<16|d,this.unsigned)},ap.mul=ap.multiply,ap.divide=function(e){if(r0(e)||(e=r7(e)),e.isZero())throw Error("division by zero");if(rJ){var t,n,r;return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?r6((this.unsigned?rJ.div_u:rJ.div_s)(this.low,this.high,e.low,e.high),rJ.get_high(),this.unsigned):this}if(this.isZero())return this.unsigned?aa:ar;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return aa;if(e.gt(this.shru(1)))return ai;r=aa}else{if(this.eq(ah))return e.eq(as)||e.eq(ao)?ah:e.eq(ah)?as:(t=this.shr(1).div(e).shl(1)).eq(ar)?e.isNegative()?as:ao:(n=this.sub(e.mul(t)),r=t.add(n.div(e)));if(e.eq(ah))return this.unsigned?aa:ar;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=ar}for(n=this;n.gte(e);){for(var a=Math.ceil(Math.log(t=Math.max(1,Math.floor(n.toNumber()/e.toNumber())))/Math.LN2),s=a<=48?1:r5(2,a-48),i=r4(t),o=i.mul(e);o.isNegative()||o.gt(n);)t-=s,o=(i=r4(t,this.unsigned)).mul(e);i.isZero()&&(i=as),r=r.add(i),n=n.sub(o)}return r},ap.div=ap.divide,ap.modulo=function(e){return(r0(e)||(e=r7(e)),rJ)?r6((this.unsigned?rJ.rem_u:rJ.rem_s)(this.low,this.high,e.low,e.high),rJ.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},ap.mod=ap.modulo,ap.rem=ap.modulo,ap.not=function(){return r6(~this.low,~this.high,this.unsigned)},ap.and=function(e){return r0(e)||(e=r7(e)),r6(this.low&e.low,this.high&e.high,this.unsigned)},ap.or=function(e){return r0(e)||(e=r7(e)),r6(this.low|e.low,this.high|e.high,this.unsigned)},ap.xor=function(e){return r0(e)||(e=r7(e)),r6(this.low^e.low,this.high^e.high,this.unsigned)},ap.shiftLeft=function(e){return(r0(e)&&(e=e.toInt()),0==(e&=63))?this:e<32?r6(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):r6(0,this.low<<e-32,this.unsigned)},ap.shl=ap.shiftLeft,ap.shiftRight=function(e){return(r0(e)&&(e=e.toInt()),0==(e&=63))?this:e<32?r6(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):r6(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},ap.shr=ap.shiftRight,ap.shiftRightUnsigned=function(e){if(r0(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?r6(this.low>>>e|t<<32-e,t>>>e,this.unsigned):32===e?r6(t,0,this.unsigned):r6(t>>>e-32,0,this.unsigned)},ap.shru=ap.shiftRightUnsigned,ap.shr_u=ap.shiftRightUnsigned,ap.toSigned=function(){return this.unsigned?r6(this.low,this.high,!1):this},ap.toUnsigned=function(){return this.unsigned?this:r6(this.low,this.high,!0)},ap.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},ap.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},ap.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},rQ.fromBytes=function(e,t,n){return n?rQ.fromBytesLE(e,t):rQ.fromBytesBE(e,t)},rQ.fromBytesLE=function(e,t){return new rQ(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},rQ.fromBytesBE=function(e,t){return new rQ(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)};let ad=rZ.default||rZ;function ac(e){return ad.fromString(e,!0,16)}let af=ac("c3a5c85c97cb3127"),am=ac("b492b66fbe98f273"),ag=ac("9ae16a3b2f90404f");function ay(e){return e.xor(e.shru(47))}function ab(e,t,n){let r=e.slice(t,t+n);return ad.fromBytes(Array.from(r),!0,!0)}function ax(e,t){return ab(e,t,8)}function ak(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function av(e,t,n=ac("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let a=t.xor(r).mul(n);return(a=a.xor(a.shru(47))).mul(n)}function aw(e,t,n,r){return function(e,t,n,r,a,s){a=a.add(e),s=ak(s.add(a).add(r),21);let i=a;return a=(a=a.add(t)).add(n),s=s.add(ak(a,44)),[a.add(r),s.add(i)]}(ax(e,t),ax(e,t+8),ax(e,t+16),ax(e,t+24),n,r)}function aI(e,t=e.length){let n=ad.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){let n=ag.add(2*t),r=ax(e,0).add(ag),a=ax(e,t-8),s=ak(a,37).mul(n).add(r),i=ak(r,25).add(a).mul(n);return av(s,i,n)}if(t>=4){let n=ag.add(2*t),r=ab(e,0,4);return av(r.shl(3).add(t),ab(e,t-4,4),n)}if(t>0){let n=e[0],r=e[t>>1],a=e[t-1],s=t+(a<<2);return ay(ag.mul(n+(r<<8)).xor(af.mul(s))).mul(ag)}return ag}(e,t):function(e,t=e.length){let n=ag.add(2*t),r=ax(e,0).mul(am),a=ax(e,8),s=ax(e,t-8).mul(n),i=ax(e,t-16).mul(ag);return av(ak(r.add(a),43).add(ak(s,30)).add(i),r.add(ak(a.add(ag),18)).add(s),n)}(e,t);if(t<=64)return function(e,t=e.length){let n=ag.add(2*t),r=ax(e,0).mul(ag),a=ax(e,8),s=ax(e,t-8).mul(n),i=ax(e,t-16).mul(ag),o=ak(r.add(a),43).add(ak(s,30)).add(i),l=av(o,r.add(ak(a.add(ag),18)).add(s),n),u=ax(e,16).mul(n),h=ax(e,24),p=o.add(ax(e,t-32)).mul(n),d=l.add(ax(e,t-24)).mul(n);return av(ak(u.add(h),43).add(ak(p,30)).add(d),u.add(ak(h.add(r),18)).add(p),n)}(e,t);let r=n,a=n.mul(am).add(113),s=ay(a.mul(ag).add(113)).mul(ag),i=[ad.UZERO,ad.UZERO],o=[ad.UZERO,ad.UZERO];r=r.mul(ag).add(ax(e,0));let l=0,u=(t-1>>6)*64,h=u+(t-1&63)-63;do r=ak(r.add(a).add(i[0]).add(ax(e,l+8)),37).mul(am),a=ak(a.add(i[1]).add(ax(e,l+48)),42).mul(am),r=r.xor(o[1]),a=a.add(i[0]).add(ax(e,l+40)),s=ak(s.add(o[0]),33).mul(am),i=aw(e,l,i[1].mul(am),r.add(o[0])),o=aw(e,l+32,s.add(o[1]),a.add(ax(e,l+16))),[s,r]=[r,s],l+=64;while(l!==u)let p=am.add(s.and(255).shl(1));return l=h,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),r=ak(r.add(a).add(i[0]).add(ax(e,l+8)),37).mul(p),a=ak(a.add(i[1]).add(ax(e,l+48)),42).mul(p),r=r.xor(o[1].mul(9)),a=a.add(i[0].mul(9).add(ax(e,l+40))),s=ak(s.add(o[0]),33).mul(p),i=aw(e,l,i[1].mul(p),r.add(o[0])),o=aw(e,l+32,s.add(o[1]),a.add(ax(e,l+16))),[s,r]=[r,s],av(av(i[0],o[0],p).add(ay(a).mul(af)).add(s),av(i[1],o[1],p).add(r),p)}function aS(e,t){return"string"===t?a$(e):aN([e],t)}function aN(e,t){var n;if("string"===t)throw Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=Y(e)),eM.getBool("DEBUG")&&ep(e,t),(n=e)instanceof Float32Array&&"float32"===t||n instanceof Int32Array&&"int32"===t||n instanceof Uint8Array&&"bool"===t)return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){let t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw Error(`Unknown data type ${t}`)}function aT(){return eM.platform.now()}function aC(e,t){return eM.platform.fetch(e,t)}function a$(e,t="utf-8"){return t=t||"utf-8",eM.platform.encode(e,t)}function aE(e,t="utf-8"){return t=t||"utf-8",eM.platform.decode(e,t)}l(rX,z),l(rX,rY);class aA{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new aR)}profileKernel(e,t,n){let r,a;let s=()=>{r=n()},i=aT();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{for(let e of(s(),r))e.dataSync();a=Promise.resolve({kernelMs:aT()-i})}if(eM.getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){let n=r[t];n.data().then(t=>{!function(e,t,n){if("float32"===t)for(let t=0;t<e.length;t++){let r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}}(t,n.dtype,e)})}let o={kernelName:e,outputs:r,inputs:t,timeMs:a.then(e=>e.kernelMs),extraInfo:a.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")};return o}logKernelProfile(e){let{kernelName:t,outputs:n,timeMs:r,inputs:a,extraInfo:s}=e;n.forEach(e=>{Promise.all([e.data(),r,s]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])})})}}class aR{logKernelProfile(e,t,n,r,a,s){let i="number"==typeof r?ea(`${r}ms`,9):r.error,o=ea(e,25),l=t.rank,u=t.size,h=ea(t.shape.toString(),14),p="";for(let e in a){let n=a[e];if(null!=n){let r=n.shape||t.shape,a=r.length;p+=`${e}: ${a}D ${a>0?r:""} `}}console.log(`%c${o}	%c${i}	%c${l}D ${h}	%c${u}	%c${p}	%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function aF(e,t,n){return ea(Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:ey(e)?`'${e}'`:"bool"===n?aD(e):parseFloat(e.toFixed(7)).toString(),t)}function aD(e){return 0===e?"false":"true"}function a_(e){let t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class aO{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=Z(e),null!=n){let e=n.length;j(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||eh(t,this.size),this.strides=eI(e)}set(e,...t){0===t.length&&(t=[0]),j(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);let n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(let n of e){if(n<0||n>=this.shape[t]){let t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];let t=Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return aM().makeTensor(this.values,this.shape,this.dtype)}}let aM=null,aL=null;class az{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=Z(e),this.strides=eI(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){let e=await this.data();return aL.buffer(this.shape,this.dtype,e)}bufferSync(){return aL.buffer(this.shape,this.dtype,this.dataSync())}async array(){let e=await this.data();return eS(this.shape,e,"complex64"===this.dtype)}arraySync(){return eS(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();let e=aM().read(this.dataId);if("string"===this.dtype){let t=await e;try{return t.map(e=>aE(e))}catch(e){throw Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),aM().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();let e=aM().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>aE(e))}catch(e){throw Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();let e=await aM().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(aM().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw Error("Tensor is disposed.")}print(e=!1){return aL.print(this,e)}clone(){return this.throwIfDisposed(),aL.clone(this)}toString(e=!1){let t=this.dataSync();return function(e,t,n,r){let a=eI(t),s=function(e,t,n,r){let a=Z(t),s=r[r.length-1],i=Array(s).fill(0),o=t.length,l="complex64"===n?a_(e):e;if(o>1)for(let e=0;e<a/s;e++){let t=e*s;for(let e=0;e<s;e++)i[e]=Math.max(i[e],aF(l[t+e],0,n).length)}return i}(e,t,n,a),i=t.length,o=function e(t,n,r,a,s,i=!0){let o="complex64"===r?2:1,l=n[0],u=n.length;if(0===u){if("complex64"===r){let e=a_(t);return[aF(e[0],0,r)]}return"bool"===r?[aD(t[0])]:[t[0].toString()]}if(1===u){if(l>20){let e=3*o,n=Array.from(t.slice(0,e)),a=Array.from(t.slice((l-3)*o,l*o));return"complex64"===r&&(n=a_(n),a=a_(a)),["["+n.map((e,t)=>aF(e,s[t],r)).join(", ")+", ..., "+a.map((e,t)=>aF(e,s[l-3+t],r)).join(", ")+"]"]}let e="complex64"===r?a_(t):Array.from(t);return["["+e.map((e,t)=>aF(e,s[t],r)).join(", ")+"]"]}let h=n.slice(1),p=a.slice(1),d=a[0]*o,c=[];if(l>20){for(let n=0;n<3;n++){let a=n*d,i=a+d;c.push(...e(t.slice(a,i),h,r,p,s,!1))}c.push("...");for(let n=l-3;n<l;n++){let a=n*d,i=a+d;c.push(...e(t.slice(a,i),h,r,p,s,n===l-1))}}else for(let n=0;n<l;n++){let a=n*d,i=a+d;c.push(...e(t.slice(a,i),h,r,p,s,n===l-1))}let f=2===u?",":"";c[0]="["+c[0]+f;for(let e=1;e<c.length-1;e++)c[e]=" "+c[e]+f;let m=",\n";for(let e=2;e<u;e++)m+="\n";return c[c.length-1]=" "+c[c.length-1]+"]"+(i?"":m),c}(e,t,n,a,s),l=["Tensor"];return r&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map(e=>"    "+e).join("\n")),l.join("\n")}(t,this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),aL.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),aM().makeVariable(this,e,t,n)}}function aP(){return eY("Tensor",()=>az)}Object.defineProperty(az,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),aP();class aB extends az{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!Q(e.shape,this.shape))throw Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);aM().disposeTensor(this),this.dataId=e.dataId,aM().incRef(this,null)}dispose(){aM().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(aB,Symbol.hasInstance,{value:e=>e instanceof az&&null!=e.assign&&e.assign instanceof Function});var aW={};R(aW,"makeTypesMatch",()=>aH),R(aW,"assertTypesMatch",()=>aq),R(aW,"isTensorInList",()=>aj),R(aW,"getTensorsInContainer",()=>aK),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(d||(d={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(c||(c={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(f||(f={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(m||(m={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(g||(g={}));let aV={float32:m,int32:c,bool:f,complex64:g};function aU(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw Error(`Can not upcast ${e} with ${t}`)}return aV[e][t]}function aG(e){return aU(e,"int32")}function aH(e,t){if(e.dtype===t.dtype)return[e,t];let n=aU(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function aq(e,t){j(e.dtype===t.dtype,()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`)}function aj(e,t){return t.some(t=>t.id===e.id)}function aK(e){let t=[],n=new Set;return function e(t,n,r){if(null!=t){if(t instanceof az){n.push(t);return}if(Array.isArray(t)||"object"==typeof t)for(let a in t){let s=t[a];r.has(s)||(r.add(s),e(s,n,r))}}}(e,t,n),t}function aX(e){return null!=e.kernelName}class aY{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(let e in this.registeredVariables)this.registeredVariables[e].dispose()}}class aZ{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new aY}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let n=e[t],r=await this.initializeBackend(n).success;if(r){await this.setBackend(n);return}}throw Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){let{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{let{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(rM(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;let{success:t,asyncInit:n}=this.initializeBackend(e),r=n?await t:t;if(!r)return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new aA(this.backendInstance),!0}setupRegisteredKernels(){let e=rV(this.backendName);e.forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){let t=rV(e);t.forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){let t=this.registryFactory[e];if(null==t)throw Error(`Cannot initialize backend ${e}, no registration found.`);try{let n=t.factory();if(!n||n instanceof M||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{let t=++this.pendingBackendInitId,r=n.then(n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0)).catch(n=>!(t<this.pendingBackendInitId)&&(this.pendingBackendInit=null,rM(`Initialization of backend ${e} failed`),rM(n.stack||n.message),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return rM(`Initialization of backend ${e} failed`),rM(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){let e=this.getSortedBackends();for(let t=0;t<e.length;t++){let n=e[t],{success:r,asyncInit:a}=this.initializeBackend(n);if(a||r)return{name:n,asyncInit:a}}throw Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){let n=this.state.tensorInfo.get(t),r=n.backend,a=this.readSync(t),s=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,s),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>((n=t())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{let e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return aZ.nextTensorId++}nextVariableId(){return aZ.nextVariableId++}clone(e){let t=aQ.runKernel(t2,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[t],e=>({x:()=>aQ.runKernel(tp,{x:e},{dtype:"float32"})}),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;let r=null!=rB(e,this.backendName);if(!r)throw Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){let r=this.backend.numDataIds(),a=0;n.forEach(e=>{a+="complex64"===e.dtype?3:1});let s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-t-a-s;if(i>0)throw Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n,r,a;let s=[],i=this.isTapeOn(),o=this.state.numBytes,l=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;let u=aX(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(aX(e)){let{kernelName:t,inputs:a,attrs:o}=e;null==this.backendName&&this.backend;let l=rB(t,this.backendName);j(null!=l,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),n=()=>{let e=this.backend.numDataIds();r=l.kernelFunc({inputs:a,attrs:o,backend:this.backend});let n=Array.isArray(r)?r:[r];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,n);let u=n.map(e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e));if(i){let e=this.getTensorsForGradient(t,a,u);s=this.saveTensorsForBackwardMode(e)}return u}}else{let{forwardFunc:t}=e,a=e=>{i&&(s=e.map(e=>this.keep(this.clone(e))))};n=()=>{let e=this.backend.numDataIds();r=this.tidy(()=>t(this.backend,a));let n=Array.isArray(r)?r:[r];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}let{inputs:h,attrs:p}=e,d=aX(e)?null:e.backwardsFunc;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(a=this.profiler.profileKernel(u,h,()=>n()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(a),t=a.outputs):t=n()}),i&&this.addTapeNode(u,h,t,d,s,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-o,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-l,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map(e=>null!=h[e]?h[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:a.timeMs,extraInfo:a.extraInfo}),Array.isArray(r)?t:t[0]}saveTensorsForBackwardMode(e){let t=e.map(e=>this.keep(this.clone(e)));return t}getTensorsForGradient(e,t,n){let r=rW(e);if(null!=r){let e;let a=r.inputsToSave||[],s=r.outputsToSave||[];r.saveAllInputs?(j(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),e=Object.keys(t).map(e=>t[e])):e=a.map(e=>t[e]);let i=n.filter((e,t)=>s[t]);return e.concat(i)}return[]}makeTensor(e,t,n,r){if(null==e)throw Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let a=e;"string"===n&&ey(e[0])&&(a=e.map(e=>a$(e)));let s=r.write(a,t,n),i=new az(t,n,s,this.nextTensorId());if(this.trackTensor(i,r),"string"===n){let e=this.state.tensorInfo.get(s),t=eg(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,r){n=n||"float32";let a={dataId:e,shape:t,dtype:n};return this.makeTensorFromTensorInfo(a,r)}makeTensorFromTensorInfo(e,t){let{dataId:n,shape:r,dtype:a}=e,s=new az(r,a,n,this.nextTensorId());return this.trackTensor(s,t),s}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));let a=new aB(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*em(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof aB||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;let t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){let t=e.size*em(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(let e in this.state.registeredVariables){let t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){let e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;let t=this.state.numBytes,n=this.state.numTensors;for(let r of(this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n,this.state.activeProfile.kernels))r.kernelTimeMs=await r.kernelTimeMs,r.extraInfo=await r.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,a,s){let i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},o=rW(e);null!=o&&(r=o.gradFunc),null!=r&&(i.gradient=e=>r((e=e.map((e,t)=>{if(null==e){let e=n[t],r=eT(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})).length>1?e:e[0],a,s)),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){let t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){let t=aK(e),n=new Set(t.map(e=>e.id));for(let e=0;e<this.state.activeScope.track.length;e++){let t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}let r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==r.id||this.track(e)})}gradients(e,t,n,r=!1){if(j(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);let a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));j(a instanceof az,()=>"The result y returned by f() must be a tensor.");let s=function(e,t,n){let r={},a={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){let s=e[n],i=s.inputs;for(let e in i){let n=i[e],o=!1;for(let e=0;e<t.length;e++)if(r[n.id]){s.outputs.forEach(e=>r[e.id]=!0),o=!0,a[s.id]=!0;break}if(o)break}}let s={};s[n.id]=!0;let i={};for(let t=e.length-1;t>=0;t--){let n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(s[n.outputs[e].id]){for(let e in r)s[r[e].id]=!0,i[n.id]=!0;break}}let o=[];for(let t=0;t<e.length;t++){let n=e[t];if(a[n.id]&&i[n.id]){let e={};for(let t in n.inputs){let a=n.inputs[t];r[a.id]&&(e[t]=a)}let t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,a);if(!r&&0===s.length&&t.length>0)throw Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{let e={};e[a.id]=null==n?function(e){let t=eN(Z(e),"float32");return aQ.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,r){for(let a=t.length-1;a>=0;a--){let s=t[a],i=[];if(s.outputs.forEach(t=>{let n=e[t.id];null!=n?i.push(n):i.push(null)}),null==s.gradient)throw Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);let o=s.gradient(i);for(let t in s.inputs){if(!(t in o))throw Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);let a=n(()=>o[t]());if("float32"!==a.dtype)throw Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);let i=s.inputs[t];if(!Q(a.shape,i.shape))throw Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=a;else{let t=e[i.id];e[i.id]=r(t,a),t.dispose()}}}}(e,s,e=>this.tidy(e),a0);let r=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(let t of e.saved)t.dispose()}),this.state.activeTape=null),{value:a,grads:r}})}customGrad(e){return j(ev(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;j(t.every(e=>e instanceof az),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");let r={};return t.forEach((e,t)=>{r[t]=e}),this.runKernelFunc({forwardFunc:(r,a)=>(j((n=e(...[...t,a])).value instanceof az,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),j(ev(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),backwardsFunc:(e,r)=>{let a=n.gradFunc(e,r),s=Array.isArray(a)?a:[a];j(s.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),j(s.every(e=>e instanceof az),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");let i={};return s.forEach((e,t)=>{i[t]=()=>e}),i},inputs:r})}}readSync(e){let t=this.state.tensorInfo.get(e);return t.backend.readSync(e)}read(e){let t=this.state.tensorInfo.get(e);return t.backend.read(e)}readToGPU(e,t){let n=this.state.tensorInfo.get(e);return n.backend.readToGPU(e,t)}async time(e){let t=aT(),n=await this.backend.time(e);return n.wallMs=aT()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){for(let e in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new aY,this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function aJ(){let e=eX();if(null==e._tfengine){let t=new eD(e);e._tfengine=new aZ(t)}return eM=e._tfengine.ENV,aM=()=>e._tfengine,e._tfengine}aZ.nextTensorId=0,aZ.nextVariableId=0;let aQ=aJ();function a0(e,t){return aQ.runKernel(e1,{a:e,b:t})}var a1={};function a2(e){t=e}function a3(e){if(void 0!==t)return t;if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;let t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){let t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function a4(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}R(a1,"mockIsMobile",()=>a2),R(a1,"isMobile",()=>a3),R(a1,"isBrowser",()=>a4);let a6=eM;function a5(e,t){let n=e;if(ef(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];let r=[];for(;Array.isArray(n)||ef(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&eM.getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function e(t,n,r){if(r=r||[],!Array.isArray(t)&&!ef(t)){j(0===n.length,()=>`Element arr[${r.join("][")}] is a primitive, but should be an array/TypedArray of ${n[0]} elements`);return}j(n.length>0,()=>`Element arr[${r.join("][")}] should be a primitive, but is an array of ${t.length} elements`),j(t.length===n[0],()=>`Element arr[${r.join("][")}] should have ${n[0]} elements, but has ${t.length} elements`);let a=n.slice(1);for(let n=0;n<t.length;++n)e(t[n],a,r.concat(n))}(e,r,[]),r}function a8(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function a7(e,t,n,r="numeric"){if(e instanceof az)return a8(r,e.dtype,t,n),e;let a=ek(e);if("string"!==a&&["bool","int32","float32"].indexOf(r)>=0&&(a=r),a8(r,a,t,n),null==e||!ef(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){let r=null==e?"null":e.constructor.name;throw Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}let s=a5(e,a);ef(e)||Array.isArray(e)||(e=[e]);let i="string"!==a?aN(e,a):Y(e,[],!0);return aQ.makeTensor(i,s,a)}function a9(e,t,n,r="numeric"){if(!Array.isArray(e))throw Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,a)=>a7(e,`${t}[${a}]`,n,r))}a6.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),a6.registerFlag("IS_BROWSER",()=>a4()),a6.registerFlag("IS_NODE",()=>void 0!==eL&&void 0!==eL.versions&&void 0!==eL.versions.node),a6.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),a6.registerFlag("PROD",()=>!1),a6.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>a6.getBool("DEBUG")),a6.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),a6.registerFlag("IS_TEST",()=>!1),a6.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0),a6.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),a6.registerFlag("ENGINE_COMPILE_ONLY",()=>!1),a6.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),a6.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);let se="__op";function st(e){let t=Object.keys(e);if(1!==t.length)throw Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0],r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=se;let a=(...e)=>{aQ.startScope(n);try{let t=r(...e);return eR(t)&&console.error("Cannot return a Promise inside of tidy."),aQ.endScope(t),t}catch(e){throw aQ.endScope(null),e}};return Object.defineProperty(a,"name",{value:n,configurable:!0}),a}let sn=st({complex_:function(e,t){let n=a7(e,"real","complex"),r=a7(t,"imag","complex");return K(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`),aQ.runKernel(tf,{real:n,imag:r})}});function sr(e,t,n,r){if(null==r&&(r=ek(e)),"complex64"===r)throw Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!ef(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){e$(t);let e=Z(t),r=Z(n);j(e===r,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`);for(let e=0;e<n.length;++e){let r=n[e],a=e!==n.length-1||r!==Z(t.slice(e));j(n[e]===t[e]||!a,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return ef(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?aN(e,r):Y(e,[],!0),aQ.makeTensor(e,t,r)}function sa(e,t,n){let r=a5(e,n);return sr(e,t,r,n)}"use strict";"use strict";let ss={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};y=function(e){for(var t,n=e.length,r=n%3,a=[],s=0,i=n-r;s<i;s+=16383)a.push(function(e,t,n){for(var r,a=[],s=t;s<n;s+=3)a.push(si[(r=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]))>>18&63]+si[r>>12&63]+si[r>>6&63]+si[63&r]);return a.join("")}(e,s,s+16383>i?i:s+16383));return 1===r?a.push(si[(t=e[n-1])>>2]+si[t<<4&63]+"=="):2===r&&a.push(si[(t=(e[n-2]<<8)+e[n-1])>>10]+si[t>>4&63]+si[t<<2&63]+"="),a.join("")};for(var si=[],so=[],sl="undefined"!=typeof Uint8Array?Uint8Array:Array,su="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",sh=0,sp=su.length;sh<sp;++sh)si[sh]=su[sh],so[su.charCodeAt(sh)]=sh;so["-".charCodeAt(0)]=62,so["_".charCodeAt(0)]=63,b=function(e,t,n,r,a){var s,i,o=8*a-r-1,l=(1<<o)-1,u=l>>1,h=-7,p=n?a-1:0,d=n?-1:1,c=e[t+p];for(p+=d,s=c&(1<<-h)-1,c>>=-h,h+=o;h>0;s=256*s+e[t+p],p+=d,h-=8);for(i=s&(1<<-h)-1,s>>=-h,h+=r;h>0;i=256*i+e[t+p],p+=d,h-=8);if(0===s)s=1-u;else{if(s===l)return i?NaN:(c?-1:1)*(1/0);i+=Math.pow(2,r),s-=u}return(c?-1:1)*i*Math.pow(2,s-r)},x=function(e,t,n,r,a,s){var i,o,l,u=8*s-a-1,h=(1<<u)-1,p=h>>1,d=23===a?5960464477539062e-23:0,c=r?0:s-1,f=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(isNaN(t=Math.abs(t))||t===1/0?(o=isNaN(t)?1:0,i=h):(i=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-i))<1&&(i--,l*=2),i+p>=1?t+=d/l:t+=d*Math.pow(2,1-p),t*l>=2&&(i++,l/=2),i+p>=h?(o=0,i=h):i+p>=1?(o=(t*l-1)*Math.pow(2,a),i+=p):(o=t*Math.pow(2,p-1)*Math.pow(2,a),i=0));a>=8;e[n+c]=255&o,c+=f,o/=256,a-=8);for(i=i<<a|o,u+=a;u>0;e[n+c]=255&i,c+=f,i/=256,u-=8);e[n+c-f]|=128*m};let sd="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;function sc(e){if(e>2147483647)throw RangeError('The value "'+e+'" is invalid for option "size"');let t=new Uint8Array(e);return Object.setPrototypeOf(t,sf.prototype),t}function sf(e,t,n){if("number"==typeof e){if("string"==typeof t)throw TypeError('The "string" argument must be of type string. Received type number');return sy(e)}return sm(e,t,n)}function sm(e,t,n){if("string"==typeof e)return function(e,t){if(("string"!=typeof t||""===t)&&(t="utf8"),!sf.isEncoding(t))throw TypeError("Unknown encoding: "+t);let n=0|sv(e,t),r=sc(n),a=r.write(e,t);return a!==n&&(r=r.slice(0,a)),r}(e,t);if(ArrayBuffer.isView(e))return function(e){if(sG(e,Uint8Array)){let t=new Uint8Array(e);return sx(t.buffer,t.byteOffset,t.byteLength)}return sb(e)}(e);if(null==e)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(sG(e,ArrayBuffer)||e&&sG(e.buffer,ArrayBuffer)||"undefined"!=typeof SharedArrayBuffer&&(sG(e,SharedArrayBuffer)||e&&sG(e.buffer,SharedArrayBuffer)))return sx(e,t,n);if("number"==typeof e)throw TypeError('The "value" argument must not be of type number. Received type number');let r=e.valueOf&&e.valueOf();if(null!=r&&r!==e)return sf.from(r,t,n);let a=function(e){var t;if(sf.isBuffer(e)){let t=0|sk(e.length),n=sc(t);return 0===n.length||e.copy(n,0,0,t),n}return void 0!==e.length?"number"!=typeof e.length||(t=e.length)!=t?sc(0):sb(e):"Buffer"===e.type&&Array.isArray(e.data)?sb(e.data):void 0}(e);if(a)return a;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return sf.from(e[Symbol.toPrimitive]("string"),t,n);throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function sg(e){if("number"!=typeof e)throw TypeError('"size" argument must be of type number');if(e<0)throw RangeError('The value "'+e+'" is invalid for option "size"')}function sy(e){return sg(e),sc(e<0?0:0|sk(e))}function sb(e){let t=e.length<0?0:0|sk(e.length),n=sc(t);for(let r=0;r<t;r+=1)n[r]=255&e[r];return n}function sx(e,t,n){let r;if(t<0||e.byteLength<t)throw RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw RangeError('"length" is outside of buffer bounds');return Object.setPrototypeOf(r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),sf.prototype),r}function sk(e){if(e>=2147483647)throw RangeError("Attempt to allocate Buffer larger than maximum size: 0x7fffffff bytes");return 0|e}function sv(e,t){if(sf.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||sG(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);let n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;let a=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return sW(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return sV(e).length;default:if(a)return r?-1:sW(e).length;t=(""+t).toLowerCase(),a=!0}}function sw(e,t,n){let r=!1;if((void 0===t||t<0)&&(t=0),t>this.length||((void 0===n||n>this.length)&&(n=this.length),n<=0||(n>>>=0)<=(t>>>=0)))return"";for(e||(e="utf8");;)switch(e){case"hex":return function(e,t,n){let r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);let a="";for(let r=t;r<n;++r)a+=sH[e[r]];return a}(this,t,n);case"utf8":case"utf-8":return sT(this,t,n);case"ascii":return function(e,t,n){let r="";n=Math.min(e.length,n);for(let a=t;a<n;++a)r+=String.fromCharCode(127&e[a]);return r}(this,t,n);case"latin1":case"binary":return function(e,t,n){let r="";n=Math.min(e.length,n);for(let a=t;a<n;++a)r+=String.fromCharCode(e[a]);return r}(this,t,n);case"base64":var a,s;return a=t,s=n,0===a&&s===this.length?y(this):y(this.slice(a,s));case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return function(e,t,n){let r=e.slice(t,n),a="";for(let e=0;e<r.length-1;e+=2)a+=String.fromCharCode(r[e]+256*r[e+1]);return a}(this,t,n);default:if(r)throw TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function sI(e,t,n){let r=e[t];e[t]=e[n],e[n]=r}function sS(e,t,n,r,a){var s;if(0===e.length)return -1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),(s=n=+n)!=s&&(n=a?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(a)return -1;n=e.length-1}else if(n<0){if(!a)return -1;n=0}if("string"==typeof t&&(t=sf.from(t,r)),sf.isBuffer(t))return 0===t.length?-1:sN(e,t,n,r,a);if("number"==typeof t)return(t&=255,"function"==typeof Uint8Array.prototype.indexOf)?a?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):sN(e,[t],n,r,a);throw TypeError("val must be string, number or Buffer")}function sN(e,t,n,r,a){let s,i=1,o=e.length,l=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return -1;i=2,o/=2,l/=2,n/=2}function u(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(a){let r=-1;for(s=n;s<o;s++)if(u(e,s)===u(t,-1===r?0:s-r)){if(-1===r&&(r=s),s-r+1===l)return r*i}else -1!==r&&(s-=s-r),r=-1}else for(n+l>o&&(n=o-l),s=n;s>=0;s--){let n=!0;for(let r=0;r<l;r++)if(u(e,s+r)!==u(t,r)){n=!1;break}if(n)return s}return -1}function sT(e,t,n){n=Math.min(e.length,n);let r=[],a=t;for(;a<n;){let t=e[a],s=null,i=t>239?4:t>223?3:t>191?2:1;if(a+i<=n){let n,r,o,l;switch(i){case 1:t<128&&(s=t);break;case 2:(192&(n=e[a+1]))==128&&(l=(31&t)<<6|63&n)>127&&(s=l);break;case 3:n=e[a+1],r=e[a+2],(192&n)==128&&(192&r)==128&&(l=(15&t)<<12|(63&n)<<6|63&r)>2047&&(l<55296||l>57343)&&(s=l);break;case 4:n=e[a+1],r=e[a+2],o=e[a+3],(192&n)==128&&(192&r)==128&&(192&o)==128&&(l=(15&t)<<18|(63&n)<<12|(63&r)<<6|63&o)>65535&&l<1114112&&(s=l)}}null===s?(s=65533,i=1):s>65535&&(s-=65536,r.push(s>>>10&1023|55296),s=56320|1023&s),r.push(s),a+=i}return function(e){let t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);let n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}function sC(e,t,n){if(e%1!=0||e<0)throw RangeError("offset is not uint");if(e+t>n)throw RangeError("Trying to access beyond buffer length")}function s$(e,t,n,r,a,s){if(!sf.isBuffer(e))throw TypeError('"buffer" argument must be a Buffer instance');if(t>a||t<s)throw RangeError('"value" argument is out of bounds');if(n+r>e.length)throw RangeError("Index out of range")}function sE(e,t,n,r,a){sL(t,r,a,e,n,7);let s=Number(t&BigInt(4294967295));e[n++]=s,s>>=8,e[n++]=s,s>>=8,e[n++]=s,s>>=8,e[n++]=s;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,i>>=8,e[n++]=i,n}function sA(e,t,n,r,a){sL(t,r,a,e,n,7);let s=Number(t&BigInt(4294967295));e[n+7]=s,s>>=8,e[n+6]=s,s>>=8,e[n+5]=s,s>>=8,e[n+4]=s;let i=Number(t>>BigInt(32)&BigInt(4294967295));return e[n+3]=i,i>>=8,e[n+2]=i,i>>=8,e[n+1]=i,i>>=8,e[n]=i,n+8}function sR(e,t,n,r,a,s){if(n+r>e.length||n<0)throw RangeError("Index out of range")}function sF(e,t,n,r,a){return t=+t,n>>>=0,a||sR(e,t,n,4,34028234663852886e22,-34028234663852886e22),x(e,t,n,r,23,4),n+4}function sD(e,t,n,r,a){return t=+t,n>>>=0,a||sR(e,t,n,8,17976931348623157e292,-17976931348623157e292),x(e,t,n,r,52,8),n+8}sf.TYPED_ARRAY_SUPPORT=function(){try{let e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),sf.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(sf.prototype,"parent",{enumerable:!0,get:function(){if(sf.isBuffer(this))return this.buffer}}),Object.defineProperty(sf.prototype,"offset",{enumerable:!0,get:function(){if(sf.isBuffer(this))return this.byteOffset}}),sf.poolSize=8192,sf.from=function(e,t,n){return sm(e,t,n)},Object.setPrototypeOf(sf.prototype,Uint8Array.prototype),Object.setPrototypeOf(sf,Uint8Array),sf.alloc=function(e,t,n){return(sg(e),e<=0)?sc(e):void 0!==t?"string"==typeof n?sc(e).fill(t,n):sc(e).fill(t):sc(e)},sf.allocUnsafe=function(e){return sy(e)},sf.allocUnsafeSlow=function(e){return sy(e)},sf.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==sf.prototype},sf.compare=function(e,t){if(sG(e,Uint8Array)&&(e=sf.from(e,e.offset,e.byteLength)),sG(t,Uint8Array)&&(t=sf.from(t,t.offset,t.byteLength)),!sf.isBuffer(e)||!sf.isBuffer(t))throw TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let n=e.length,r=t.length;for(let a=0,s=Math.min(n,r);a<s;++a)if(e[a]!==t[a]){n=e[a],r=t[a];break}return n<r?-1:r<n?1:0},sf.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},sf.concat=function(e,t){let n;if(!Array.isArray(e))throw TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return sf.alloc(0);if(void 0===t)for(n=0,t=0;n<e.length;++n)t+=e[n].length;let r=sf.allocUnsafe(t),a=0;for(n=0;n<e.length;++n){let t=e[n];if(sG(t,Uint8Array))a+t.length>r.length?(sf.isBuffer(t)||(t=sf.from(t)),t.copy(r,a)):Uint8Array.prototype.set.call(r,t,a);else if(sf.isBuffer(t))t.copy(r,a);else throw TypeError('"list" argument must be an Array of Buffers');a+=t.length}return r},sf.byteLength=sv,sf.prototype._isBuffer=!0,sf.prototype.swap16=function(){let e=this.length;if(e%2!=0)throw RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)sI(this,t,t+1);return this},sf.prototype.swap32=function(){let e=this.length;if(e%4!=0)throw RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)sI(this,t,t+3),sI(this,t+1,t+2);return this},sf.prototype.swap64=function(){let e=this.length;if(e%8!=0)throw RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)sI(this,t,t+7),sI(this,t+1,t+6),sI(this,t+2,t+5),sI(this,t+3,t+4);return this},sf.prototype.toString=function(){let e=this.length;return 0===e?"":0==arguments.length?sT(this,0,e):sw.apply(this,arguments)},sf.prototype.toLocaleString=sf.prototype.toString,sf.prototype.equals=function(e){if(!sf.isBuffer(e))throw TypeError("Argument must be a Buffer");return this===e||0===sf.compare(this,e)},sf.prototype.inspect=function(){let e="";return e=this.toString("hex",0,50).replace(/(.{2})/g,"$1 ").trim(),this.length>50&&(e+=" ... "),"<Buffer "+e+">"},sd&&(sf.prototype[sd]=sf.prototype.inspect),sf.prototype.compare=function(e,t,n,r,a){if(sG(e,Uint8Array)&&(e=sf.from(e,e.offset,e.byteLength)),!sf.isBuffer(e))throw TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===a&&(a=this.length),t<0||n>e.length||r<0||a>this.length)throw RangeError("out of range index");if(r>=a&&t>=n)return 0;if(r>=a)return -1;if(t>=n)return 1;if(t>>>=0,n>>>=0,r>>>=0,a>>>=0,this===e)return 0;let s=a-r,i=n-t,o=Math.min(s,i),l=this.slice(r,a),u=e.slice(t,n);for(let e=0;e<o;++e)if(l[e]!==u[e]){s=l[e],i=u[e];break}return s<i?-1:i<s?1:0},sf.prototype.includes=function(e,t,n){return -1!==this.indexOf(e,t,n)},sf.prototype.indexOf=function(e,t,n){return sS(this,e,t,n,!0)},sf.prototype.lastIndexOf=function(e,t,n){return sS(this,e,t,n,!1)},sf.prototype.write=function(e,t,n,r){var a,s,i,o,l,u,h,p;if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else if(isFinite(t))t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0);else throw Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");let d=this.length-t;if((void 0===n||n>d)&&(n=d),e.length>0&&(n<0||t<0)||t>this.length)throw RangeError("Attempt to write outside buffer bounds");r||(r="utf8");let c=!1;for(;;)switch(r){case"hex":return function(e,t,n,r){let a;n=Number(n)||0;let s=e.length-n;r?(r=Number(r))>s&&(r=s):r=s;let i=t.length;for(r>i/2&&(r=i/2),a=0;a<r;++a){let r=parseInt(t.substr(2*a,2),16);if(r!=r)break;e[n+a]=r}return a}(this,e,t,n);case"utf8":case"utf-8":return a=t,s=n,sU(sW(e,this.length-a),this,a,s);case"ascii":case"latin1":case"binary":return i=t,o=n,sU(function(e){let t=[];for(let n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(e),this,i,o);case"base64":return l=t,u=n,sU(sV(e),this,l,u);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return h=t,p=n,sU(function(e,t){let n,r;let a=[];for(let s=0;s<e.length&&!((t-=2)<0);++s)r=(n=e.charCodeAt(s))>>8,a.push(n%256),a.push(r);return a}(e,this.length-h),this,h,p);default:if(c)throw TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),c=!0}},sf.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},sf.prototype.slice=function(e,t){let n=this.length;e=~~e,t=void 0===t?n:~~t,e<0?(e+=n)<0&&(e=0):e>n&&(e=n),t<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);let r=this.subarray(e,t);return Object.setPrototypeOf(r,sf.prototype),r},sf.prototype.readUintLE=sf.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||sC(e,t,this.length);let r=this[e],a=1,s=0;for(;++s<t&&(a*=256);)r+=this[e+s]*a;return r},sf.prototype.readUintBE=sf.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||sC(e,t,this.length);let r=this[e+--t],a=1;for(;t>0&&(a*=256);)r+=this[e+--t]*a;return r},sf.prototype.readUint8=sf.prototype.readUInt8=function(e,t){return e>>>=0,t||sC(e,1,this.length),this[e]},sf.prototype.readUint16LE=sf.prototype.readUInt16LE=function(e,t){return e>>>=0,t||sC(e,2,this.length),this[e]|this[e+1]<<8},sf.prototype.readUint16BE=sf.prototype.readUInt16BE=function(e,t){return e>>>=0,t||sC(e,2,this.length),this[e]<<8|this[e+1]},sf.prototype.readUint32LE=sf.prototype.readUInt32LE=function(e,t){return e>>>=0,t||sC(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},sf.prototype.readUint32BE=sf.prototype.readUInt32BE=function(e,t){return e>>>=0,t||sC(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},sf.prototype.readBigUInt64LE=sq(function(e){sz(e>>>=0,"offset");let t=this[e],n=this[e+7];(void 0===t||void 0===n)&&sP(e,this.length-8);let r=t+256*this[++e]+65536*this[++e]+16777216*this[++e],a=this[++e]+256*this[++e]+65536*this[++e]+16777216*n;return BigInt(r)+(BigInt(a)<<BigInt(32))}),sf.prototype.readBigUInt64BE=sq(function(e){sz(e>>>=0,"offset");let t=this[e],n=this[e+7];(void 0===t||void 0===n)&&sP(e,this.length-8);let r=16777216*t+65536*this[++e]+256*this[++e]+this[++e],a=16777216*this[++e]+65536*this[++e]+256*this[++e]+n;return(BigInt(r)<<BigInt(32))+BigInt(a)}),sf.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||sC(e,t,this.length);let r=this[e],a=1,s=0;for(;++s<t&&(a*=256);)r+=this[e+s]*a;return r>=(a*=128)&&(r-=Math.pow(2,8*t)),r},sf.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||sC(e,t,this.length);let r=t,a=1,s=this[e+--r];for(;r>0&&(a*=256);)s+=this[e+--r]*a;return s>=(a*=128)&&(s-=Math.pow(2,8*t)),s},sf.prototype.readInt8=function(e,t){return(e>>>=0,t||sC(e,1,this.length),128&this[e])?-((255-this[e]+1)*1):this[e]},sf.prototype.readInt16LE=function(e,t){e>>>=0,t||sC(e,2,this.length);let n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},sf.prototype.readInt16BE=function(e,t){e>>>=0,t||sC(e,2,this.length);let n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},sf.prototype.readInt32LE=function(e,t){return e>>>=0,t||sC(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},sf.prototype.readInt32BE=function(e,t){return e>>>=0,t||sC(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},sf.prototype.readBigInt64LE=sq(function(e){sz(e>>>=0,"offset");let t=this[e],n=this[e+7];(void 0===t||void 0===n)&&sP(e,this.length-8);let r=this[e+4]+256*this[e+5]+65536*this[e+6]+(n<<24);return(BigInt(r)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+16777216*this[++e])}),sf.prototype.readBigInt64BE=sq(function(e){sz(e>>>=0,"offset");let t=this[e],n=this[e+7];(void 0===t||void 0===n)&&sP(e,this.length-8);let r=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(r)<<BigInt(32))+BigInt(16777216*this[++e]+65536*this[++e]+256*this[++e]+n)}),sf.prototype.readFloatLE=function(e,t){return e>>>=0,t||sC(e,4,this.length),b(this,e,!0,23,4)},sf.prototype.readFloatBE=function(e,t){return e>>>=0,t||sC(e,4,this.length),b(this,e,!1,23,4)},sf.prototype.readDoubleLE=function(e,t){return e>>>=0,t||sC(e,8,this.length),b(this,e,!0,52,8)},sf.prototype.readDoubleBE=function(e,t){return e>>>=0,t||sC(e,8,this.length),b(this,e,!1,52,8)},sf.prototype.writeUintLE=sf.prototype.writeUIntLE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){let r=Math.pow(2,8*n)-1;s$(this,e,t,n,r,0)}let a=1,s=0;for(this[t]=255&e;++s<n&&(a*=256);)this[t+s]=e/a&255;return t+n},sf.prototype.writeUintBE=sf.prototype.writeUIntBE=function(e,t,n,r){if(e=+e,t>>>=0,n>>>=0,!r){let r=Math.pow(2,8*n)-1;s$(this,e,t,n,r,0)}let a=n-1,s=1;for(this[t+a]=255&e;--a>=0&&(s*=256);)this[t+a]=e/s&255;return t+n},sf.prototype.writeUint8=sf.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||s$(this,e,t,1,255,0),this[t]=255&e,t+1},sf.prototype.writeUint16LE=sf.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||s$(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},sf.prototype.writeUint16BE=sf.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||s$(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},sf.prototype.writeUint32LE=sf.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||s$(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},sf.prototype.writeUint32BE=sf.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||s$(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},sf.prototype.writeBigUInt64LE=sq(function(e,t=0){return sE(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),sf.prototype.writeBigUInt64BE=sq(function(e,t=0){return sA(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),sf.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){let r=Math.pow(2,8*n-1);s$(this,e,t,n,r-1,-r)}let a=0,s=1,i=0;for(this[t]=255&e;++a<n&&(s*=256);)e<0&&0===i&&0!==this[t+a-1]&&(i=1),this[t+a]=(e/s>>0)-i&255;return t+n},sf.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){let r=Math.pow(2,8*n-1);s$(this,e,t,n,r-1,-r)}let a=n-1,s=1,i=0;for(this[t+a]=255&e;--a>=0&&(s*=256);)e<0&&0===i&&0!==this[t+a+1]&&(i=1),this[t+a]=(e/s>>0)-i&255;return t+n},sf.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||s$(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},sf.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||s$(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},sf.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||s$(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},sf.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||s$(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},sf.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||s$(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},sf.prototype.writeBigInt64LE=sq(function(e,t=0){return sE(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),sf.prototype.writeBigInt64BE=sq(function(e,t=0){return sA(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),sf.prototype.writeFloatLE=function(e,t,n){return sF(this,e,t,!0,n)},sf.prototype.writeFloatBE=function(e,t,n){return sF(this,e,t,!1,n)},sf.prototype.writeDoubleLE=function(e,t,n){return sD(this,e,t,!0,n)},sf.prototype.writeDoubleBE=function(e,t,n){return sD(this,e,t,!1,n)},sf.prototype.copy=function(e,t,n,r){if(!sf.isBuffer(e))throw TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n||0===e.length||0===this.length)return 0;if(t<0)throw RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw RangeError("Index out of range");if(r<0)throw RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);let a=r-n;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,n,r):Uint8Array.prototype.set.call(e,this.subarray(n,r),t),a},sf.prototype.fill=function(e,t,n,r){let a;if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw TypeError("encoding must be a string");if("string"==typeof r&&!sf.isEncoding(r))throw TypeError("Unknown encoding: "+r);if(1===e.length){let t=e.charCodeAt(0);("utf8"===r&&t<128||"latin1"===r)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw RangeError("Out of range index");if(n<=t)return this;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(a=t;a<n;++a)this[a]=e;else{let s=sf.isBuffer(e)?e:sf.from(e,r),i=s.length;if(0===i)throw TypeError('The value "'+e+'" is invalid for argument "value"');for(a=0;a<n-t;++a)this[a+t]=s[a%i]}return this};let s_={};function sO(e,t,n){s_[e]=class extends n{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function sM(e){let t="",n=e.length,r="-"===e[0]?1:0;for(;n>=r+4;n-=3)t=`_${e.slice(n-3,n)}${t}`;return`${e.slice(0,n)}${t}`}function sL(e,t,n,r,a,s){if(e>n||e<t){let r;let a="bigint"==typeof t?"n":"";throw r=s>3?0===t||t===BigInt(0)?`>= 0${a} and < 2${a} ** ${(s+1)*8}${a}`:`>= -(2${a} ** ${(s+1)*8-1}${a}) and < 2 ** ${(s+1)*8-1}${a}`:`>= ${t}${a} and <= ${n}${a}`,new s_.ERR_OUT_OF_RANGE("value",r,e)}sz(a,"offset"),(void 0===r[a]||void 0===r[a+s])&&sP(a,r.length-(s+1))}function sz(e,t){if("number"!=typeof e)throw new s_.ERR_INVALID_ARG_TYPE(t,"number",e)}function sP(e,t,n){if(Math.floor(e)!==e)throw sz(e,n),new s_.ERR_OUT_OF_RANGE(n||"offset","an integer",e);if(t<0)throw new s_.ERR_BUFFER_OUT_OF_BOUNDS;throw new s_.ERR_OUT_OF_RANGE(n||"offset",`>= ${n?1:0} and <= ${t}`,e)}sO("ERR_BUFFER_OUT_OF_BOUNDS",function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),sO("ERR_INVALID_ARG_TYPE",function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`},TypeError),sO("ERR_OUT_OF_RANGE",function(e,t,n){let r=`The value of "${e}" is out of range.`,a=n;return Number.isInteger(n)&&Math.abs(n)>4294967296?a=sM(String(n)):"bigint"==typeof n&&(a=String(n),(n>BigInt(2)**BigInt(32)||n<-(BigInt(2)**BigInt(32)))&&(a=sM(a)),a+="n"),r+=` It must be ${t}. Received ${a}`},RangeError);let sB=/[^+/0-9A-Za-z-_]/g;function sW(e,t){let n;t=t||1/0;let r=e.length,a=null,s=[];for(let i=0;i<r;++i){if((n=e.charCodeAt(i))>55295&&n<57344){if(!a){if(n>56319||i+1===r){(t-=3)>-1&&s.push(239,191,189);continue}a=n;continue}if(n<56320){(t-=3)>-1&&s.push(239,191,189),a=n;continue}n=(a-55296<<10|n-56320)+65536}else a&&(t-=3)>-1&&s.push(239,191,189);if(a=null,n<128){if((t-=1)<0)break;s.push(n)}else if(n<2048){if((t-=2)<0)break;s.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;s.push(n>>12|224,n>>6&63|128,63&n|128)}else if(n<1114112){if((t-=4)<0)break;s.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}else throw Error("Invalid code point")}return s}function sV(e){return function(e){var t,n,r=function(e){var t=e.length;if(t%4>0)throw Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");-1===n&&(n=t);var r=n===t?0:4-n%4;return[n,r]}(e),a=r[0],s=r[1],i=new sl((a+s)*3/4-s),o=0,l=s>0?a-4:a;for(n=0;n<l;n+=4)t=so[e.charCodeAt(n)]<<18|so[e.charCodeAt(n+1)]<<12|so[e.charCodeAt(n+2)]<<6|so[e.charCodeAt(n+3)],i[o++]=t>>16&255,i[o++]=t>>8&255,i[o++]=255&t;return 2===s&&(t=so[e.charCodeAt(n)]<<2|so[e.charCodeAt(n+1)]>>4,i[o++]=255&t),1===s&&(t=so[e.charCodeAt(n)]<<10|so[e.charCodeAt(n+1)]<<4|so[e.charCodeAt(n+2)]>>2,i[o++]=t>>8&255,i[o++]=255&t),i}(function(e){if((e=(e=e.split("=")[0]).trim().replace(sB,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function sU(e,t,n,r){let a;for(a=0;a<r&&!(a+n>=t.length)&&!(a>=e.length);++a)t[a+n]=e[a];return a}function sG(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}let sH=function(){let e="0123456789abcdef",t=Array(256);for(let n=0;n<16;++n){let r=16*n;for(let a=0;a<16;++a)t[r+a]=e[n]+e[a]}return t}();function sq(e){return"undefined"==typeof BigInt?sj:e}function sj(){throw Error("BigInt not supported")}async function sK(e,t){let n=[],r=[],a=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let s=0;s<a.length;++s){let i=a[s],o=Array.isArray(e)?e[s].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);let l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){let e=new Promise(async e=>{let t=await o.bytes(),n=t.reduce((e,t)=>e+t.length,0)+4*t.length,r=new Uint8Array(n),a=0;for(let e=0;e<t.length;e++){let n=t[e],s=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(s,a),a+=4,r.set(n,a),a+=n.length}e(r)});r.push(e)}else r.push(o.data());null!=t&&(l.group=t),n.push(l)}let s=await Promise.all(r);return{data:function(e){if(null===e)throw Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0,n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)});let r=new Uint8Array(t),a=0;return n.forEach(e=>{r.set(new Uint8Array(e.buffer),a),a+=e.byteLength}),r.buffer}(s),specs:n}}function sX(e,t){let n;let r={},a=0;for(let s of t){let t;let i=s.name,o=s.dtype,l=s.shape,u=Z(l);if("quantization"in s){let r=s.quantization;if("uint8"===r.dtype||"uint16"===r.dtype){if(!("min"in r&&"scale"in r))throw Error(`Weight ${s.name} with quantization ${r.dtype} doesn't have corresponding metadata min and scale.`)}else if("float16"===r.dtype){if("float32"!==o)throw Error(`Weight ${s.name} is quantized with ${r.dtype} which only supports weights of type float32 not ${o}.`)}else throw Error(`Weight ${s.name} has unknown quantization dtype ${r.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);let l=ss[r.dtype],h=e.slice(a,a+u*l),p="uint8"===r.dtype?new Uint8Array(h):new Uint16Array(h);if("float32"===o){if("uint8"===r.dtype||"uint16"===r.dtype){t=new Float32Array(p.length);for(let e=0;e<p.length;e++){let n=p[e];t[e]=n*r.scale+r.min}}else if("float16"===r.dtype)void 0===n&&(n=function(){let e=function(){let e=e=>{let t=e<<13,n=0;for(;(8388608&t)==0;)n-=8388608,t<<=1;return(t&=-8388609)|(n+=947912704)},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){let e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){let e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{let a=new ArrayBuffer(4*r.length),s=new Uint32Array(a);for(let a=0;a<r.length;a++){let i=r[a],o=e[n[i>>10]+(1023&i)]+t[i>>10];s[a]=o}return new Float32Array(a)}}()),t=n(p);else throw Error(`Unsupported quantization type ${r.dtype} for weight type float32.`)}else if("int32"===o){if("uint8"!==r.dtype&&"uint16"!==r.dtype)throw Error(`Unsupported quantization type ${r.dtype} for weight type int32.`);t=new Int32Array(p.length);for(let e=0;e<p.length;e++){let n=p[e];t[e]=Math.round(n*r.scale+r.min)}}else throw Error(`Unsupported dtype in weight '${i}': ${o}`);a+=u*l}else if("string"===o){let n=Z(s.shape);t=[];for(let r=0;r<n;r++){let n=new Uint32Array(e.slice(a,a+4))[0];a+=4;let r=new Uint8Array(e.slice(a,a+n));t.push(r),a+=n}}else{let n=ss[o],s=e.slice(a,a+u*n);if("float32"===o)t=new Float32Array(s);else if("int32"===o)t=new Int32Array(s);else if("bool"===o)t=new Uint8Array(s);else if("complex64"===o){t=new Float32Array(s);let e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<e.length;r++)e[r]=t[2*r],n[r]=t[2*r+1];let a=sa(e,l,"float32"),o=sa(n,l,"float32");r[i]=sn(a,o),a.dispose(),o.dispose()}else throw Error(`Unsupported dtype in weight '${i}': ${o}`);a+=u*n}"complex64"!==o&&(r[i]=sa(t,l,o))}return r}let sY="undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa;function sZ(e){return sY?sf.byteLength(e):new Blob([e]).size}function sJ(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});let n=new Uint8Array(t),r=0;return e.forEach(e=>{n.set(new Uint8Array(e),r),r+=e.byteLength}),n.buffer}function sQ(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);let t=e.split("/");return t[t.length-1]}function s0(e,t){let n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function s1(e,t,n){let r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),r}async function s2(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),s1(e,n,r)}function s3(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:sZ(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:sZ(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function s4(e){let t=[];for(let n of e)t.push(...n.weights);return t}class s6{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==s6.instance&&(s6.instance=new s6),s6.instance}static registerSaveRouter(e){s6.getInstance().saveRouters.push(e)}static registerLoadRouter(e){s6.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return s6.getHandlers(e,"save")}static getLoadHandlers(e,t){return s6.getHandlers(e,"load",t)}static getHandlers(e,t,n){let r=[],a="load"===t?s6.getInstance().loadRouters:s6.getInstance().saveRouters;return a.forEach(t=>{let a=t(e,n);null!==a&&r.push(a)}),r}}let s5=e=>s6.registerSaveRouter(e),s8=e=>s6.registerLoadRouter(e),s7=e=>s6.getSaveHandlers(e),s9=(e,t)=>s6.getLoadHandlers(e,t),ie="tensorflowjs",it="models_store",ir="model_info_store";function ia(){if(!eM.getBool("IS_BROWSER"))throw Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");let e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw Error("The current browser does not appear to support IndexedDB.");return t}function is(e){let t=e.result;t.createObjectStore(it,{keyPath:"modelPath"}),t.createObjectStore(ir,{keyPath:"modelPath"})}class ii{constructor(e){if(this.indexedDB=ia(),null==e||!e)throw Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{let r=this.indexedDB.open(ie,1);r.onupgradeneeded=()=>is(r),r.onsuccess=()=>{let a=r.result;if(null==t){let t=a.transaction(it,"readonly"),r=t.objectStore(it),s=r.get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return a.close(),n(Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(a.close(),n(s.error)),t.oncomplete=()=>a.close()}else{let r;let s=s3(t),i=a.transaction(ir,"readwrite"),o=i.objectStore(ir),l=o.put({modelPath:this.modelPath,modelArtifactsInfo:s});l.onsuccess=()=>{r=a.transaction(it,"readwrite");let l=r.objectStore(it),u=l.put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});u.onsuccess=()=>e({modelArtifactsInfo:s}),u.onerror=e=>{o=i.objectStore(ir);let t=o.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(u.error)),t.onerror=e=>(a.close(),n(u.error))}},l.onerror=e=>(a.close(),n(l.error)),i.oncomplete=()=>{null==r?a.close():r.oncomplete=()=>a.close()}}},r.onerror=e=>n(r.error)})}}ii.URL_SCHEME="indexeddb://";let io=e=>{var t;return eM.getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ii.URL_SCHEME)?(t=e.slice(ii.URL_SCHEME.length),new ii(t)):null};s6.registerSaveRouter(io),s6.registerLoadRouter(io);let il="tensorflowjs_models",iu="info";function ih(e){return{info:[il,e,iu].join("/"),topology:[il,e,"model_topology"].join("/"),weightSpecs:[il,e,"weight_specs"].join("/"),weightData:[il,e,"weight_data"].join("/"),modelMetadata:[il,e,"model_metadata"].join("/")}}function ip(e){for(let t of Object.values(e))window.localStorage.removeItem(t)}class id{constructor(e){if(!eM.getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ih(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{let t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=s3(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(sY)return sf.from(e).toString("base64");let t=new Uint8Array(e),n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));let a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:r}}catch(e){throw ip(this.keys),Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){let e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");let t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;let r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;let a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){let e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}let s=this.LS.getItem(this.keys.weightData);if(null==s)throw Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(sY){let t=sf.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}let t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(s),t}}id.URL_SCHEME="localstorage://";let ic=e=>{var t;return eM.getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(id.URL_SCHEME)?(t=e.slice(id.URL_SCHEME.length),new id(t)):null};s6.registerSaveRouter(ic),s6.registerLoadRouter(ic);class im{constructor(){this.managers={}}static getInstance(){return null==im.instance&&(im.instance=new im),im.instance}static registerManager(e,t){j(null!=e,()=>"scheme must not be undefined or null."),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),j(e.length>0,()=>"scheme must not be an empty string.");let n=im.getInstance();j(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){let t=im.getInstance().managers[e];if(null==t)throw Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(im.getInstance().managers)}}function ig(e){if(-1===e.indexOf("://"))throw Error(`The url string provided does not contain a scheme. Supported schemes are: ${im.getSchemes().join(",")}`);return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function iy(e,t,n=!1){j(e!==t,()=>`Old path and new path are the same: '${e}'`);let r=s6.getLoadHandlers(e);j(r.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),j(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`);let a=r[0],s=s6.getSaveHandlers(t);j(s.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),j(s.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`);let i=s[0],o=ig(e).scheme,l=ig(e).path,u=o===ig(e).scheme,h=await a.load();n&&u&&await im.getManager(o).removeModel(l);let p=await i.save(h);return n&&!u&&await im.getManager(o).removeModel(l),p.modelArtifactsInfo}async function ib(){let e=im.getSchemes(),t={};for(let n of e){let e=await im.getManager(n).listModels();for(let r in e){let a=n+"://"+r;t[a]=e[r]}}return t}async function ix(e){let t=ig(e),n=im.getManager(t.scheme);return n.removeModel(t.path)}async function ik(e,t){return iy(e,t,!1)}async function iv(e,t){return iy(e,t,!0)}if(eM.get("IS_BROWSER")){eM.setPlatform("browser",new class{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){if(!window||!eM.getBool("USE_SETTIMEOUTCUSTOM")){setTimeout(e,t);return}this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",e=>{if(e.source===window&&e.data.name===this.messageName){e.stopPropagation();let t=this.functionRefs[e.data.index];t(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0)}},!0))}});try{im.registerManager(id.URL_SCHEME,new class{constructor(){j(eM.getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),j("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){let e={},t=il+"/",n="/"+iu;for(let r=0;r<this.LS.length;++r){let a=this.LS.key(r);if(a.startsWith(t)&&a.endsWith(n)){let t=function(e){let t=e.split("/");if(t.length<3)throw Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join("/")}(a);e[t]=JSON.parse(this.LS.getItem(a))}}return e}async removeModel(e){var t;e=(t=e).startsWith(id.URL_SCHEME)?t.slice(id.URL_SCHEME.length):t;let n=ih(e);if(null==this.LS.getItem(n.info))throw Error(`Cannot find model at path '${e}'`);let r=JSON.parse(this.LS.getItem(n.info));return ip(n),r}})}catch(e){}try{im.registerManager(ii.URL_SCHEME,new class{constructor(){this.indexedDB=ia()}async listModels(){return new Promise((e,t)=>{let n=this.indexedDB.open(ie,1);n.onupgradeneeded=()=>is(n),n.onsuccess=()=>{let r=n.result,a=r.transaction(ir,"readonly"),s=a.objectStore(ir),i=s.getAll();i.onsuccess=()=>{let t={};for(let e of i.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},i.onerror=e=>(r.close(),t(i.error)),a.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(ii.URL_SCHEME)?t.slice(ii.URL_SCHEME.length):t,new Promise((t,n)=>{let r=this.indexedDB.open(ie,1);r.onupgradeneeded=()=>is(r),r.onsuccess=()=>{let a;let s=r.result,i=s.transaction(ir,"readwrite"),o=i.objectStore(ir),l=o.get(e);l.onsuccess=()=>{if(null==l.result)return s.close(),n(Error(`Cannot find model with path '${e}' in IndexedDB.`));{let r=o.delete(e),i=()=>{a=s.transaction(it,"readwrite");let r=a.objectStore(it),i=r.delete(e);i.onsuccess=()=>t(l.result.modelArtifactsInfo),i.onerror=e=>n(l.error)};r.onsuccess=i,r.onerror=e=>(i(),s.close(),n(l.error))}},l.onerror=e=>(s.close(),n(l.error)),i.oncomplete=()=>{null==a?s.close():a.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)})}})}catch(e){}}let iw={importFetch:()=>_("foUwZ")};function iI(e,t="float32",n){return t=t||"float32",e$(e),new aO(e,t,n)}eM.get("IS_NODE")&&!eM.get("IS_BROWSER")&&eM.setPlatform("node",new class{constructor(){this.util=_("foUwZ"),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=eM.global.fetch?eM.global.fetch(e,t):(null==n&&(n=iw.importFetch()),n(e,t))}now(){let e=eL.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});let iS=st({cast_:function(e,t){let n=a7(e,"x","cast");if(!ed(t))throw Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw Error("Only strings can be casted to strings");return aQ.runKernel(tp,{x:n},{dtype:t})}}),iN=st({clone_:function(e){let t=a7(e,"x","clone","string_or_numeric");return aQ.runKernel(t2,{x:t})}});function iT(e,t=!1){console.log(e.toString(t))}aJ(),aL={buffer:iI,cast:iS,clone:iN,print:iT};var iC={};R(iC,"AdadeltaOptimizer",()=>lx),R(iC,"AdagradOptimizer",()=>lv),R(iC,"AdamOptimizer",()=>lS),R(iC,"AdamaxOptimizer",()=>lC),R(iC,"MomentumOptimizer",()=>lE),R(iC,"Optimizer",()=>lb),R(iC,"OptimizerConstructors",()=>lR),R(iC,"RMSPropOptimizer",()=>lA),R(iC,"SGDOptimizer",()=>l$),R(iC,"Tensor",()=>az),R(iC,"TensorBuffer",()=>aO),R(iC,"Variable",()=>aB),R(iC,"Rank",()=>d),R(iC,"sumOutType",()=>aG),R(iC,"upcastType",()=>aU),R(iC,"Reduction",()=>k),R(iC,"customGrad",()=>lm),R(iC,"grad",()=>lh),R(iC,"grads",()=>lp),R(iC,"valueAndGrad",()=>ld),R(iC,"valueAndGrads",()=>lc),R(iC,"variableGrads",()=>lf),R(iC,"Environment",()=>eD),R(iC,"env",()=>eO),R(iC,"ENV",()=>eM),R(iC,"version_core",()=>ln),R(iC,"nextFrame",()=>cu),R(iC,"browser",()=>ok),R(iC,"io",()=>i$),R(iC,"math",()=>iX),R(iC,"serialization",()=>oX),R(iC,"test_util",()=>oQ),R(iC,"util",()=>rX),R(iC,"backend_util",()=>ch),R(iC,"broadcast_util",()=>og),R(iC,"tensor_util",()=>aW),R(iC,"slice_util",()=>oF),R(iC,"gather_util",()=>oT),R(iC,"scatter_util",()=>o$),R(iC,"device_util",()=>a1),R(iC,"kernel_impls",()=>fm),R(iC,"KernelBackend",()=>M),R(iC,"DataStorage",()=>O);var i$={};function iE(e){return new Promise(e=>setTimeout(e)).then(e)}R(i$,"copyModel",()=>ik),R(i$,"listModels",()=>ib),R(i$,"moveModel",()=>iv),R(i$,"removeModel",()=>ix),R(i$,"browserFiles",()=>iF),R(i$,"browserHTTPRequest",()=>iW),R(i$,"concatenateArrayBuffers",()=>sJ),R(i$,"decodeWeights",()=>sX),R(i$,"encodeWeights",()=>sK),R(i$,"fromMemory",()=>iH),R(i$,"fromMemorySync",()=>iq),R(i$,"getLoadHandlers",()=>s9),R(i$,"getModelArtifactsForJSON",()=>s2),R(i$,"getModelArtifactsForJSONSync",()=>s1),R(i$,"getModelArtifactsInfoForJSON",()=>s3),R(i$,"getSaveHandlers",()=>s7),R(i$,"getWeightSpecs",()=>s4),R(i$,"http",()=>iB),R(i$,"isHTTPScheme",()=>iz),R(i$,"loadWeights",()=>iO),R(i$,"registerLoadRouter",()=>s8),R(i$,"registerSaveRouter",()=>s5),R(i$,"weightsLoaderFactory",()=>iM),R(i$,"withSaveHandler",()=>ij),R(i$,"withSaveHandlerSync",()=>iK);class iA{constructor(e){if(!eM.getBool("IS_BROWSER"))throw Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(iA.URL_SCHEME)&&(e=e.slice(iA.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw Error("Browser downloads are not supported in this environment since `document` is not present");let t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{let n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r=s0(e,n),a=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=a,await iE(()=>s.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){let e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await iE(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:s3(e)}}}}iA.URL_SCHEME="downloads://";class iR{constructor(e){if(null==e||e.length<1)throw Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{let n=new FileReader;n.onload=n=>{let r=JSON.parse(n.target.result),a=r.modelTopology;if(null==a){t(Error(`modelTopology field is missing from file ${this.jsonFile.name}`));return}let s=r.weightsManifest;if(null==s){t(Error(`weightManifest field is missing from file ${this.jsonFile.name}`));return}if(0===this.weightsFiles.length){e({modelTopology:a});return}let i=s2(r,e=>this.loadWeights(e));e(i)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)})}loadWeights(e){let t=[],n=[];for(let r of e)t.push(...r.weights),n.push(...r.paths);let r=this.checkManifestAndWeightFiles(e),a=n.map(e=>this.loadWeightsFile(e,r[e]));return Promise.all(a).then(e=>[t,sJ(e)])}loadWeightsFile(e,t){return new Promise((n,r)=>{let a=new FileReader;a.onload=e=>{let t=e.target.result;n(t)},a.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){let t=[],n=this.weightsFiles.map(e=>sQ(e.name)),r={};for(let a of e)a.paths.forEach(e=>{let a=sQ(e);if(-1!==t.indexOf(a))throw Error(`Duplicate file basename found in weights manifest: '${a}'`);if(t.push(a),-1===n.indexOf(a))throw Error(`Weight file with basename '${a}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(a)]});if(t.length!==this.weightsFiles.length)throw Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function iF(e){return new iR(e)}function iD(e,t,n,r){var a,s;j(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array"),a=n=null==n?0:n,s=r=null==r?1:r,j(a>=0&&a<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${a}`),j(s>=0&&s<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${s}`),j(s>=a,()=>`startFraction must be no more than endFraction, but got startFraction ${a} and endFraction ${s}`);let i=0;return Promise.all(e.map(a=>(a.then(a=>{let s=n+ ++i/e.length*(r-n);return t(s),a}),a)))}async function i_(e,t){null==t&&(t={});let n=null==t.fetchFunc?eM.platform.fetch:t.fetchFunc,r=e.map(e=>n(e,t.requestInit,{isBinary:!0})),a=null==t.onProgress?await Promise.all(r):await iD(r,t.onProgress,0,.5),s=a.map(e=>e.arrayBuffer()),i=null==t.onProgress?await Promise.all(s):await iD(s,t.onProgress,.5,1);return i}async function iO(e,t="",n,r){let a=iM(e=>i_(e,{requestInit:r}));return a(e,t,n)}function iM(e){return async(t,n="",r)=>{let a=t.map(()=>!1),s={},i=null!=r?r.map(()=>!1):[],o=[];if(t.forEach((e,t)=>{let n=0;e.weights.forEach(e=>{let l="quantization"in e?e.quantization.dtype:e.dtype,u=ss[l]*Z(e.shape),h=()=>{a[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:u})};null!=r?r.forEach((t,n)=>{t===e.name&&(h(),i[n]=!0)}):h(),o.push(e.name),n+=u})}),!i.every(e=>e)){let e=r.filter((e,t)=>!i[t]);throw Error(`Could not find weights in manifest with names: ${e.join(", ")}. 
Manifest JSON has weights with names: ${o.join(", ")}.`)}let l=a.reduce((e,t,n)=>(t&&e.push(n),e),[]),u=[];l.forEach(e=>{t[e].paths.forEach(e=>{let t=n+(n.endsWith("/")?"":"/")+e;u.push(t)})});let h=await e(u),p={},d=0;return l.forEach(e=>{let n=t[e].paths.length,r=0;for(let e=0;e<n;e++)r+=h[d+e].byteLength;let a=new ArrayBuffer(r),i=new Uint8Array(a),o=0;for(let e=0;e<n;e++){let t=new Uint8Array(h[d+e]);i.set(t,o),o+=t.byteLength}let l=s[e];l.forEach(e=>{let t=a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),n=sX(t,[e.manifestEntry]);for(let e in n)p[e]=n[e]}),d+=n}),p}}s6.registerSaveRouter(e=>eM.getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(iA.URL_SCHEME)?function(e="model"){return new iA(e)}(e.slice(iA.URL_SCHEME.length)):null);class iL{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(j("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=eM.platform.fetch,j(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&j(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");let t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;let n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r=s0(e,n);t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");let a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:s3(e),responses:[a]};throw Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${a.status}.`)}async load(){let e;let t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",Error(e)}let n=e.modelTopology,r=e.weightsManifest;if(null==n&&null==r)throw Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return s2(e,e=>this.loadWeights(e))}async loadWeights(e){let t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){let t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),a=n>t?e.substring(n):"";return[r+"/",a]}(t),a=this.weightPathPrefix||n,s=s4(e),i=[],o=[];for(let t of e)for(let e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(a+e+r);this.weightUrlConverter&&i.push(...await Promise.all(o));let l=await i_(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[s,sJ(l)]}}function iz(e){return null!=e.match(iL.URL_SCHEME_REGEX)}iL.URL_SCHEME_REGEX=/^https?:\/\//;let iP=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc));else if(Array.isArray(e)?e.every(e=>iz(e)):iz(e))return iB(e,t);return null};function iB(e,t){return new iL(e,t)}function iW(e,t){return iB(e,t)}s6.registerSaveRouter(iP),s6.registerLoadRouter(iP);class iV{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class iU{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class iG{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function iH(e,t,n,r){let a=arguments;return new iG(iq(...a))}function iq(e,t,n,r){if(1!=arguments.length)return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new iV({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r});{let t=null!=e.modelTopology||null!=e.weightSpecs;return t?new iV(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new iV({modelTopology:e}))}}function ij(e){return new iU(e)}function iK(e){return new iU(e)}var iX={};R(iX,"confusionMatrix",()=>om);let iY=st({matMul_:function(e,t,n=!1,r=!1){let a=a7(e,"a","matMul"),s=a7(t,"b","matMul");[a,s]=aH(a,s);let i={a:a,b:s};return aQ.runKernel(ti,i,{transposeA:n,transposeB:r})}}),iZ=st({oneHot_:function(e,t,n=1,r=0,a="int32"){if(t<2)throw Error(`Error in oneHot: depth must be >=2, but it is ${t}`);let s=a7(e,"indices","oneHot","int32");return aQ.runKernel(nF,{indices:s},{dtype:a,depth:t,onValue:n,offValue:r})}});var iJ={};R(iJ,"transpose",()=>of);var iQ={};function i0(){eM.set("PROD",!0)}function i1(){eM.set("DEBUG",!0)}function i2(){eM.set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function i3(e){eM.getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function i4(){aQ.disposeVariables()}function i6(){return aQ}function i5(){return aQ.memory()}function i8(e){return aQ.profile(e)}function i7(e,t){return aQ.tidy(e,t)}function i9(e){let t=aK(e);t.forEach(e=>e.dispose())}function oe(e){return aQ.keep(e)}function ot(e){return aQ.time(e)}function on(e){return aQ.setBackend(e)}function or(){return aQ.ready()}function oa(){return aQ.backendName}function os(e){aQ.removeBackend(e)}function oi(e){return aQ.findBackend(e)}function oo(e){return aQ.findBackendFactory(e)}function ol(e,t,n=1){return aQ.registerBackend(e,t,n)}function ou(){return aQ.backend}function oh(e,t){eM.setPlatform(e,t)}R(iQ,"enableProdMode",()=>i0),R(iQ,"enableDebugMode",()=>i1),R(iQ,"disableDeprecationWarnings",()=>i2),R(iQ,"deprecationWarn",()=>i3),R(iQ,"disposeVariables",()=>i4),R(iQ,"engine",()=>i6),R(iQ,"memory",()=>i5),R(iQ,"profile",()=>i8),R(iQ,"tidy",()=>i7),R(iQ,"dispose",()=>i9),R(iQ,"keep",()=>oe),R(iQ,"time",()=>ot),R(iQ,"setBackend",()=>on),R(iQ,"ready",()=>or),R(iQ,"getBackend",()=>oa),R(iQ,"removeBackend",()=>os),R(iQ,"findBackend",()=>oi),R(iQ,"findBackendFactory",()=>oo),R(iQ,"registerBackend",()=>ol),R(iQ,"backend",()=>ou),R(iQ,"setPlatform",()=>oh);let op=st({imag_:function(e){let t=a7(e,"input","imag");return aQ.runKernel(t4,{input:t})}}),od=st({neg_:function(e){let t=a7(e,"x","neg");return aQ.runKernel(nT,{x:t})}}),oc=st({real_:function(e){let t=a7(e,"input","real");return aQ.runKernel(nV,{input:t})}}),of=st({transpose_:function(e,t,n){let r=a7(e,"x","transpose");if(null==t&&(t=r.shape.map((e,t)=>t).reverse()),j(r.rank===t.length,()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`),t.forEach(e=>{j(e>=0&&e<r.rank,()=>`All entries in 'perm' must be between 0 and ${r.rank-1} but got ${t}`)}),r.rank<=1)return r.clone();let a={perm:t};return"complex64"===r.dtype?i7(()=>{let e=oc(r),t=op(r);return e=aQ.runKernel(rw,{x:e},a),t=aQ.runKernel(rw,{x:t},a),n&&(t=od(t)),sn(e,t)}):aQ.runKernel(rw,{x:r},a)}}),om=st({confusionMatrix_:function(e,t,n){let r=a7(e,"labels","confusionMatrix"),a=a7(t,"predictions","confusionMatrix");j(null==n||n>0&&Number.isInteger(n),()=>`If provided, numClasses must be a positive integer, but got ${n}`),j(1===r.rank,()=>`Expected the rank of labels to be 1, but got ${r.rank}`),j(1===a.rank,()=>`Expected the rank of predictions to be 1, but got ${a.rank}`),j(r.shape[0]===a.shape[0],()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${a.shape[0]}. Labels and predictions should have the same number of elements.`),j(n>0&&Number.isInteger(n),()=>`numClasses is required to be a positive integer, but got ${n}`);let s=iZ(iS(r,"int32"),n),i=iZ(iS(a,"int32"),n),o=of(s),l=iY(o,i);return iS(l,"int32")}});var og={};function oy(e,t){let n=e.length,r=[];for(let a=0;a<n;a++){let s=n-1-a,i=e[s]||1,o=t[t.length-1-a]||1;o>1&&1===i&&r.unshift(s)}return r}function ob(e,t){let n=[];for(let r=0;r<t.length;r++){let a=e[e.length-r-1],s=t.length-r-1,i=t[s];(null==a||1===a&&i>1)&&n.unshift(s)}return n}function ox(e,t){let n=[],r=Math.max(e.length,t.length);for(let a=0;a<r;a++){let r=e[e.length-a-1];null==r&&(r=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else if(r!==s){let n=`Operands could not be broadcast together with shapes ${e} and ${t}.`;throw Error(n)}else n.unshift(r)}return n}R(og,"getBroadcastDims",()=>oy),R(og,"getReductionAxes",()=>ob),R(og,"assertAndGetBroadcastShape",()=>ox);var ok={};function ov(e,t,n){if(X(e),null!=t&&3!==t.length)throw Error("tensor3d() requires shape to have three numbers");let r=a5(e,n);if(3!==r.length&&1!==r.length)throw Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw Error("tensor3d() requires shape to be provided when `values` are a flat array");return sr(e,t,r,n)}function ow(e,t=3){let n,a;if(t>4)throw Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw Error("pixels passed to tf.browser.fromPixels() can not be null");let s=!1,i=!1,o=!1,l=!1,u=!1,h=!1;if(e.data instanceof Uint8Array)s=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)i=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)l=!0;else if(null!=e.getContext)u=!0;else if("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap)h=!0;else throw Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);let p=rB(rE,aQ.backendName);if(null!=p)return aQ.runKernel(rE,{pixels:e},{numChannels:t});let[d,c]=o?[e.videoWidth,e.videoHeight]:[e.width,e.height];if(u)n=e.getContext("2d").getImageData(0,0,d,c).data;else if(i||s)n=e.data;else if(l||o||h){if(null==r){if("undefined"==typeof document){if("undefined"!=typeof OffscreenCanvas&&"undefined"!=typeof OffscreenCanvasRenderingContext2D)r=new OffscreenCanvas(1,1).getContext("2d");else throw Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.")}else r=document.createElement("canvas").getContext("2d",{willReadFrequently:!0})}r.canvas.width=d,r.canvas.height=c,r.drawImage(e,0,0,d,c),n=r.getImageData(0,0,d,c).data}if(4===t)a=new Int32Array(n);else{let e=d*c;a=new Int32Array(e*t);for(let r=0;r<e;r++)for(let e=0;e<t;++e)a[r*t+e]=n[4*r+e]}let f=[c,d,t];return ov(a,f,"int32")}async function oI(e,t=3){var n;let r=null;if(eM.getBool("WRAP_TO_IMAGEBITMAP")&&"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&null!=(n=e)&&0!==n.width&&0!==n.height&&!(null!=e&&e.data instanceof Uint8Array)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}r=null!=t&&t.width===e.width&&t.height===e.height?t:e}else r=e;return ow(r,t)}async function oS(e,t){let n=a7(e,"img","toPixels");if(!(e instanceof az)){let e=n;n=iS(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);let[r,a]=n.shape.slice(0,2),s=2===n.rank?1:n.shape[2];if(s>4||2===s)throw Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);let i=await n.data(),o="float32"===n.dtype?255:1,l=new Uint8ClampedArray(a*r*4);for(let e=0;e<r*a;++e){let t=[0,0,0,255];for(let r=0;r<s;r++){let a=i[e*s+r];if("float32"===n.dtype){if(a<0||a>1)throw Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===n.dtype&&(a<0||a>255))throw Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===s?(t[0]=a*o,t[1]=a*o,t[2]=a*o):t[r]=a*o}let r=4*e;l[r+0]=Math.round(t[0]),l[r+1]=Math.round(t[1]),l[r+2]=Math.round(t[2]),l[r+3]=Math.round(t[3])}if(null!=t){t.width=a,t.height=r;let e=t.getContext("2d"),n=new ImageData(l,a,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),l}R(ok,"fromPixelsAsync",()=>oI),R(ok,"toPixels",()=>oS),R(ok,"fromPixels",()=>oN);let oN=st({fromPixels_:ow});var oT={};function oC(e,t){let n=e.shape.length,r=t.shape.length;if(n<1)throw Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===Z(e.shape))throw Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);let a=t.shape,s=a[a.length-1],i=1;for(let e=0;e<a.length-1;++e)i*=a[e];let o=e.shape,l=a.slice();l.pop();let u=1;for(let e=s;e<n;++e)u*=o[e],l.push(o[e]);let h=[...eI(e.shape).map(e=>e/u),1].slice(0,s);return[l,i,u,h]}R(oT,"prepareAndValidate",()=>oC);var o$={};function oE(e,t,n){let r=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${a}.`;if(n.rank<a)throw Error(s+` update.rank < ${a}. `);if(e.length<r+(n.rank-a))throw Error(s+` Output shape length < ${r+(n.rank-a)}`);if(n.rank!==a+e.length-r)throw Error(s+` update.rank != ${a+e.length-r}`);for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw Error(s+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+r])throw Error(s+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function oA(e,t,n){if(t.rank<1)throw Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw Error(`Updates specified for empty output. updates shape: ${e.shape}`)}oE(n,t,e)}function oR(e,t,n){let r=t.shape.length,a=r>1?t.shape[r-1]:1,s=n.length,i=1;for(let e=a;e<s;++e)i*=n[e];let o=a<1?1:a,l=Z(t.shape)/o,u=[...eI(n.slice(0,a)),1],h=Z(n);return{sliceRank:a,numUpdates:l,sliceSize:i,strides:u,outputSize:h}}R(o$,"validateUpdateShape",()=>oE),R(o$,"validateInput",()=>oA),R(o$,"calculateShapes",()=>oR);var oF={};function oD(e,t,n){let r=e.shape.length;j(r===t.length,()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`),j(r===n.length,()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`);for(let a=0;a<r;++a)j(t[a]+n[a]<=e.shape[a],()=>`Error in slice${r}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`)}function o_(e){let t=[],n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function oO(e,t,n){let r=[];for(let a=0;a<e.length;a++)r[a]=Math.ceil((t[a]-e[a])/n[a]);return r}function oM(e,t,n,r){let a=[...e];for(let e=a.length;e<r.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function oL(e,t){let n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function oz(e,t,n,r,a,s,i,o,l){let u=e.length,h=Array(u),p=Array(u),d=Array(u);if(t.length&&n>0){let l=t[0],u=n+1;h=oP(i,l,u,r,e),p=oB(o,l,u,a,e),d=oM(s,l,u,e)}else for(let t=0;t<u;t++)h[t]=oV(i,r,s,e,t,l),p[t]=oU(o,a,s,e,t,l),d[t]=oW(s,t,l);return{begin:h,end:p,strides:d}}function oP(e,t,n,r,a){let s=[...a],i=oL(n,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=0;else{var o;let i=(o=a)<=t?o:o-(n-1),l=r[i];e&1<<i&&(l=0),s[a]=l}return s}function oB(e,t,n,r,a){let s=[...a],i=oL(n,t);for(let a=0;a<s.length;a++)if(i.indexOf(a)>-1)s[a]=Number.MAX_SAFE_INTEGER;else{var o;let i=(o=a)<=t?o:o-(n-1),l=r[i];e&1<<i&&(l=Number.MAX_SAFE_INTEGER),s[a]=l}for(let e=0;e<s.length;e++){let t=a[e];s[e]<0&&(s[e]+=t),s[e]=W(0,s[e],a[e])}return s}function oW(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function oV(e,t,n,r,a,s){let i=t[a],o=n[a]||1;(e&1<<a||s&1<<a||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);let l=r[a];return i<0&&(i+=l),i=W(0,i,l-1)}function oU(e,t,n,r,a,s){let i=t[a],o=n[a]||1;(e&1<<a||s&1<<a||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);let l=r[a];return i<0&&(i+=l),i=o>0?W(0,i,l):W(-1,i,l-1)}function oG(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let a=r+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function oH(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function oq(e,t,n){let r,a;let s=e.shape.length;return(r="number"==typeof t?[t,...Array(s-1).fill(0)]:t.length<s?t.concat(Array(s-t.length).fill(0)):t.slice()).forEach(e=>{j(-1!==e,()=>"slice() does not support negative begin indexing.")}),a=(a=null==n?Array(s).fill(-1):"number"==typeof n?[n,...Array(s-1).fill(-1)]:n.length<s?n.concat(Array(s-n.length).fill(-1)):n).map((t,n)=>t>=0?t:(j(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-r[n])),[r,a]}function oj(e,t,n,r,a,s,i,o,l){let u;if(null==r?(u=Array(t.length)).fill(1):u=r,null!=i&&(i&i-1)!=0)throw Error("Multiple ellipses in slice is not allowed.");let h=!1,p={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:a,endMask:s,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};for(let e=0;e<p.dims;e++)h&&(1<<e&o)!=0&&p.numAddAxisAfterEllipsis++,1<<e&i&&(h=!0);!h&&(p.ellipsisMask|=1<<p.dims,p.dims++);let d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=Array(t.dims),t.end=Array(t.dims),t.strides=Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){let a=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<a;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(p,d);let c=!0,f=!0,m=!0,g=[],y=[];for(let t=0;t<e.length;++t){let n;if(0===d.strides[t])throw Error(`strides[${t}] must be non-zero`);let r=!!(d.shrinkAxisMask&1<<t),a=e[t];if(-1===a){g.push(r?1:-1);continue}let s=[d.beginMask&1<<t,d.endMask&1<<t],i=[d.strides[t]>0?0:-1,d.strides[t]>0?a:a-1];if(r&&d.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===d.strides[t];let o=!!(d.beginMask&1<<t&&d.endMask&1<<t);if(d.beginValid&&d.endValid){if(r){let e=d.begin[t]<0?a+d.begin[t]:d.begin[t];if(d.begin[t]=e,d.end[t]=d.begin[t]+1,e<0||e>=a)throw Error(`slice index ${d.begin[t]} of dimension ${t} out of bounds.`)}else d.begin[t]=oK(d.begin[t],0,d.strides[t],a,s,i),d.end[t]=oK(d.end[t],1,d.strides[t],a,s,i);let e=1===d.strides[t]&&0===d.begin[t]&&d.end[t]===a;c=c&&e,f=f&&(0===t&&1===d.strides[t]||e)}else c=c&&1===d.strides[t]&&o,f=f&&(0===t&&1===d.strides[t]||o);let l=!1;if(d.beginValid&&d.endValid?(n=d.end[t]-d.begin[t],l=!0):r?(n=1,l=!0):o&&a>=0&&(n=d.strides[t]<0?-a:a,l=!0),l){let e;e=0===n||n<0!=d.strides[t]<0?0:Math.trunc(n/d.strides[t])+(n%d.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<d.finalShapeGatherIndices.length;++e){let t=d.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}let b=y.filter((e,t)=>-2!==d.finalShapeGatherIndices[t]);return{finalShapeSparse:b,finalShape:y,isIdentity:c,sliceDim0:f,isSimpleSlice:m,begin:d.begin,end:d.end,strides:d.strides}}function oK(e,t,n,r,a,s){if(a[t])return n>0?s[t]:s[t+1&1];{let t=e<0?r+e:e;return t<s[0]?s[0]:t>s[1]?s[1]:t}}R(oF,"assertParamsValid",()=>oD),R(oF,"maskToAxes",()=>o_),R(oF,"computeOutShape",()=>oO),R(oF,"stridesWithElidedDims",()=>oM),R(oF,"getNormalizedAxes",()=>oz),R(oF,"startIndicesWithElidedDims",()=>oP),R(oF,"stopIndicesWithElidedDims",()=>oB),R(oF,"startForAxis",()=>oV),R(oF,"stopForAxis",()=>oU),R(oF,"stridesForAxis",()=>oW),R(oF,"isSliceContinous",()=>oG),R(oF,"computeFlatOffset",()=>oH),R(oF,"parseSliceParams",()=>oq),R(oF,"sliceInfo",()=>oj);var oX={};R(oX,"Serializable",()=>oY),R(oX,"SerializationMap",()=>oZ),R(oX,"registerClass",()=>oJ);class oY{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class oZ{constructor(){this.classNameMap={}}static getMap(){return null==oZ.instance&&(oZ.instance=new oZ),oZ.instance}static register(e){oZ.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function oJ(e){j(null!=e.className,()=>"Class being registered does not have the static className property defined."),j("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),j(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),oZ.register(e)}var oQ={};R(oQ,"TEST_EPSILON_FLOAT16",()=>o0),R(oQ,"expectArraysClose",()=>o1),R(oQ,"testEpsilon",()=>o2),R(oQ,"expectPromiseToFail",()=>o4),R(oQ,"expectArraysEqual",()=>o6),R(oQ,"expectNumbersClose",()=>o5),R(oQ,"expectValuesInRange",()=>o7),R(oQ,"expectArrayBuffersEqual",()=>o9),R(oQ,"encodeStrings",()=>function e(t){for(let n=0;n<t.length;n++){let r=t[n];Array.isArray(r)?e(r):t[n]=a$(r)}return t}),R(oQ,"createVideoElement",()=>le),R(oQ,"play",()=>lt);let o0=.1;function o1(e,t,n){return null==n&&(n=o2()),o3(e,t,(e,t)=>o8(e,t,n))}function o2(){return 32===aQ.backend.floatPrecision()?.001:o0}function o3(e,t,n){let r=!0;if((ef(e)||ef(t))&&(r=!1),ef(e)&&ef(t)&&(r=!0),r){let n=e.constructor.name,r=t.constructor.name;if(n!==r)throw Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(e)&&Array.isArray(t)){let n=a5(e),r=a5(t);if(!Q(n,r))throw Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}let a=ef(e)?e:Y(e),s=ef(t)?t:Y(t);if(a.length!==s.length)throw Error(`Arrays have different lengths actual: ${a.length} vs expected: ${s.length}.
Actual:   ${a}.
Expected: ${s}.`);for(let e=0;e<s.length;++e){let t=a[e],r=s[e];if(!n(t,r))throw Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${r}.
Actual:   ${a}.
Expected: ${s}.`)}"undefined"!=typeof expect&&expect().nothing()}function o4(e,t){e().then(()=>t.fail(),()=>t()),"undefined"!=typeof expect&&expect().nothing()}function o6(e,t){let n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return ey(e)||ey(e[0])||ey(t)||ey(t[0])?o3(e,n,(e,t)=>e==t):o3(e,t,(e,t)=>o8(e,t,0))}function o5(e,t,n){if(null==n&&(n=o2()),!o8(e,t,n))throw Error(`Numbers differ: actual === ${e}, expected === ${t}`);"undefined"!=typeof expect&&expect().nothing()}function o8(e,t,n){return!(isFinite(e)||isFinite(t))||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function o7(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)}function o9(e,t){let n=new Float32Array(e),r=new Float32Array(t);if(n.length!==r.length)throw Error(`Expected ArrayBuffer to be of length ${r.length}, but it was ${n.length}`);for(let e=0;e<r.length;e++)if(n[e]!==r[e])throw Error(`Expected ArrayBuffer value at ${e} to be ${r[e]} but got ${n[e]} instead`)}function le(e){let t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(e),new Promise(e=>{t.addEventListener("loadeddata",n=>e(t)),t.load()})}async function lt(e){await e.play(),"requestVideoFrameCallback"in e&&await new Promise(t=>{e.requestVideoFrameCallback(t)})}let ln="3.21.0",lr=st({add_:function(e,t){let n=a7(e,"a","add"),r=a7(t,"b","add");[n,r]=aH(n,r);let a={a:n,b:r};return aQ.runKernel(e1,a)}}),la=st({floorDiv_:function(e,t){let n=a7(e,"a","floorDiv"),r=a7(t,"b","floorDiv");[n,r]=aH(n,r);let a={a:n,b:r};return aQ.runKernel(tY,a)}}),ls=st({div_:function(e,t){let n=a7(e,"a","div"),r=a7(t,"b","div");if([n,r]=aH(n,r),"int32"===n.dtype&&"int32"===r.dtype)return la(n,r);let a={a:n,b:r};return aQ.runKernel(tL,a,{})}}),li=st({mul_:function(e,t){let n=a7(e,"a","mul"),r=a7(t,"b","mul");[n,r]=aH(n,r);let a={a:n,b:r};return aQ.runKernel(nN,a)}}),lo=st({sqrt_:function(e){let t=a7(e,"x","sqrt","float32");return aQ.runKernel(re,{x:t})}}),ll=st({square_:function(e){let t=a7(e,"x","square");return aQ.runKernel("Square",{x:t},{})}}),lu=st({zerosLike_:function(e){let t=a7(e,"x","zerosLike");return aQ.runKernel(rC,{x:t})}});function lh(e){return j(ev(e),()=>"The f passed in grad(f) must be a function"),(t,n)=>{let r=a7(t,"x","tf.grad","string_or_numeric"),a=null!=n?a7(n,"dy","tf.grad"):null;return aQ.tidy(()=>{let{value:t,grads:n}=aQ.gradients(()=>e(r),[r],a);return null!=a&&K(t.shape,a.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),lg(n),n[0]})}}function lp(e){return j(ev(e),()=>"The f passed in grads(f) must be a function"),(t,n)=>{j(Array.isArray(t),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");let r=a9(t,"args","tf.grads","string_or_numeric"),a=null!=n?a7(n,"dy","tf.grads"):null;return aQ.tidy(()=>{let{value:t,grads:n}=aQ.gradients(()=>e(...r),r,a);return null!=a&&K(t.shape,a.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),lg(n),n})}}function ld(e){return j(ev(e),()=>"The f passed in valueAndGrad(f) must be a function"),(t,n)=>{j(t instanceof az,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),j(null==n||n instanceof az,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");let{grads:r,value:a}=aQ.gradients(()=>e(t),[t],n);return lg(r),{grad:r[0],value:a}}}function lc(e){return j(ev(e),()=>"The f passed in valueAndGrads(f) must be a function"),(t,n)=>{j(Array.isArray(t)&&t.every(e=>e instanceof az),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),j(null==n||n instanceof az,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");let r=aQ.gradients(()=>e(...t),t,n);return null!=n&&K(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),lg(r.grads),r}}function lf(e,t){j(ev(e),()=>"The f passed in variableGrads(f) must be a function"),j(null==t||Array.isArray(t)&&t.every(e=>e instanceof aB),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");let n=null!=t;if(!n)for(let e in t=[],aQ.registeredVariables)t.push(aQ.registeredVariables[e]);let r=n?t.filter(e=>!e.trainable):null,a=t.length;j((t=t.filter(e=>e.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${a} variables is trainable.`);let{value:s,grads:i}=aQ.gradients(e,t,null,!0);j(i.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),j(0===s.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${s.rank} tensor`);let o={};return t.forEach((e,t)=>{null!=i[t]&&(o[e.name]=i[t])}),null!=r&&r.forEach(e=>o[e.name]=null),{value:s,grads:o}}function lm(e){return aQ.customGrad(e)}function lg(e){let t=e.filter(e=>null==e).length;if(t>0)throw Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`)}function ly(e,t){if((ef(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&ef(e)&&!(e instanceof Uint8Array))throw Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return sr(e,[],[],t)}class lb extends oY{minimize(e,t=!1,n){let{value:r,grads:a}=this.computeGradients(e,n);if(null!=n){let e=n.map(e=>({name:e.name,tensor:a[e.name]}));this.applyGradients(e)}else this.applyGradients(a);return(i9(a),t)?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return lf(e,t)}dispose(){null!=this.iterations_&&i9(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:ly(this.iterations_,"int32")}}async getWeights(){throw Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(lb,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class lx extends lb{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=aQ.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);t.forEach((t,n)=>{let r=aQ.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:i7(()=>lu(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:i7(()=>lu(r).variable(!1))});let a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;let s=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;i7(()=>{let e=lr(li(s,this.rho),li(ll(a),1-this.rho)),t=li(ls(lo(lr(i,this.epsilon)),lo(lr(s,this.epsilon))),a),n=lr(li(i,this.rho),li(ll(t),1-this.rho));s.assign(e),i.assign(n);let o=lr(li(t,-this.learningRate),r);r.assign(o)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(i9(this.accumulatedGrads.map(e=>e.variable)),i9(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){let e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=e.length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}function lk(e,t,n){return aQ.runKernel(tj,{},{shape:e,value:t,dtype:n})}lx.className="Adadelta",oJ(lx);class lv extends lb{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);t.forEach((t,n)=>{let r=aQ.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:i7(()=>lk(r.shape,this.initialAccumulatorValue).variable(!1))});let a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;let s=this.accumulatedGrads[n].variable;i7(()=>{let e=lr(s,ll(a));s.assign(e);let t=lr(li(ls(a,lo(lr(e,aQ.backend.epsilon()))),-this.learningRate),r);r.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&i9(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}lv.className="Adagrad",oJ(lv);let lw=st({pow_:function(e,t){let n=a7(e,"base","pow"),r=a7(t,"exp","pow");[n,r]=aH(n,r);let a={a:n,b:r};return aQ.runKernel(nM,a)}}),lI=st({sub_:function(e,t){let n=a7(e,"a","sub"),r=a7(t,"b","sub");[n,r]=aH(n,r);let a={a:n,b:r};return aQ.runKernel(rg,a)}});class lS extends lb{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],i7(()=>{this.accBeta1=ly(t).variable(),this.accBeta2=ly(n).variable()}),null==r&&(this.epsilon=aQ.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);i7(()=>{let n=lI(1,this.accBeta1),r=lI(1,this.accBeta2);t.forEach((t,a)=>{let s=aQ.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:i7(()=>lu(s).variable(!1))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:i7(()=>lu(s).variable(!1))});let i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;let o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,u=lr(li(o,this.beta1),li(i,1-this.beta1)),h=lr(li(l,this.beta2),li(ll(i),1-this.beta2)),p=ls(u,n),d=ls(h,r);o.assign(u),l.assign(h);let c=lr(li(ls(p,lr(lo(d),this.epsilon)),-this.learningRate),s);s.assign(c)}),this.accBeta1.assign(li(this.accBeta1,this.beta1)),this.accBeta2.assign(li(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&i9(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&i9(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){let e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),i7(()=>{this.accBeta1.assign(lw(this.beta1,this.iterations_+1)),this.accBeta2.assign(lw(this.beta2,this.iterations_+1))});let t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}lS.className="Adam",oJ(lS);let lN=st({abs_:function(e){let t=a7(e,"x","abs");return"complex64"===t.dtype?aQ.runKernel(tm,{x:t}):aQ.runKernel(eJ,{x:t})}}),lT=st({maximum_:function(e,t){let n=a7(e,"a","maximum"),r=a7(t,"b","maximum");[n,r]=aH(n,r),"bool"===n.dtype&&(n=iS(n,"int32"),r=iS(r,"int32")),ox(n.shape,r.shape);let a={a:n,b:r};return aQ.runKernel(nc,a)}});class lC extends lb{constructor(e,t,n,r=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],i7(()=>{this.iteration=ly(0).variable(),this.accBeta1=ly(t).variable()}),null==r&&(this.epsilon=aQ.backend.epsilon())}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);i7(()=>{let n=lI(1,this.accBeta1),r=ls(-this.learningRate,lr(li(this.iteration,this.decay),1));t.forEach((t,a)=>{let s=aQ.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:lu(s).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:lu(s).variable(!1)});let i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;let o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,u=lr(li(o,this.beta1),li(i,1-this.beta1)),h=li(l,this.beta2),p=lN(i),d=lT(h,p);o.assign(u),l.assign(d);let c=lr(li(ls(r,n),ls(u,lr(d,this.epsilon))),s);s.assign(c)}),this.iteration.assign(lr(this.iteration,1)),this.accBeta1.assign(li(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&i9(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&i9(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}lC.className="Adamax",oJ(lC);class l$ extends lb{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);t.forEach((t,n)=>{let r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;let a=aQ.registeredVariables[t];i7(()=>{let e=lr(li(this.c,r),a);a.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=oe(ly(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}l$.className="SGD",oJ(l$);class lE extends l${constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=ly(this.momentum)}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);t.forEach((t,n)=>{let r=aQ.registeredVariables[t];null==this.accumulations[n]&&(this.accumulations[n]={originalName:`${t}/momentum`,variable:i7(()=>lu(r).variable(!1))});let a=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&i7(()=>{let e;let t=lr(li(this.m,a),s);e=this.useNesterov?lr(li(this.c,lr(s,li(t,this.m))),r):lr(li(this.c,t),r),a.assign(t),r.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&i9(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}lE.className="Momentum",oJ(lE);class lA extends lb{constructor(e,t=.9,n=0,r=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==r&&(this.epsilon=aQ.backend.epsilon()),null==e)throw Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){let t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);t.forEach((t,n)=>{let r=aQ.registeredVariables[t];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:i7(()=>lu(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:i7(()=>lu(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:i7(()=>lu(r).variable(!1))});let a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;let s=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;i7(()=>{let e=lr(li(s,this.decay),li(ll(a),1-this.decay));if(this.centered){let t=this.accumulatedMeanGrads[n].variable,o=lr(li(t,this.decay),li(a,1-this.decay)),l=ls(li(a,this.learningRate),lo(lI(e,lr(ll(o),this.epsilon)))),u=lr(li(i,this.momentum),l);s.assign(e),t.assign(o),i.assign(u);let h=lI(r,u);r.assign(h)}else{let e=lr(li(s,this.decay),li(ll(a),1-this.decay)),t=lr(li(i,this.momentum),ls(li(a,this.learningRate),lo(lr(e,this.epsilon))));s.assign(e),i.assign(t);let n=lI(r,t);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&i9(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&i9(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&i9(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){let e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);let t=this.centered?e.length/3:e.length/2;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}lA.className="RMSProp",oJ(lA);class lR{static sgd(e){return new l$(e)}static momentum(e,t,n=!1){return new lE(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,a=!1){return new lA(e,t,n,r,a)}static adam(e=.001,t=.9,n=.999,r=null){return new lS(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new lx(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,a=0){return new lC(e,t,n,r,a)}static adagrad(e,t=.1){return new lv(e,t)}}var lF={};R(lF,"spectral",()=>d9),R(lF,"signal",()=>ce),R(lF,"image",()=>ct),R(lF,"linalg",()=>cn),R(lF,"losses",()=>cr),R(lF,"sparse",()=>ca),R(lF,"string",()=>cs),R(lF,"abs",()=>lN),R(lF,"acos",()=>lD),R(lF,"acosh",()=>l_),R(lF,"add",()=>lr),R(lF,"addN",()=>lO),R(lF,"all",()=>lM),R(lF,"any",()=>lL),R(lF,"argMax",()=>lz),R(lF,"argMin",()=>lP),R(lF,"asin",()=>lB),R(lF,"asinh",()=>lW),R(lF,"atan",()=>lV),R(lF,"atan2",()=>lU),R(lF,"atanh",()=>lG),R(lF,"avgPool",()=>l8),R(lF,"avgPool3d",()=>l7),R(lF,"basicLSTMCell",()=>ur),R(lF,"batchToSpaceND",()=>ua),R(lF,"batchNorm",()=>us),R(lF,"batchNorm2d",()=>ui),R(lF,"batchNorm3d",()=>uo),R(lF,"batchNorm4d",()=>ul),R(lF,"bincount",()=>uu),R(lF,"broadcastArgs",()=>uh),R(lF,"broadcastTo",()=>up),R(lF,"buffer",()=>iI),R(lF,"cast",()=>iS),R(lF,"ceil",()=>ud),R(lF,"clipByValue",()=>uc),R(lF,"clone",()=>iN),R(lF,"complex",()=>sn),R(lF,"concat",()=>l9),R(lF,"concat1d",()=>uf),R(lF,"concat2d",()=>um),R(lF,"concat3d",()=>ug),R(lF,"concat4d",()=>uy),R(lF,"conv1d",()=>ux),R(lF,"conv2d",()=>ub),R(lF,"conv2dTranspose",()=>uv),R(lF,"conv3d",()=>uw),R(lF,"conv3dTranspose",()=>uS),R(lF,"cos",()=>uN),R(lF,"cosh",()=>uT),R(lF,"cumprod",()=>uC),R(lF,"cumsum",()=>u$),R(lF,"denseBincount",()=>uE),R(lF,"depthToSpace",()=>uA),R(lF,"depthwiseConv2d",()=>uR),R(lF,"diag",()=>uF),R(lF,"dilation2d",()=>uD),R(lF,"div",()=>ls),R(lF,"divNoNan",()=>uM),R(lF,"dot",()=>uL),R(lF,"einsum",()=>uz),R(lF,"elu",()=>uP),R(lF,"equal",()=>u_),R(lF,"erf",()=>uB),R(lF,"euclideanNorm",()=>u1),R(lF,"exp",()=>u2),R(lF,"expandDims",()=>u3),R(lF,"expm1",()=>u4),R(lF,"eye",()=>u5),R(lF,"fill",()=>lk),R(lF,"floor",()=>u8),R(lF,"floorDiv",()=>la),R(lF,"gather",()=>u7),R(lF,"greater",()=>u9),R(lF,"greaterEqual",()=>he),R(lF,"imag",()=>op),R(lF,"isFinite",()=>ht),R(lF,"isInf",()=>hn),R(lF,"isNaN",()=>hr),R(lF,"leakyRelu",()=>ha),R(lF,"less",()=>hs),R(lF,"lessEqual",()=>hi),R(lF,"linspace",()=>ho),R(lF,"localResponseNormalization",()=>hl),R(lF,"log",()=>hu),R(lF,"log1p",()=>hh),R(lF,"logSigmoid",()=>hd),R(lF,"logSoftmax",()=>hc),R(lF,"logSumExp",()=>hf),R(lF,"logicalAnd",()=>hm),R(lF,"logicalNot",()=>hg),R(lF,"logicalOr",()=>hy),R(lF,"logicalXor",()=>hb),R(lF,"lowerBound",()=>hv),R(lF,"matMul",()=>iY),R(lF,"max",()=>uZ),R(lF,"maxPool",()=>hw),R(lF,"maxPool3d",()=>hI),R(lF,"maxPoolWithArgmax",()=>hS),R(lF,"maximum",()=>lT),R(lF,"mean",()=>hN),R(lF,"meshgrid",()=>h$),R(lF,"min",()=>uJ),R(lF,"minimum",()=>hE),R(lF,"mirrorPad",()=>hA),R(lF,"mod",()=>hR),R(lF,"moments",()=>hF),R(lF,"mul",()=>li),R(lF,"multiRNNCell",()=>hD),R(lF,"multinomial",()=>h_),R(lF,"neg",()=>od),R(lF,"notEqual",()=>hO),R(lF,"oneHot",()=>iZ),R(lF,"ones",()=>hC),R(lF,"onesLike",()=>hM),R(lF,"outerProduct",()=>hL),R(lF,"pad",()=>hz),R(lF,"pad1d",()=>hP),R(lF,"pad2d",()=>hB),R(lF,"pad3d",()=>hW),R(lF,"pad4d",()=>hV),R(lF,"pool",()=>hG),R(lF,"pow",()=>lw),R(lF,"prelu",()=>hH),R(lF,"print",()=>iT),R(lF,"prod",()=>hq),R(lF,"raggedGather",()=>hj),R(lF,"raggedTensorToTensor",()=>hK),R(lF,"rand",()=>hX),R(lF,"randomGamma",()=>h8),R(lF,"randomNormal",()=>h7),R(lF,"randomStandardNormal",()=>h9),R(lF,"randomUniform",()=>pe),R(lF,"range",()=>pt),R(lF,"real",()=>oc),R(lF,"reciprocal",()=>pn),R(lF,"relu",()=>pr),R(lF,"relu6",()=>pa),R(lF,"reshape",()=>l5),R(lF,"reverse",()=>ps),R(lF,"reverse1d",()=>pi),R(lF,"reverse2d",()=>po),R(lF,"reverse3d",()=>pl),R(lF,"reverse4d",()=>pu),R(lF,"round",()=>ph),R(lF,"rsqrt",()=>pp),R(lF,"scalar",()=>ly),R(lF,"selu",()=>pd),R(lF,"separableConv2d",()=>pc),R(lF,"setdiff1dAsync",()=>pm),R(lF,"sigmoid",()=>ue),R(lF,"sign",()=>pg),R(lF,"sin",()=>py),R(lF,"sinh",()=>pb),R(lF,"slice",()=>ut),R(lF,"slice1d",()=>px),R(lF,"slice2d",()=>pk),R(lF,"slice3d",()=>pv),R(lF,"slice4d",()=>pw),R(lF,"softmax",()=>pI),R(lF,"softplus",()=>hp),R(lF,"spaceToBatchND",()=>hU),R(lF,"fft",()=>pS),R(lF,"ifft",()=>pN),R(lF,"irfft",()=>pT),R(lF,"rfft",()=>p$),R(lF,"split",()=>pC),R(lF,"sqrt",()=>lo),R(lF,"square",()=>ll),R(lF,"squaredDifference",()=>pE),R(lF,"squeeze",()=>pA),R(lF,"stack",()=>pR),R(lF,"step",()=>pF),R(lF,"stridedSlice",()=>pD),R(lF,"sub",()=>lI),R(lF,"sum",()=>uQ),R(lF,"tan",()=>p_),R(lF,"tanh",()=>un),R(lF,"tensor",()=>sa),R(lF,"tensor1d",()=>pO),R(lF,"tensor2d",()=>pM),R(lF,"tensor3d",()=>ov),R(lF,"tensor4d",()=>pL),R(lF,"tensor5d",()=>pz),R(lF,"tensor6d",()=>pP),R(lF,"tile",()=>u6),R(lF,"topk",()=>pB),R(lF,"truncatedNormal",()=>pW),R(lF,"unique",()=>pV),R(lF,"unsortedSegmentSum",()=>pU),R(lF,"unstack",()=>pG),R(lF,"upperBound",()=>pH),R(lF,"variable",()=>pq),R(lF,"where",()=>uO),R(lF,"whereAsync",()=>pX),R(lF,"zeros",()=>hT),R(lF,"zerosLike",()=>lu),R(lF,"op",()=>st),R(lF,"OP_SCOPE_SUFFIX",()=>se),R(lF,"fused",()=>ds);let lD=st({acos_:function(e){let t=a7(e,"x","acos");return aQ.runKernel(eQ,{x:t})}}),l_=st({acosh_:function(e){let t=a7(e,"x","acosh");return aQ.runKernel(e0,{x:t})}}),lO=st({addN_:function(e){j(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),j(e.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`);let t=e.map((e,t)=>a7(e,`tensors${t}`,"addN")),n=t[0];return t.forEach(e=>{if(e.dtype!==n.dtype)throw Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!Q(e.shape,n.shape))throw Error("All tensors passed to tf.addN() must have the same shape")}),aQ.runKernel(e2,t)}}),lM=st({all_:function(e,t=null,n=!1){let r=a7(e,"x","all","bool");return aQ.runKernel(e3,{x:r},{axis:t,keepDims:n})}}),lL=st({any_:function(e,t=null,n=!1){let r=a7(e,"x","any","bool");return aQ.runKernel(e4,{x:r},{axis:t,keepDims:n})}}),lz=st({argMax_:function(e,t=0){let n=a7(e,"x","argMax");return aQ.runKernel(e6,{x:n},{axis:t})}}),lP=st({argMin_:function(e,t=0){let n=a7(e,"x","argMin");return aQ.runKernel(e5,{x:n},{axis:t})}}),lB=st({asin_:function(e){let t=a7(e,"x","asin");return aQ.runKernel(e8,{x:t})}}),lW=st({asinh_:function(e){let t=a7(e,"x","asinh");return aQ.runKernel(e7,{x:t})}}),lV=st({atan_:function(e){let t=a7(e,"x","atan");return aQ.runKernel(e9,{x:t})}}),lU=st({atan2_:function(e,t){let n=a7(e,"a","atan2"),r=a7(t,"b","atan2");[n,r]=aH(n,r);let a={a:n,b:r};return aQ.runKernel(tt,a)}}),lG=st({atanh_:function(e){let t=a7(e,"x","atanh");return aQ.runKernel(te,{x:t})}});var lH={};function lq(e,t,n,r,a="NHWC",s){let i=e[3],o=[...t,i],l=l4(a);return lX(e,o,n,s,r,null,null,l)}function lj(e,t,n,r,a,s,i="channelsLast"){let o;let[l,u]=lJ(t);if("channelsLast"===i)o=[l,u,e[3],e[3]];else if("channelsFirst"===i)o=[l,u,e[1],e[1]];else throw Error(`Unknown dataFormat ${i}`);return lX(e,o,n,r,a,s,!1,i)}function lK(e,t,n,r,a,s,i="NDHWC"){let o,l;let[u,h,p]=lQ(t);if("NDHWC"===i)l="channelsLast",o=[u,h,p,e[4],e[4]];else if("NCDHW"===i)l="channelsFirst",o=[u,h,p,e[1],e[1]];else throw Error(`Unknown dataFormat ${i}`);return lY(e,o,n,r,a,!1,l,s)}function lX(e,t,n,r,a,s,i=!1,o="channelsLast"){let l,[u,h,p,d]=[-1,-1,-1,-1];if("channelsLast"===o)[u,h,p,d]=e;else if("channelsFirst"===o)[u,d,h,p]=e;else throw Error(`Unknown dataFormat ${o}`);let[c,f,,m]=t,[g,y]=lJ(n),[b,x]=lJ(r),k=l0(c,b),v=l0(f,x),{padInfo:w,outHeight:I,outWidth:S}=function(e,t,n,r,a,s,i,o,l){let u,h,p;if("number"==typeof e){let a=0===e?"VALID":"NUMBER";u={top:e,bottom:e,left:e,right:e,type:a};let i=function(e,t,n,r,a){null==r&&(r=lZ(e,t,n));let s=e[0],i=e[1],o=l1((s-t+2*r)/n+1,a),l=l1((i-t+2*r)/n+1,a);return[o,l]}([t,n],s,r,e,o);h=i[0],p=i[1]}else if("same"===e){h=Math.ceil(t/r),p=Math.ceil(n/a);let e=Math.max(0,(h-1)*r+s-t),o=Math.max(0,(p-1)*a+i-n),l=Math.floor(e/2),d=Math.floor(o/2);u={top:l,bottom:e-l,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},h=Math.ceil((t-s+1)/r),p=Math.ceil((n-i+1)/a);else if("object"==typeof e){let d="channelsLast"===l?e[1][0]:e[2][0],c="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1],g=0===d&&0===c&&0===f&&0===m?"VALID":"EXPLICIT";u={top:d,bottom:c,left:f,right:m,type:g},h=l1((t-s+d+c)/r+1,o),p=l1((n-i+f+m)/a+1,o)}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:u,outHeight:h,outWidth:p}}(a,h,p,g,y,k,v,s,o),N=i?m*d:m;return"channelsFirst"===o?l=[u,N,I,S]:"channelsLast"===o&&(l=[u,I,S,N]),{batchSize:u,dataFormat:o,inHeight:h,inWidth:p,inChannels:d,outHeight:I,outWidth:S,outChannels:N,padInfo:w,strideHeight:g,strideWidth:y,filterHeight:c,filterWidth:f,effectiveFilterHeight:k,effectiveFilterWidth:v,dilationHeight:b,dilationWidth:x,inShape:e,outShape:l,filterShape:t}}function lY(e,t,n,r,a,s=!1,i="channelsLast",o){let l,[u,h,p,d,c]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[u,h,p,d,c]=e;else if("channelsFirst"===i)[u,c,h,p,d]=e;else throw Error(`Unknown dataFormat ${i}`);let[f,m,g,,y]=t,[b,x,k]=lQ(n),[v,w,I]=lQ(r),S=l0(f,v),N=l0(m,w),T=l0(g,I),{padInfo:C,outDepth:$,outHeight:E,outWidth:A}=function(e,t,n,r,a,s,i,o,l,u,h){let p,d,c,f;if("number"==typeof e){let s=0===e?"VALID":"NUMBER";p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:s};let i=function(e,t,n,r,a,s){null==a&&(a=lZ(e,t,r));let i=e[0],o=e[1],l=e[2],u=l1((i-t+2*a)/r+1,s),h=l1((o-t+2*a)/r+1,s),p=l1((l-t+2*a)/r+1,s);return[u,h,p,1]}([t,n,r,1],o,0,a,e,h);d=i[0],c=i[1],f=i[2]}else if("same"===e){d=Math.ceil(t/a),c=Math.ceil(n/s),f=Math.ceil(r/i);let e=(d-1)*a+o-t,h=(c-1)*s+l-n,m=(f-1)*i+u-r,g=Math.floor(e/2),y=Math.floor(h/2),b=Math.floor(m/2);p={top:y,bottom:h-y,left:b,right:m-b,front:g,back:e-g,type:"SAME"}}else if("valid"===e)p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((t-o+1)/a),c=Math.ceil((n-l+1)/s),f=Math.ceil((r-u+1)/i);else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:p,outDepth:d,outHeight:c,outWidth:f}}(a,h,p,d,b,x,k,S,N,T,o),R=s?y*c:y;return"channelsFirst"===i?l=[u,R,$,E,A]:"channelsLast"===i&&(l=[u,$,E,A,R]),{batchSize:u,dataFormat:i,inDepth:h,inHeight:p,inWidth:d,inChannels:c,outDepth:$,outHeight:E,outWidth:A,outChannels:R,padInfo:C,strideDepth:b,strideHeight:x,strideWidth:k,filterDepth:f,filterHeight:m,filterWidth:g,effectiveFilterDepth:S,effectiveFilterHeight:N,effectiveFilterWidth:T,dilationDepth:v,dilationHeight:w,dilationWidth:I,inShape:e,outShape:l,filterShape:t}}function lZ(e,t,n,r=1){let a=l0(t,r);return Math.floor((e[0]*(n-1)-n+a)/2)}function lJ(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function lQ(e){return"number"==typeof e?[e,e,e]:e}function l0(e,t){return t<=1?e:e+(e-1)*(t-1)}function l1(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw Error(`Unknown roundingMode ${t}`)}}function l2(e){let[t,n,r]=lJ(e);return 1===t&&1===n&&1===r}function l3(e,t){return l2(e)||l2(t)}function l4(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw Error(`Unknown dataFormat ${e}`)}function l6(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)j(ee(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);else if("object"==typeof t)t.forEach(t=>{t.forEach(t=>{j(ee(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`)})});else throw Error(`Error in ${e}: Unknown padding parameter: ${t}`)}}R(lH,"computeDilation2DInfo",()=>lq),R(lH,"convertConv2DDataFormat",()=>l4),R(lH,"computeConv2DInfo",()=>lX),R(lH,"computePool2DInfo",()=>lj),R(lH,"computePool3DInfo",()=>lK),R(lH,"computeConv3DInfo",()=>lY),R(lH,"computeDefaultPad",()=>lZ),R(lH,"tupleValuesAreOne",()=>l2),R(lH,"eitherStridesOrDilationsAreOne",()=>l3),R(lH,"checkPadOnDimRoundingMode",()=>l6);let l5=st({reshape_:function(e,t){let n=a7(e,"x","reshape","string_or_numeric");return aQ.runKernel(nH,{x:n},{shape:t})}}),l8=st({avgPool_:function(e,t,n,r,a){let s=a7(e,"x","avgPool","float32");j(l3(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let i=s,o=!1;3===s.rank&&(o=!0,i=l5(s,[1,s.shape[0],s.shape[1],s.shape[2]])),j(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),l6("avgPool",r,a);let l={x:i},u=aQ.runKernel(tn,l,{filterSize:t,strides:n,pad:r,dimRoundingMode:a});return(u=iS(u,s.dtype),o)?l5(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),l7=st({avgPool3d_:function(e,t,n,r,a,s="NDHWC"){let i=a7(e,"x","avgPool3d","float32"),o=i,l=!1;4===i.rank&&(l=!0,o=l5(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),j(5===o.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`),j("NDHWC"===s,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),l6("avgPool3d",r,a);let u={x:o},h=aQ.runKernel(ta,u,{filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s});return(h=iS(h,o.dtype),l)?l5(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),l9=st({concat_:function(e,t=0){j(e.length>=1,()=>"Pass at least one tensor to concat");let n=a9(e,"tensors","concat","string_or_numeric");return("complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${e.dtype}. `)}),1===n.length)?iN(n[0]):aQ.runKernel(tg,n,{axis:t})}}),ue=st({sigmoid_:function(e){let t=a7(e,"x","sigmoid","float32");return aQ.runKernel(n7,{x:t})}}),ut=st({slice_:function(e,t,n){let r=a7(e,"x","slice","string_or_numeric");if(0===r.rank)throw Error("Slicing scalar is not possible");return aQ.runKernel(n4,{x:r},{begin:t,size:n})}}),un=st({tanh_:function(e){let t=a7(e,"x","tanh","float32");return aQ.runKernel(rb,{x:t})}}),ur=st({basicLSTMCell_:function(e,t,n,r,a,s){let i=a7(e,"forgetBias","basicLSTMCell"),o=a7(t,"lstmKernel","basicLSTMCell"),l=a7(n,"lstmBias","basicLSTMCell"),u=a7(r,"data","basicLSTMCell"),h=a7(a,"c","basicLSTMCell"),p=a7(s,"h","basicLSTMCell"),d=l9([u,p],1),c=iY(d,o),f=lr(c,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=ut(f,[0,0],y),x=ut(f,[0,g],y),k=ut(f,[0,2*g],y),v=ut(f,[0,3*g],y),w=lr(li(ue(b),un(x)),li(h,ue(lr(i,k)))),I=li(un(w),ue(v));return[w,I]}}),ua=st({batchToSpaceND_:function(e,t,n){let r=a7(e,"x","batchToSpaceND"),a=t.reduce((e,t)=>e*t);return j(r.rank>=1+t.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`),j(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),j(r.shape[0]%a==0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${a}`),aQ.runKernel(to,{x:r},{blockShape:t,crops:n})}}),us=st({batchNorm_:function(e,t,n,r,a,s){let i,o;null==s&&(s=.001);let l=a7(e,"x","batchNorm"),u=a7(t,"mean","batchNorm"),h=a7(n,"variance","batchNorm");null!=a&&(i=a7(a,"scale","batchNorm")),null!=r&&(o=a7(r,"offset","batchNorm")),j(u.rank===h.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),j(null==o||u.rank===o.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),j(null==i||u.rank===i.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let p=0===l.rank||1===l.rank?l5(l,[1,1,1,l.size]):2===l.rank?l5(l,[1,1,l.shape[0],l.shape[1]]):3===l.rank?l5(l,[1,l.shape[0],l.shape[1],l.shape[2]]):l,d={x:p,scale:i,offset:o,mean:u,variance:h},c={varianceEpsilon:s},f=aQ.runKernel(tZ,d,c);return l5(f,l.shape)}}),ui=st({batchNorm2d_:function(e,t,n,r,a,s){let i,o;let l=a7(e,"x","batchNorm"),u=a7(t,"mean","batchNorm"),h=a7(n,"variance","batchNorm");return null!=a&&(i=a7(a,"scale","batchNorm")),null!=r&&(o=a7(r,"offset","batchNorm")),j(2===l.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${l.rank}.`),j(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${u.rank}.`),j(2===h.rank||1===h.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${h.rank}.`),null!=i&&j(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${i.rank}.`),null!=o&&j(2===o.rank||1===o.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${o.rank}.`),us(l,u,h,o,i,s)}}),uo=st({batchNorm3d_:function(e,t,n,r,a,s){let i,o;let l=a7(e,"x","batchNorm"),u=a7(t,"mean","batchNorm"),h=a7(n,"variance","batchNorm");return null!=a&&(i=a7(a,"scale","batchNorm")),null!=r&&(o=a7(r,"offset","batchNorm")),j(3===l.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${l.rank}.`),j(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${u.rank}.`),j(3===h.rank||1===h.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${h.rank}.`),null!=i&&j(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${i.rank}.`),null!=o&&j(3===o.rank||1===o.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${o.rank}.`),us(l,u,h,o,i,s)}}),ul=st({batchNorm4d_:function(e,t,n,r,a,s){let i,o;let l=a7(e,"x","batchNorm"),u=a7(t,"mean","batchNorm"),h=a7(n,"variance","batchNorm");return null!=a&&(i=a7(a,"scale","batchNorm")),null!=r&&(o=a7(r,"offset","batchNorm")),j(4===l.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${l.rank}.`),j(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${u.rank}.`),j(4===h.rank||1===h.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${h.rank}.`),null!=i&&j(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${i.rank}.`),null!=o&&j(4===o.rank||1===o.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${o.rank}.`),us(l,u,h,o,i,s)}}),uu=st({bincount_:function(e,t,n){let r=a7(e,"x","bincount"),a=a7(t,"weights","bincount");return j("int32"===r.dtype,()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`),j(n>=0,()=>`size must be non-negative, but got ${n}.`),j(a.size===r.size||0===a.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${a.shape}.`),aQ.runKernel(tl,{x:r,weights:a},{size:n})}}),uh=st({broadcastArgs_:function(e,t){let n=a7(e,"s0","broadcastArgs","int32"),r=a7(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);return aQ.runKernel(th,{s0:n,s1:r})}}),up=st({broadcastTo_:function(e,t){let n=a7(e,"broadcastTo","x"),r=n.shape;if(t.some(e=>!(e>0)||e%1!=0))throw Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){let e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=l5(n,e)}let a=n.shape,s=Array.from(t);for(let e=t.length-1;e>=0;e--)if(a[e]===t[e])s[e]=1;else if(1!==n.shape[e])throw Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);let i=s.map((e,t)=>e>1?t:-1).filter(e=>e>=0);if(0===i.length)return iN(n);let o={x:n};return aQ.runKernel(rx,o,{reps:s})}}),ud=st({ceil_:function(e){let t=a7(e,"x","ceil","float32");return aQ.runKernel(td,{x:t})}}),uc=st({clipByValue_:function(e,t,n){let r=a7(e,"x","clipByValue");return(j(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`),t===n)?lk(r.shape,t,r.dtype):aQ.runKernel(tc,{x:r},{clipValueMin:t,clipValueMax:n})}}),uf=st({concat1d_:function(e){return l9(e,0)}}),um=st({concat2d_:function(e,t){return l9(e,t)}}),ug=st({concat3d_:function(e,t){return l9(e,t)}}),uy=st({concat4d_:function(e,t){return l9(e,t)}}),ub=st({conv2d_:function(e,t,n,r,a="NHWC",s=[1,1],i){let o=a7(e,"x","conv2d","float32"),l=a7(t,"filter","conv2d","float32"),u=o,h=!1;3===o.rank&&(h=!0,u=l5(o,[1,o.shape[0],o.shape[1],o.shape[2]])),j(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),j(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),l6("conv2d",r,i);let p="NHWC"===a?u.shape[3]:u.shape[1];j(p===l.shape[2],()=>`Error in conv2d: depth of input (${p}) must match input depth for filter ${l.shape[2]}.`),j(l3(n,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`);let d={x:u,filter:l},c=aQ.runKernel(ty,d,{strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:i});return h?l5(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),ux=st({conv1d_:function(e,t,n,r,a="NWC",s=1,i){let o=a7(e,"x","conv1d"),l=a7(t,"filter","conv1d"),u=o,h=!1;2===o.rank&&(h=!0,u=l5(o,[1,o.shape[0],o.shape[1]])),j(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),j(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),l6("conv1d",r,i),j(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),j(l3(n,s),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${s}'`),j("NWC"===a,()=>`Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`);let p=l5(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=l5(u,[u.shape[0],1,u.shape[1],u.shape[2]]),c=[1,n],f=[1,s],m=ub(d,p,c,r,"NHWC",f,i);return h?l5(m,[m.shape[2],m.shape[3]]):l5(m,[m.shape[0],m.shape[2],m.shape[3]])}}),uk=st({conv2DBackpropInput_:function(e,t,n,r,a,s="NHWC",i){j(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=l5(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),j(4===o.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`),j(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),j(4===n.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`);let h="NHWC"===s?o[3]:o[1],p="NHWC"===s?l.shape[3]:l.shape[1];j(h===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${h}) must match input depth for filter ${n.shape[2]}.`),j(p===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[3]}.`),l6("conv2dDerInput",a,i);let d={dy:l,filter:n},c={strides:r,pad:a,dataFormat:s,dimRoundingMode:i,inputShape:o},f=aQ.runKernel(tx,d,c);return u?l5(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),uv=st({conv2dTranspose_:function(e,t,n,r,a,s){let i=a7(e,"x","conv2dTranspose"),o=a7(t,"filter","conv2dTranspose");return uk(n,i,o,r,a,"NHWC",s)}}),uw=st({conv3d_:function(e,t,n,r,a="NDHWC",s=[1,1,1]){let i=a7(e,"x","conv3d"),o=a7(t,"filter","conv3d"),l=i,u=!1;4===i.rank&&(u=!0,l=l5(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),j(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),j(5===o.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`),j(l.shape[4]===o.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`),j(l3(n,s),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`),j("NDHWC"===a,()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`);let h={x:l,filter:o},p=aQ.runKernel(tk,h,{strides:n,pad:r,dataFormat:a,dilations:s});return u?l5(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),uI=st({conv3DBackpropInput_:function(e,t,n,r,a){j(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let s=e,i=t,o=!1;4===t.rank&&(o=!0,i=l5(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,e[0],e[1],e[2],e[3]]);let l=s[4],u=i.shape[4];j(5===s.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`),j(5===i.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`),j(5===n.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`),j(l===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`),j(u===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`);let h={dy:i,filter:n},p={pad:a,strides:r,inputShape:s},d=aQ.runKernel(tw,h,p);return o?l5(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),uS=st({conv3dTranspose_:function(e,t,n,r,a){let s=a7(e,"x","conv3dTranspose"),i=a7(t,"filter","conv3dTranspose");return uI(n,s,i,r,a)}}),uN=st({cos_:function(e){let t=a7(e,"x","cos","float32");return aQ.runKernel(tI,{x:t})}}),uT=st({cosh_:function(e){let t=a7(e,"x","cosh","float32");return aQ.runKernel(tS,{x:t})}}),uC=st({cumprod_:function(e,t=0,n=!1,r=!1){let a=a7(e,"x","cumprod");return aQ.runKernel(tN,{x:a},{axis:t,exclusive:n,reverse:r})}}),u$=st({cumsum_:function(e,t=0,n=!1,r=!1){let a=a7(e,"x","cumsum");return aQ.runKernel(tT,{x:a},{axis:t,exclusive:n,reverse:r})}}),uE=st({denseBincount_:function(e,t,n,r=!1){let a=a7(e,"x","denseBincount"),s=a7(t,"weights","denseBincount");return j("int32"===a.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`),j(a.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`),j(n>=0,()=>`size must be non-negative, but got ${n}.`),j(s.size===a.size||0===s.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${s.shape}.`),aQ.runKernel(t$,{x:a,weights:s},{size:n,binaryOutput:r})}}),uA=st({depthToSpace_:function(e,t,n="NHWC"){let r=a7(e,"x","depthToSpace","float32"),a="NHWC"===n?r.shape[1]:r.shape[2],s="NHWC"===n?r.shape[2]:r.shape[3],i="NHWC"===n?r.shape[3]:r.shape[1];return j(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),j(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${a} and ${t}  for depthToSpace with input shape
    ${r.shape}`),j(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying
    ${s} and ${t} for depthToSpace with input shape
        ${r.shape}`),j(i%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${r.shape}`),aQ.runKernel(tE,{x:r},{blockSize:t,dataFormat:n})}}),uR=st({depthwiseConv2d_:function(e,t,n,r,a="NHWC",s=[1,1],i){let o=a7(e,"x","depthwiseConv2d","float32"),l=a7(t,"filter","depthwiseConv2d","float32"),u=o,h=!1;3===o.rank&&(h=!0,u=l5(o,[1,o.shape[0],o.shape[1],o.shape[2]])),j(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),j(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);let p="NHWC"===a?u.shape[3]:u.shape[1];j(p===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${p}) must match the inChannels dimension in filter ${l.shape[2]}.`),l6("depthwiseConv2d",r,i);let d={x:u,filter:l},c=aQ.runKernel(tA,d,{strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:i});return h?l5(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),uF=st({diag_:function(e){let t=a7(e,"x","diag");return aQ.runKernel(tD,{x:t})}}),uD=st({dilation2d_:function(e,t,n,r,a=[1,1],s="NHWC"){let i=a7(e,"x","dilation2d"),o=a7(t,"filter","dilation2d");j(3===i.rank||4===i.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`),j(3===o.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`),j("NHWC"===s,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);let l=i,u=!1;3===i.rank&&(l=l5(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);let h={x:l,filter:o},p=aQ.runKernel(t_,h,{strides:n,pad:r,dilations:a});return u?l5(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),u_=st({equal_:function(e,t){let n=a7(e,"a","equal","string_or_numeric"),r=a7(t,"b","equal","string_or_numeric");[n,r]=aH(n,r),ox(n.shape,r.shape);let a={a:n,b:r};return aQ.runKernel(tV,a)}}),uO=st({where_:function(e,t,n){let r=a7(t,"a","where"),a=a7(n,"b","where"),s=a7(e,"condition","where","bool"),i=ox(ox(s.shape,r.shape),a.shape),o=up(s,i),l=up(r,i),u=up(a,i);return aQ.runKernel(n2,{condition:o,t:l,e:u})}}),uM=st({divNoNan_:function(e,t){let n=a7(e,"a","div"),r=a7(t,"b","div");[n,r]=aH(n,r);let a=ls(n,r),s=lu(a),i=u_(r,s);return uO(i,s,a)}}),uL=st({dot_:function(e,t){let n=a7(e,"t1","dot"),r=a7(t,"t2","dot");j((1===n.rank||2===n.rank)&&(1===r.rank||2===r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);let a=1===n.rank?n.size:n.shape[1],s=1===r.rank?r.size:r.shape[0];if(j(a===s,()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${s}.`),1===n.rank&&1===r.rank){let e=l5(n,[1,-1]),t=l5(r,[-1,1]),a=iY(e,t);return l5(a,[])}if(1===n.rank&&2===r.rank){let e=l5(n,[1,-1]),t=l5(r,[r.shape[0],r.shape[1]]),a=iY(e,t);return l5(a,[a.size])}if(2===n.rank&&1===r.rank){let e=l5(r,[-1,1]),t=iY(n,e);return l5(t,[t.size])}{let e=l5(r,[r.shape[0],r.shape[1]]),t=iY(n,e);return t}}}),uz=st({einsum_:function(e,...t){let n=t.map((e,t)=>a7(e,`tensors${t}`,"einsum"));return aQ.runKernel(tz,n,{equation:e})}}),uP=st({elu_:function(e){let t=a7(e,"x","elu","float32");return aQ.runKernel(tP,{x:t})}}),uB=st({erf_:function(e){let t=a7(e,"x","erf");j("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=iS(t,"float32"));let n={x:t};return aQ.runKernel(tW,n)}});var uW={};R(uW,"norm",()=>u0);var uV={};function uU(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function uG(e,t,n){let r=e.length+t.length,a=[],s=0,i=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?a.push(e[s++]):a.push(t[i++]);return a}function uH(e,t){let n=[],r=e.length;for(let a=0;a<r;a++)-1===t.indexOf(a)&&n.push(e[a]);let a=t.map(t=>e[t]);return[n,a]}function uq(e,t){let n=t.map(e=>1);return uG(e,n,t)}function uj(e,t,n){j(uU(t,n),()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`)}function uK(e,t){if(uU(e,t))return null;let n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach(e=>n.push(e)),n}function uX(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function uY(e,t){let n=[];for(let r=t-e;r<t;++r)n.push(r);return n}R(uV,"axesAreInnerMostDims",()=>uU),R(uV,"combineLocations",()=>uG),R(uV,"computeOutAndReduceShapes",()=>uH),R(uV,"expandShapeToKeepDim",()=>uq),R(uV,"assertAxesAreInnerMostDims",()=>uj),R(uV,"getAxesPermutation",()=>uK),R(uV,"getUndoAxesPermutation",()=>uX),R(uV,"getInnerMostAxes",()=>uY);let uZ=st({max_:function(e,t=null,n=!1){let r=a7(e,"x","max");return aQ.runKernel(nd,{x:r},{reductionIndices:t,keepDims:n})}}),uJ=st({min_:function(e,t=null,n=!1){let r=a7(e,"x","min");return aQ.runKernel(nk,{x:r},{axis:t,keepDims:n})}}),uQ=st({sum_:function(e,t=null,n=!1){let r=a7(e,"x","sum");"bool"===r.dtype&&(r=iS(r,"int32"));let a={x:r};return aQ.runKernel(rt,a,{axis:t,keepDims:n})}}),u0=st({norm_:function(e,t="euclidean",n=null,r=!1){e=a7(e,"x","norm");let a=function e(t,n,r=null){if(0===t.rank)return lN(t);if(1!==t.rank&&null===r)return e(l5(t,[-1]),n,r);if(1===t.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return uQ(lN(t),r);if(n===1/0)return uZ(lN(t),r);if(n===-1/0)return uJ(lN(t),r);if("euclidean"===n||2===n)return lo(uQ(lw(lN(t),ly(2,"int32")),r));throw Error(`Error in norm: invalid ord value: ${n}`)}if(Array.isArray(r)&&2===r.length){if(1===n)return uZ(uQ(lN(t),r[0]),r[1]-1);if(n===1/0)return uZ(uQ(lN(t),r[1]),r[0]);if(n===-1/0)return uJ(uQ(lN(t),r[1]),r[0]);if("fro"===n||"euclidean"===n)return lo(uQ(ll(t),r));throw Error(`Error in norm: invalid ord value: ${n}`)}throw Error(`Error in norm: invalid axis: ${r}`)}(e,t,n),s=a.shape;if(r){let t=eo(n,e.shape);s=uq(a.shape,t)}return l5(a,s)}}),u1=st({euclideanNorm_:function(e,t=null,n=!1){return u0(e,"euclidean",t,n)}}),u2=st({exp_:function(e){let t=a7(e,"x","exp");return aQ.runKernel(tU,{x:t})}}),u3=st({expandDims_:function(e,t=0){let n=a7(e,"x","expandDims","string_or_numeric");return j(t<=n.rank,()=>"Axis must be <= rank of the tensor"),aQ.runKernel(tG,{input:n},{dim:t})}}),u4=st({expm1_:function(e){let t=a7(e,"x","expm1");return aQ.runKernel(tH,{x:t})}}),u6=st({tile_:function(e,t){let n=a7(e,"x","tile","string_or_numeric");return j(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`),aQ.runKernel(rx,{x:n},{reps:t})}}),u5=st({eye_:function(e,t,n,r="float32"){null==t&&(t=e);let a=iI([e,t],r),s=e<=t?e:t;for(let e=0;e<s;++e)a.set(1,e,e);let i=l5(a.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return u6(u3(i,0),[n[0],1,1]);if(2===n.length)return u6(u3(u3(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return u6(u3(u3(u3(i,0),0),0),[n[0],n[1],n[2],1,1]);throw Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),u8=st({floor_:function(e){let t=a7(e,"x","floor","float32");return aQ.runKernel(tX,{x:t})}}),u7=st({gather_:function(e,t,n=0,r=0){let a=a7(e,"x","gather"),s=a7(t,"indices","gather","int32");return aQ.runKernel(tJ,{x:a,indices:s},{axis:n,batchDims:r})}}),u9=st({greater_:function(e,t){let n=a7(e,"a","greater","string_or_numeric"),r=a7(t,"b","greater","string_or_numeric");[n,r]=aH(n,r),ox(n.shape,r.shape);let a={a:n,b:r};return aQ.runKernel(t0,a)}}),he=st({greaterEqual_:function(e,t){let n=a7(e,"a","greaterEqual","string_or_numeric"),r=a7(t,"b","greaterEqual","string_or_numeric");[n,r]=aH(n,r),ox(n.shape,r.shape);let a={a:n,b:r};return aQ.runKernel(t1,a)}}),ht=st({isFinite_:function(e){let t=a7(e,"x","isFinite");return aQ.runKernel(t6,{x:t})}}),hn=st({isInf_:function(e){let t=a7(e,"x","isInf");return aQ.runKernel(t5,{x:t})}}),hr=st({isNaN_:function(e){let t=a7(e,"x","isNaN");return aQ.runKernel(t8,{x:t})}}),ha=st({leakyRelu_:function(e,t=.2){let n=a7(e,"x","leakyRelu");return aQ.runKernel(t7,{x:n},{alpha:t})}}),hs=st({less_:function(e,t){let n=a7(e,"a","less","string_or_numeric"),r=a7(t,"b","less","string_or_numeric");[n,r]=aH(n,r),ox(n.shape,r.shape);let a={a:n,b:r};return aQ.runKernel(t9,a)}}),hi=st({lessEqual_:function(e,t){let n=a7(e,"a","lessEqual","string_or_numeric"),r=a7(t,"b","lessEqual","string_or_numeric");[n,r]=aH(n,r),ox(n.shape,r.shape);let a={a:n,b:r};return aQ.runKernel(ne,a)}});function ho(e,t,n){if(n<=0)throw Error("The number of values should be positive.");return aQ.runKernel(nt,{},{start:e,stop:t,num:n})}let hl=st({localResponseNormalization_:function(e,t=5,n=1,r=1,a=.5){let s=a7(e,"x","localResponseNormalization");j(4===s.rank||3===s.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`),j(ee(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let i=s,o=!1;3===s.rank&&(o=!0,i=l5(s,[1,s.shape[0],s.shape[1],s.shape[2]]));let l={x:i},u=aQ.runKernel(nh,l,{depthRadius:t,bias:n,alpha:r,beta:a});return o?l5(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),hu=st({log_:function(e){let t=a7(e,"x","log","float32");return aQ.runKernel(nn,{x:t})}}),hh=st({log1p_:function(e){let t=a7(e,"x","log1p");return aQ.runKernel(nr,{x:t})}}),hp=st({softplus_:function(e){let t=a7(e,"x","softplus");return aQ.runKernel(n9,{x:t})}}),hd=st({logSigmoid_:function(e){let t=a7(e,"x","logSigmoid"),n=lm(e=>{let t=od(hp(od(e)));return{value:t,gradFunc:t=>{let n=li(t,ue(od(e)));return n}}});return n(t)}}),hc=st({logSoftmax_:function(e,t=-1){let n=a7(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);let r=lm((e,n)=>{let r=uZ(e,t,!0),a=lI(e,r),s=lI(iS(a,"float32"),hu(uQ(u2(a),t,!0)));return n([s]),{value:s,gradFunc:(e,n)=>{let[r]=n,a=u2(r);return lI(e,li(uQ(e,t,!0),a))}}});return r(n)}}),hf=st({logSumExp_:function(e,t=null,n=!1){let r=a7(e,"x","logSumExp"),a=eo(t,r.shape),s=uZ(r,a,!0),i=lI(r,s),o=u2(i),l=uQ(o,a),u=hu(l),h=lr(l5(s,u.shape),u);if(n){let e=uq(h.shape,a);return l5(h,e)}return h}}),hm=st({logicalAnd_:function(e,t){let n=a7(e,"a","logicalAnd","bool"),r=a7(t,"b","logicalAnd","bool");return ox(n.shape,r.shape),aQ.runKernel(na,{a:n,b:r})}}),hg=st({logicalNot_:function(e){let t=a7(e,"x","logicalNot","bool");return aQ.runKernel(ns,{x:t})}}),hy=st({logicalOr_:function(e,t){let n=a7(e,"a","logicalOr","bool"),r=a7(t,"b","logicalOr","bool");return ox(n.shape,r.shape),aQ.runKernel(ni,{a:n,b:r})}}),hb=st({logicalXor_:function(e,t){let n=a7(e,"a","logicalXor","bool"),r=a7(t,"b","logicalXor","bool");return ox(n.shape,r.shape),hm(hy(e,t),hg(hm(e,t)))}});var hx={};R(hx,"searchSorted",()=>hk);let hk=st({searchSorted_:function(e,t,n="left"){let r=a7(e,"sortedSequence","searchSorted"),a=a7(t,"values","searchSorted"),s=r.shape[r.shape.length-1],i=a.shape[a.shape.length-1],o=l5(r,[-1,s]),l=l5(a,[-1,i]);if(o.rank<2)throw Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==l.shape[0])throw Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(Z(l.shape)>=2147483648)throw Error("values tensor size must less than 2147483648");if(o.shape[1]>=2147483648)throw Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);return aQ.runKernel(n1,{sortedSequence:o,values:l},{side:n})}});function hv(e,t){return hk(e,t,"left")}let hw=st({maxPool_:function(e,t,n,r,a){let s=a7(e,"x","maxPool"),i=s,o=!1;3===s.rank&&(o=!0,i=l5(s,[1,s.shape[0],s.shape[1],s.shape[2]])),j(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),j(l3(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),l6("maxPool",r,a);let l={x:i},u=aQ.runKernel(nf,l,{filterSize:t,strides:n,pad:r,dimRoundingMode:a});return o?l5(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),hI=st({maxPool3d_:function(e,t=[1,1,1],n,r,a,s="NDHWC"){let i=a7(e,"x","maxPool3d"),o=i,l=!1;4===i.rank&&(l=!0,o=l5(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),j(5===o.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`),j("NDHWC"===s,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),l6("maxPool3d",r,a);let u={x:o},h=aQ.runKernel(ng,u,{filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s});return l?l5(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),hS=st({maxPoolWithArgmax_:function(e,t,n,r,a=!1){let s=a7(e,"x","maxPoolWithArgmax"),i=aQ.runKernel(nb,{x:s},{filterSize:t,strides:n,pad:r,includeBatchInIndex:a});return{result:i[0],indexes:i[1]}}}),hN=st({mean_:function(e,t=null,n=!1){let r=a7(e,"x","mean");return aQ.runKernel(nx,{x:r},{axis:t,keepDims:n})}});function hT(e,t="float32"){if("complex64"===t){let t=hT(e,"float32"),n=hT(e,"float32");return sn(t,n)}let n=eT(Z(e),t);return aQ.makeTensor(n,e,t)}function hC(e,t="float32"){if("complex64"===t){let t=hC(e,"float32"),n=hT(e,"float32");return sn(t,n)}let n=eN(Z(e),t);return aQ.makeTensor(n,e,t)}function h$(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=a7(e,"x","meshgrid",e instanceof az?e.dtype:"float32");if(void 0===t)return[r];let a=a7(t,"y","meshgrid",t instanceof az?t.dtype:"float32"),s=Z(r.shape),i=Z(a.shape);return"xy"===n?(r=l5(r,[1,-1]),a=l5(a,[-1,1]),[iY(hC([i,1],r.dtype),r),iY(a,hC([1,s],a.dtype))]):(r=l5(r,[-1,1]),a=l5(a,[1,-1]),[iY(r,hC([1,i],r.dtype)),iY(hC([s,1],a.dtype),a)])}let hE=st({minimum_:function(e,t){let n=a7(e,"a","minimum"),r=a7(t,"b","minimum");[n,r]=aH(n,r),"bool"===n.dtype&&(n=iS(n,"int32"),r=iS(r,"int32")),ox(n.shape,r.shape);let a={a:n,b:r};return aQ.runKernel(nv,a)}}),hA=st({mirrorPad_:function(e,t,n){j("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);let r=a7(e,"x","mirrorPad");if(0===r.rank)throw Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");j(t.length===r.rank,()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`);let a="reflect"===n?1:0;for(let e=0;e<r.rank;e++)j(2===t[e].length,()=>"Invalid number of paddings. Must be length of 2 each."),j(t[e][0]>=0&&t[e][0]<=r.shape[e]-a&&t[e][1]>=0&&t[e][1]<=r.shape[e]-a,()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-a} or less than 0 for input of shape ${r.shape}`);return aQ.runKernel(nw,{x:r},{paddings:t,mode:n})}}),hR=st({mod_:function(e,t){let n=a7(e,"a","mod"),r=a7(t,"b","mod");[n,r]=aH(n,r);let a={a:n,b:r};return aQ.runKernel(nI,a)}}),hF=st({moments_:function(e,t=null,n=!1){e=a7(e,"x","moments");let r=eo(t,e.shape),a=hN(e,r,n),s=a.shape;n||(s=uq(a.shape,r));let i=ll(lI(iS(e,"float32"),l5(a,s))),o=hN(i,r,n);return{mean:a,variance:o}}}),hD=st({multiRNNCell_:function(e,t,n,r){let a=a7(t,"data","multiRNNCell"),s=a9(n,"c","multiRNNCell"),i=a9(r,"h","multiRNNCell"),o=a,l=[];for(let t=0;t<e.length;t++){let n=e[t](o,s[t],i[t]);l.push(n[0]),l.push(n[1]),o=n[1]}let u=[],h=[];for(let e=0;e<l.length;e+=2)u.push(l[e]),h.push(l[e+1]);return[u,h]}}),h_=st({multinomial_:function(e,t,n,r=!1){let a=a7(e,"logits","multinomial"),s=a.size,i=a.rank;if(s<2)throw Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(i>2)throw Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();let o=1===i?l5(a,[1,-1]):a,l={numSamples:t,seed:n,normalized:r},u=aQ.runKernel(nS,{logits:o},l);return 1===i?l5(u,[u.size]):u}}),hO=st({notEqual_:function(e,t){let n=a7(e,"a","notEqual","string_or_numeric"),r=a7(t,"b","notEqual","string_or_numeric");[n,r]=aH(n,r),ox(n.shape,r.shape);let a={a:n,b:r};return aQ.runKernel(nC,a)}}),hM=st({onesLike_:function(e){let t=a7(e,"x","onesLike");return aQ.runKernel(nR,{x:t})}}),hL=st({outerProduct_:function(e,t){let n=a7(e,"v1","outerProduct"),r=a7(t,"v2","outerProduct");j(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);let a=l5(n,[-1,1]),s=l5(r,[1,-1]);return iY(a,s)}}),hz=st({pad_:function(e,t,n=0){let r=a7(e,"x","pad");if(0===r.rank)throw Error("pad(scalar) is not defined. Pass non-scalar to pad");return aQ.runKernel(n_,{x:r},{paddings:t,constantValue:n})}}),hP=st({pad1d_:function(e,t,n=0){return j(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),hz(e,[t],n)}}),hB=st({pad2d_:function(e,t,n=0){return j(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),hz(e,t,n)}}),hW=st({pad3d_:function(e,t,n=0){return j(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),hz(e,t,n)}}),hV=st({pad4d_:function(e,t,n=0){return j(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),hz(e,t,n)}}),hU=st({spaceToBatchND_:function(e,t,n){let r=a7(e,"x","spaceToBatchND");return j(r.rank>=1+t.length,()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`),j(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),j(r.shape.reduce((e,r,a)=>a>0&&a<=t.length?e&&(r+n[a-1][0]+n[a-1][1])%t[a-1]==0:e,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`),aQ.runKernel(rn,{x:r},{blockShape:t,paddings:n})}}),hG=st({pool_:function(e,t,n,r,a,s,i){let o;null==a&&(a=[1,1]),null==s&&(s=1),0===r&&(r="valid");let l=a7(e,"x","maxPool"),u=l,h=!1;3===l.rank&&(h=!0,u=l5(l,[1,l.shape[0],l.shape[1],l.shape[2]])),j(l3(s,a),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`);let p=lj(u.shape,t,s,a,r),d=[p.dilationHeight,p.dilationWidth];o="same"===r?function(e,t){let n=e.map((e,n)=>e+(e-1)*(t[n]-1)),r=n.map(e=>e-1),a=r.map(e=>Math.floor(e/2)),s=r.map((e,t)=>e-a[t]);return r.map((e,t)=>[a[t],s[t]])}([p.filterHeight,p.filterWidth],d):[[0,0],[0,0]];let c=1===d[0]&&1===d[1],[f,m]=function(e,t,n){let r=n.map(e=>e[0]),a=n.map(e=>e[1]),s=e.concat(r,a),i=t.map((e,t)=>(e-s[t]%e)%e),o=a.map((e,t)=>e+i[t]),l=t.map((e,t)=>[r[t],o[t]]),u=t.map((e,t)=>[0,i[t]]);return[l,u]}([p.inHeight,p.inWidth],d,o),g=c?r:"valid",y=c?u:hU(u,d,f),b="avg"===n?()=>l8(y,t,s,g,i):()=>hw(y,t,s,g,i),x=b(),k=c?x:ua(x,d,m);return h?l5(k,[k.shape[1],k.shape[2],k.shape[3]]):k}}),hH=st({prelu_:function(e,t){let n=a7(e,"x","prelu"),r=a7(t,"alpha","prelu");return aQ.runKernel(nL,{x:n,alpha:r})}}),hq=st({prod_:function(e,t=null,n=!1){let r=a7(e,"x","prod");"bool"===r.dtype&&(r=iS(r,"int32"));let a={x:r};return aQ.runKernel(nz,a,{axis:t,keepDims:n})}}),hj=st({raggedGather_:function(e,t,n,r){let a=e.map((e,t)=>a7(e,`tensors${t}`,"raggedGather","int32")),s=a7(t,"paramsDenseValues","raggedGather"),i=a7(n,"indices","raggedGather","int32"),o=aQ.runKernel(nP,{paramsNestedSplits:a,paramsDenseValues:s,indices:i},{outputRaggedRank:r});return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}}),hK=st({raggedTensorToTensor_:function(e,t,n,r,a){let s=a7(e,"shape","raggedTensorToTensor","int32"),i=a7(t,"values","raggedTensorToTensor"),o=a7(n,"defaultValue","raggedTensorToTensor",i.dtype),l=r.map((e,t)=>a7(e,`tensors${t}`,"raggedTensorToTensor","int32"));return aQ.runKernel(nB,{shape:s,values:i,defaultValue:o,rowPartitionTensors:l},{rowPartitionTypes:a})}}),hX=st({rand_:function(e,t,n){let r=Z(e),a=null;if(null==n||"float32"===n)a=new Float32Array(r);else if("int32"===n)a=new Int32Array(r);else if("bool"===n)a=new Uint8Array(r);else throw Error(`Unknown data type ${n}`);for(let e=0;e<r;e++)a[e]=t();return aQ.makeTensor(a,e,n)}});var hY={},hZ=_("gj6Et"),hJ=_("4gDjz"),hQ=_("HLBv4"),h0=_("ktaoY"),h1=_("gBs5C"),h2=_("ktLSh"),h3={};!function(e,t,n){var r,a="random",s=n.pow(256,6),i=n.pow(2,52),o=2*i;function l(l,c,f){var m=[],g=p(function e(t,n){var r,a=[],s=typeof t;if(n&&"object"==s)for(r in t)try{a.push(e(t[r],n-1))}catch(e){}return a.length?a:"string"==s?t:t+"\x00"}((c=!0==c?{entropy:!0}:c||{}).entropy?[l,d(t)]:null==l?function(){try{var n;return r&&(n=r.randomBytes)?n=n(256):(n=new Uint8Array(256),(e.crypto||e.msCrypto).getRandomValues(n)),d(n)}catch(n){var a=e.navigator,s=a&&a.plugins;return[+new Date,e,s,e.screen,d(t)]}}():l,3),m),y=new u(m),b=function(){for(var e=y.g(6),t=s,n=0;e<i;)e=(e+n)*256,t*=256,n=y.g(1);for(;e>=o;)e/=2,t/=2,n>>>=1;return(e+n)/t};return b.int32=function(){return 0|y.g(4)},b.quick=function(){return y.g(4)/4294967296},b.double=b,p(d(y.S),t),(c.pass||f||function(e,t,r,s){return(s&&(s.S&&h(s,y),e.state=function(){return h(y,{})}),r)?(n[a]=e,t):e})(b,g,"global"in c?c.global:this==n,c.state)}function u(e){var t,n=e.length,r=this,a=0,s=r.i=r.j=0,i=r.S=[];for(n||(e=[n++]);a<256;)i[a]=a++;for(a=0;a<256;a++)i[a]=i[s=255&s+e[a%n]+(t=i[a])],i[s]=t;(r.g=function(e){for(var t,n=0,a=r.i,s=r.j,i=r.S;e--;)t=i[a=255&a+1],n=256*n+i[255&(i[a]=i[s=255&s+t])+(i[s]=t)];return r.i=a,r.j=s,n})(256)}function h(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function p(e,t){for(var n,r=e+"",a=0;a<r.length;)t[255&a]=255&(n^=19*t[255&a])+r.charCodeAt(a++);return d(t)}function d(e){return String.fromCharCode.apply(0,e)}if(p(n.random(),t),h3){h3=l;try{r=_("foUwZ")}catch(e){}}else"function"==typeof define&&define.amd?define(function(){return l}):n["seed"+a]=l}("undefined"!=typeof self?self:h3,[],Math),h3.alea=hZ,h3.xor128=hJ,h3.xorwow=hQ,h3.xorshift7=h0,h3.xor4096=h1,h3.tychei=h2,hY=h3;class h4{constructor(e,t,n,r,a){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);let s=a||Math.random();this.random=hY.alea(s.toString())}nextValue(){let e,t;if(!isNaN(this.nextVal)){let e=this.nextVal;return this.nextVal=NaN,e}let n=!1;for(;!n;){let r,a,s;do s=(r=2*this.random()-1)*r+(a=2*this.random()-1)*a;while(s>=1||0===s)let i=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*i,t=this.mean+this.stdDev*a*i,(!this.truncated||this.isValidTruncated(e))&&(n=!0)}return(!this.truncated||this.isValidTruncated(t))&&(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class h6{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;let a=r||Math.random();this.randu=hY.alea(a.toString()),this.randn=new h4(0,1,n,!1,this.randu()),e<1?this.d=e+2/3:this.d=e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,a,s;for(;;){do r=this.randn.nextValue(),s=1+this.c*r;while(s<=0)if(s*=s*s,t=1-.331*(e=r*r)*e,n=.5*e+this.d*(1-s+Math.log(s)),(a=this.randu())<t||Math.log(a)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class h5{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=hY.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}let h8=st({randomGamma_:function(e,t,n=1,r="float32",a){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw Error(`Unsupported data type ${r}`);let s=new h6(t,n,r,a),i=iI(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=s.nextValue();return i.toTensor()}}),h7=st({randomNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw Error(`Unsupported data type ${r}`);let s=new h4(t,n,r,!1,a),i=iI(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=s.nextValue();return i.toTensor()}}),h9=st({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw Error(`Unsupported data type ${t}`);return h7(e,0,1,t,n)}}),pe=st({randomUniform_:function(e,t=0,n=1,r="float32",a){let s=iI(e,r),i=new h5(t,n,null,a);for(let e=0;e<s.values.length;e++)s.values[e]=i.nextValue();return s.toTensor()}});function pt(e,t,n=1,r="float32"){if(0===n)throw Error("Cannot have a step of zero");return aQ.runKernel(nW,{},{start:e,stop:t,step:n,dtype:r})}let pn=st({reciprocal_:function(e){let t=a7(e,"x","reciprocal");return aQ.runKernel(nU,{x:t})}}),pr=st({relu_:function(e){let t=a7(e,"x","relu");return aQ.runKernel(nG,{x:t})}}),pa=st({relu6_:function(e){let t=a7(e,"x","relu6");return aQ.runKernel(nY,{x:t})}}),ps=st({reverse_:function(e,t){let n=a7(e,"x","reverse");return aQ.runKernel(nZ,{x:n},{dims:t})}}),pi=st({reverse1d_:function(e){let t=a7(e,"x","reverse");return j(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),ps(t,0)}}),po=st({reverse2d_:function(e,t){let n=a7(e,"x","reverse");return j(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),ps(n,t)}}),pl=st({reverse3d_:function(e,t){let n=a7(e,"x","reverse");return j(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),ps(n,t)}}),pu=st({reverse4d_:function(e,t){let n=a7(e,"x","reverse");return j(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),ps(n,t)}}),ph=st({round_:function(e){let t=a7(e,"x","round");return aQ.runKernel(nJ,{x:t})}}),pp=st({rsqrt_:function(e){let t=a7(e,"x","rsqrt","float32");return aQ.runKernel(nQ,{x:t})}}),pd=st({selu_:function(e){let t=a7(e,"x","selu");return aQ.runKernel(n3,{x:t})}}),pc=st({separableConv2d_:function(e,t,n,r,a,s=[1,1],i="NHWC"){let o=a7(e,"x","separableConv2d"),l=a7(t,"depthwiseFilter","separableConv2d"),u=a7(n,"pointwiseFilter","separableConv2d"),h=o,p=!1;if(3===o.rank&&(p=!0,h=l5(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");j(4===h.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${h.rank}.`),j(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),j(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),j(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),j(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);let d=l.shape[2],c=l.shape[3];j(u.shape[2]===d*c,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*c}, but got ${u.shape[2]}.`);let f=uR(h,l,r,a,i,s),m=ub(f,u,1,"valid",i);return p?l5(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});async function pf(e,t){let n=a7(e,"x","setdiff1d"),r=a7(t,"y","setdiff1d");j(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),j(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),j(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);let a=await n.data(),s=await r.data(),i=new Set(s),o=0;for(let e=0;e<a.length;e++)!i.has(a[e])&&o++;let l=new aO([o],n.dtype),u=new aO([o],"int32");for(let e=0,t=0;e<a.length;e++)!i.has(a[e])&&(l.values[t]=a[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]}let pm=pf,pg=st({sign_:function(e){let t=a7(e,"x","sign");return aQ.runKernel(n8,{x:t})}}),py=st({sin_:function(e){let t=a7(e,"x","sin","float32");return aQ.runKernel(n6,{x:t})}}),pb=st({sinh_:function(e){let t=a7(e,"x","sinh");return aQ.runKernel(n5,{x:t})}}),px=st({slice1d_:function(e,t,n){let r=a7(e,"x","slice1d");return j(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),ut(r,[t],[n])}}),pk=st({slice2d_:function(e,t,n){let r=a7(e,"x","slice2d");return j(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),ut(r,t,n)}}),pv=st({slice3d_:function(e,t,n){let r=a7(e,"x","slice3d");return j(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),ut(r,t,n)}}),pw=st({slice4d_:function(e,t,n){let r=a7(e,"x","slice4d");return j(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),ut(r,t,n)}}),pI=st({softmax_:function(e,t=-1){let n=a7(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);let r={dim:t};return aQ.runKernel(ra,{logits:n},r)}}),pS=st({fft_:function(e){return j("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`),aQ.runKernel(tq,{input:e})}}),pN=st({ifft_:function(e){return j("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`),aQ.runKernel(t3,{input:e})}}),pT=st({irfft_:function(e){let t;let n=e.shape[e.shape.length-1],r=e.size/n;if(n<=2){let a=l5(e,[r,n]);t=pN(a)}else{let a=[r,2*(n-1)],s=l5(oc(e),[r,n]),i=l5(op(e),[r,n]),o=ps(ut(s,[0,1],[r,n-2]),1),l=li(ps(ut(i,[0,1],[r,n-2]),1),ly(-1)),u=l9([s,o],1),h=l9([i,l],1),p=l5(sn(u,h),[a[0],a[1]]);t=pN(p)}if(t=oc(t),3===e.rank&&0!==e.shape[0]){let n=t,r=e.shape[0];t=l5(t,[r,t.shape[0]/r,t.shape[1]]),n.dispose()}return t}}),pC=st({split_:function(e,t,n=0){let r=a7(e,"x","split");return aQ.runKernel(rr,{x:r},{numOrSizeSplits:t,axis:n})}}),p$=st({rfft_:function(e,t){let n;j("float32"===e.dtype,()=>`The dtype for rfft() must be real value but got ${e.dtype}`);let r=e.shape[e.shape.length-1],a=e.size/r;if(null!=t&&t<r){let a=e.shape.map(e=>0),s=e.shape.map(e=>e);s[e.shape.length-1]=t,n=ut(e,a,s),r=t}else if(null!=t&&t>r){let a=e.shape.map(e=>e);a[e.shape.length-1]=t-r,n=l9([e,hT(a)],e.shape.length-1),r=t}else n=e;let s=lu(n),i=l5(sn(n,s),[a,r]),o=pS(i),l=Math.floor(r/2)+1,u=oc(o),h=op(o),p=pC(u,[l,r-l],u.shape.length-1),d=pC(h,[l,r-l],h.shape.length-1),c=n.shape.slice();return c[n.shape.length-1]=l,l5(sn(p[0],d[0]),c)}}),pE=st({squaredDifference_:function(e,t){let n=a7(e,"a","squaredDifference"),r=a7(t,"b","squaredDifference");[n,r]=aH(n,r),ox(n.shape,r.shape);let a={a:n,b:r};return aQ.runKernel(rh,a,{})}}),pA=st({squeeze_:function(e,t){let n=a7(e,"x","squeeze","string_or_numeric");return l5(n,el(n.shape,t).newShape)}}),pR=st({stack_:function(e,t=0){let n=a9(e,"tensors","stack","string_or_numeric");return j(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&j(t<=n[0].rank,()=>"Axis must be <= rank of the tensor"),aQ.runKernel(nD,n,{axis:t})}}),pF=st({step_:function(e,t=0){let n=a7(e,"x","step");return aQ.runKernel(r$,{x:n},{alpha:t})}}),pD=st({stridedSlice_:function(e,t,n,r,a=0,s=0,i=0,o=0,l=0){let u=a7(e,"x","stridedSlice","string_or_numeric");return aQ.runKernel(rd,{x:u},{begin:t,end:n,strides:r,beginMask:a,endMask:s,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l})}}),p_=st({tan_:function(e){let t=a7(e,"x","tan","float32");return aQ.runKernel(ry,{x:t})}});function pO(e,t){X(e);let n=a5(e,t);if(1!==n.length)throw Error("tensor1d() requires values to be a flat/TypedArray");return sr(e,null,n,t)}function pM(e,t,n){if(X(e),null!=t&&2!==t.length)throw Error("tensor2d() requires shape to have two numbers");let r=a5(e,n);if(2!==r.length&&1!==r.length)throw Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return sr(e,t,r,n)}function pL(e,t,n){if(X(e),null!=t&&4!==t.length)throw Error("tensor4d() requires shape to have four numbers");let r=a5(e,n);if(4!==r.length&&1!==r.length)throw Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw Error("tensor4d() requires shape to be provided when `values` are a flat array");return sr(e,t,r,n)}function pz(e,t,n){if(X(e),null!=t&&5!==t.length)throw Error("tensor5d() requires shape to have five numbers");let r=a5(e,n);if(5!==r.length&&1!==r.length)throw Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw Error("tensor5d() requires shape to be provided when `values` are a flat array");return sr(e,t,r,n)}function pP(e,t,n){if(X(e),null!=t&&6!==t.length)throw Error("tensor6d() requires shape to have six numbers");let r=a5(e,n);if(6!==r.length&&1!==r.length)throw Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||r,sr(e,t,r,n)}let pB=st({topk_:function(e,t=1,n=!0){let r=a7(e,"x","topk");if(0===r.rank)throw Error("topk() expects the input to be of rank 1 or higher");let a=r.shape[r.shape.length-1];if(t<0)throw Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>a)throw Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${t}`);let[s,i]=aQ.runKernel(rk,{x:r},{k:t,sorted:n});return{values:s,indices:i}}}),pW=st({truncatedNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw Error("Unsupported data type $ { dtype }");let s=new h4(t,n,r,!0,a),i=iI(e,r);for(let e=0;e<i.values.length;e++)i.values[e]=s.nextValue();return i.toTensor()}}),pV=st({unique_:function(e,t=0){let n=a7(e,"x","unique","string_or_numeric");j(n.rank>0,()=>"The input tensor must be at least 1D");let[r,a]=aQ.runKernel(rI,{x:n},{axis:t});return{values:r,indices:a}}}),pU=st({unsortedSegmentSum_:function(e,t,n){let r=a7(e,"x","unsortedSegmentSum"),a=a7(t,"segmentIds","unsortedSegmentSum","int32");return j(ee(n),()=>"numSegments must be of dtype int"),aQ.runKernel(rN,{x:r,segmentIds:a},{numSegments:n})}}),pG=st({unstack_:function(e,t=0){let n=a7(e,"x","unstack","string_or_numeric");return j(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`),aQ.runKernel(rS,{value:n},{axis:t})}});function pH(e,t){return hk(e,t,"right")}function pq(e,t=!0,n,r){return aQ.makeVariable(e,t,n,r)}function pj(e,t){let n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);let r=iI(e,"int32"),a=iI([n.length,e.length],"int32");for(let t=0;t<n.length;t++){let s=r.indexToLoc(n[t]),i=t*e.length;a.values.set(s,i)}return a.toTensor()}async function pK(e){let t=a7(e,"condition","whereAsync","bool"),n=await t.data(),r=pj(t.shape,n);return e!==t&&t.dispose(),r}let pX=pK;var pY={};async function pZ(e,t,n){let r=a7(e,"tensor","boolMask"),a=a7(t,"mask","boolMask","bool"),s=null==n?0:n,i=a.rank,o=r.shape;j(i>0,()=>"mask cannot be scalar"),K(o.slice(s,s+i),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let e=s;e<s+i;e++)l*=o[e];let u=o.slice(0,s).concat([l],o.slice(s+i)),h=l5(r,u),p=l5(a,[-1]),d=await pX(p),c=pA(d,[1]),f=u7(h,c,s);return e!==r&&r.dispose(),t!==a&&a.dispose(),c.dispose(),h.dispose(),p.dispose(),d.dispose(),f}R(pY,"booleanMaskAsync",()=>pJ);let pJ=pZ;var pQ={};R(pQ,"movingAverage",()=>p0);let p0=st({movingAverage_:function(e,t,n,r,a=!0){let s=a7(e,"v","movingAverage"),i=a7(t,"x","movingAverage"),o=a7(n,"decay","movingAverage");aq(s,i),j(Q(s.shape,i.shape),()=>"Shape mismatch in v and x");let l=ly(1),u=lI(l,o),h=li(lI(i,s),u);if(a){j(null!=r,()=>"When using zeroDebias: true, step is required.");let e=a7(r,"step","movingAverage");h=ls(h,lI(l,lw(o,e)))}return lr(s,h)}});var p1={};R(p1,"scatterND",()=>p2);let p2=st({scatterND_:function(e,t,n){let r=a7(e,"indices","scatterND","int32"),a=a7(t,"updates","scatterND");return oA(a,r,n),aQ.runKernel(n0,{indices:r,updates:a},{shape:n})}});var p3={};R(p3,"sparseToDense",()=>p4);let p4=st({sparseToDense_:function(e,t,n,r=0){let a=a7(e,"sparseIndices","sparseToDense","int32"),s=a7(t,"sparseValues","sparseToDense","string_or_numeric"),i=a7(r,"defaultValue","sparseToDense",s.dtype);return!function(e,t,n,r){if("int32"!==e.dtype)throw Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);let a=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);let i=t.size;if(!(0===t.rank||1===t.rank&&i===a))throw Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==r.dtype)throw Error("sparseValues.dtype must match defaultValues.dtype")}(a,s,n,i),aQ.runKernel(ru,{sparseIndices:a,sparseValues:s,defaultValue:i},{outputShape:n})}});var p6={};R(p6,"gatherND",()=>p5);let p5=st({gatherND_:function(e,t){let n=a7(t,"indices","gatherND","int32"),r=a7(e,"x","gatherND","string_or_numeric");return aQ.runKernel(tQ,{params:r,indices:n})}});var p8={};R(p8,"dropout",()=>p7);let p7=st({dropout_:function(e,t,n,r){let a=a7(e,"x","dropout");if(j("float32"===a.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`),j(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof az?a.clone():a;let s=function(e,t){if(null==t)return e.shape.slice();if(Q(e.shape,t))return t;if(e.shape.length===t.length){let n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(a,n),i=1-t,o=ls(u8(lr(pe(s,0,1,"float32",r),i)),i);return li(a,o)}});var p9={};function de(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function dt(e,t,n){let r=1-e%2,a=new Float32Array(e);for(let s=0;s<e;++s){let i=2*Math.PI*s/(e+r-1);a[s]=t-n*Math.cos(i)}return pO(a,"float32")}R(p9,"enclosingPowerOfTwo",()=>de),R(p9,"cosineWindow",()=>dt);var dn={};async function dr(e,t,n=1){let r=a7(e,"predictions","inTopK"),a=a7(t,"targets","inTopK");j(r.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`),j(r.rank-1===a.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${a.rank}`),K(r.shape.slice(0,r.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");let s=r.shape[r.shape.length-1];j(n>0&&n<=s,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`);let i=await r.data(),o=await a.data(),[l,u]=[i.length/s,s],h=eu("bool",l);for(let e=0;e<l;e++){let t=e*u,r=i.subarray(t,t+u),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort((e,t)=>t.value-e.value),h[e]=0;for(let t=0;t<n;t++)if(a[t].index===o[e]){h[e]=1;break}}return e!==r&&r.dispose(),t!==a&&a.dispose(),sa(h,a.shape,"bool")}R(dn,"inTopKAsync",()=>da);let da=dr;var ds={};R(ds,"conv2d",()=>dc),R(ds,"depthwiseConv2d",()=>dg),R(ds,"matMul",()=>dy);let di=st({conv2DBackpropFilter_:function(e,t,n,r,a,s="NHWC",i){let o=e;3===e.rank&&(o=l5(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=l5(t,[1,t.shape[0],t.shape[1],t.shape[2]])),j(4===o.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`),j(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),j(4===n.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`);let u="NHWC"===s?o.shape[3]:o.shape[1],h="NHWC"===s?l.shape[3]:l.shape[1];j(u===n[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`),j(h===n[3],()=>`Error in conv2dDerFilter: depth of dy (${h}) must match output depth for filter (${n[3]}).`),l6("conv2dDerFilter",a,i);let p={x:o,dy:l};return aQ.runKernel(tb,p,{strides:r,pad:a,dataFormat:s,dimRoundingMode:i,filterShape:n})}});var dl={};function du(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return li(e,pF(t));throw Error(`Cannot compute gradient for fused activation ${n}.`)}function dh(e,t){let n=t,r=ob(e.shape,t.shape);return r.length>0&&(n=uQ(n,r)),l5(n,e.shape)}function dp(e,t,n,r){if("linear"===t)return e;if("relu"===t)return pr(e);if("elu"===t)return uP(e);if("relu6"===t)return pa(e);if("prelu"===t)return hH(e,n);if("leakyrelu"===t)return ha(e,r);if("sigmoid"===t)return ue(e);throw Error(`Unknown fused activation ${t}.`)}R(dl,"getFusedDyActivation",()=>du),R(dl,"getFusedBiasGradient",()=>dh),R(dl,"applyActivation",()=>dp),R(dl,"shouldFuse",()=>dd);let dd=(e,t)=>!(e>0)||"linear"===t,dc=st({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:h}){let p,d;if(l=l||"linear",!1===dd(aQ.state.gradientDepth,l)){j("NHWC"===a,()=>`Error in fused conv2d: got dataFormat of ${a} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let p=ub(e,t,n,r,a,s,i);return null!=o&&(p=lr(p,o)),dp(p,l,u,h)}let c=a7(e,"x","conv2d","float32"),f=a7(t,"filter","conv2d","float32"),m=c,g=!1;3===c.rank&&(g=!0,m=l5(c,[1,c.shape[0],c.shape[1],c.shape[2]])),j(4===m.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${m.rank}.`),j(4===f.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${f.rank}.`),l6("fused conv2d",r,i);let y="NHWC"===a?m.shape[3]:m.shape[1];j(f.shape[2]===y,()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${f.shape[2]}.`),j(l3(n,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`);let b=lX(m.shape,f.shape,n,s,r,i);if(null!=o&&(p=a7(o,"bias","fused conv2d"),[p]=aH(p,c),"NHWC"===a?ox(b.outShape,p.shape):(j(p.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${p.shape.length}.`),j(0===p.shape.length||p.shape[0]===b.outChannels||1===p.shape[0],()=>`Error in fused conv2d: bias shape (${p.shape}) is not compatible with the number of output channels (${b.outChannels})`))),null!=u){let e=u.shape;if(j(e.length<=1||3===e.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`),1===e.length)j(1===e[0]||e[0]===b.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${b.outChannels}).`);else if(3===e.length)try{ox(e,b.outShape)}catch(n){let t=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${b.outShape}).`;throw Error(t)}d=a7(u,"prelu weights","fused conv2d")}let x=(e,t)=>{j("NHWC"===a,()=>`Error in gradient of fused conv2D: got dataFormat of ${a} but only NHWC is currently supported.`);let[i,o,u,h]=t,p=du(e,u,l);j(l2(s),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);let d=uk(o.shape,p,i,n,r),c=di(o,p,i.shape,n,r),f=[d,c];if(null!=h){let e=dh(h,p);f.push(e)}return f},k={x:m,filter:f,bias:p,preluActivationWeights:d},v={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:h};if(null==o){let e=lm((e,t,n)=>{let r=aQ.runKernel(rF,k,v);return n([t,e,r]),g&&(r=l5(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}});return e(m,f)}{let e=lm((e,t,n,r)=>{let a=aQ.runKernel(rF,k,v);return r([t,e,a,n]),g&&(a=l5(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:x}});return e(m,f,p)}}}),df=st({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,a,s=[1,1],i){let o=e;3===e.rank&&(o=l5(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=l5(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={x:o,dy:l};return aQ.runKernel(tR,u,{strides:r,pad:a,dimRoundingMode:i,dilations:s,filterShape:n})}}),dm=st({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,a,s=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=l5(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let u={dy:o,filter:n},h=aQ.runKernel(tF,u,{strides:r,pad:a,dimRoundingMode:i,dilations:s,inputShape:e});return l?l5(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),dg=st({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:h}){let p,d;if(!1===dd(aQ.state.gradientDepth,l)){let p=uR(e,t,n,r,a,s,i);return null!=o&&(p=lr(p,o)),dp(p,l,u,h)}let c=a7(e,"x","depthwiseConv2d","float32"),f=a7(t,"filter","depthwiseConv2d","float32"),m=c,g=!1;3===c.rank&&(g=!0,m=l5(c,[1,c.shape[0],c.shape[1],c.shape[2]])),j(4===m.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`),j(4===f.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`),j(m.shape[3]===f.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${f.shape[2]}.`),null==s&&(s=[1,1]),j(l3(n,s),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`),l6("fused depthwiseConv2d",r,i);let y=lX(m.shape,f.shape,n,s,r,i,!0);null!=o&&(p=a7(o,"bias","fused conv2d"),[p]=aH(p,c),ox(y.outShape,p.shape)),null!=u&&(d=a7(u,"prelu weights","fused depthwiseConv2d"));let b=(e,t)=>{j(l2(s),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);let[a,o,u,h]=t,d=du(e,u,l),c=dm(o.shape,d,a,n,r,s,i),f=df(o,d,a.shape,n,r,s,i);if(null!=h){let e=dh(p,d);return[c,f,e]}return[c,f]},x={x:m,filter:f,bias:p,preluActivationWeights:d},k={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:i,activation:l,leakyreluAlpha:h};if(null==o){let e=lm((e,t,n)=>{let r=aQ.runKernel(rD,x,k);return n([t,e,r]),g&&(r=l5(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}});return e(m,f)}{let e=lm((e,t,n,r)=>{let a=aQ.runKernel(rD,x,k);return r([t,e,a,n]),g&&(a=l5(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:b}});return e(m,f,p)}}}),dy=st({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:a,activation:s="linear",preluActivationWeights:i,leakyreluAlpha:o=.2}){let l,u;if(!1===dd(aQ.state.gradientDepth,s)){let l=iY(e,t,n,r);return null!=a&&(l=lr(l,a)),dp(l,s,i,o)}let h=a7(e,"a","fused matMul"),p=a7(t,"b","fused matMul");[h,p]=aH(h,p);let d=n?h.shape[h.rank-2]:h.shape[h.rank-1],c=r?p.shape[p.rank-1]:p.shape[p.rank-2],f=n?h.shape[h.rank-1]:h.shape[h.rank-2],m=r?p.shape[p.rank-2]:p.shape[p.rank-1],g=h.shape.slice(0,-2),y=p.shape.slice(0,-2),b=Z(g),x=Z(y);j(d===c,()=>`Error in fused matMul: inner shapes (${d}) and (${c}) of Tensors with shapes ${h.shape} and ${p.shape} and transposeA=${n} and transposeB=${r} must match.`);let k=ox(h.shape.slice(0,-2),p.shape.slice(0,-2)),v=k.concat([f,m]),w=n?l5(h,[b,d,f]):l5(h,[b,f,d]),I=r?l5(p,[x,m,c]):l5(p,[x,c,m]);null!=a&&(l=a7(a,"bias","fused matMul"),[l]=aH(l,h),ox(v,l.shape)),null!=i&&(u=a7(i,"prelu weights","fused matMul"));let S=(e,t)=>{let i,o;let[l,u,h,p]=t,d=du(l5(e,h.shape),h,s);if(n||r?!n&&r?(i=iY(d,u,!1,!1),o=iY(d,l,!0,!1)):n&&!r?(i=iY(u,d,!1,!0),o=iY(l,d,!1,!1)):(i=iY(u,d,!0,!0),o=iY(d,l,!0,!0)):(i=iY(d,u,!1,!0),o=iY(l,d,!0,!1)),null==a)return[i,o];{let e=dh(p,d);return[i,o,e]}},N={a:w,b:I,bias:l,preluActivationWeights:u},T={transposeA:n,transposeB:r,activation:s,leakyreluAlpha:o};if(null==a){let e=lm((e,t,n)=>{let r=aQ.runKernel(rR,N,T);return n([e,t,r]),{value:l5(r,v),gradFunc:S}});return e(w,I)}{let e=lm((e,t,n,r)=>{let a=aQ.runKernel(rR,N,T);return r([e,t,a,n]),{value:l5(a,v),gradFunc:S}});return e(w,I,l)}}}),db=st({hammingWindow_:function(e){return dt(e,.54,.46)}}),dx=st({hannWindow_:function(e){return dt(e,.5,.5)}}),dk=st({frame_:function(e,t,n,r=!1,a=0){let s=0,i=[];for(;s+t<=e.size;)i.push(ut(e,s,t)),s+=n;if(r)for(;s<e.size;){let r=s+t-e.size,o=l9([ut(e,s,t-r),lk([r],a)]);i.push(o),s+=n}return 0===i.length?pM([],[0,t]):l5(l9(i),[i.length,t])}}),dv=st({stft_:function(e,t,n,r,a=dx){null==r&&(r=de(t));let s=dk(e,t,n),i=li(s,a(t));return p$(i,r)}}),dw=st({cropAndResize_:function(e,t,n,r,a="bilinear",s=0){let i=a7(e,"image","cropAndResize"),o=a7(t,"boxes","cropAndResize","float32"),l=a7(n,"boxInd","cropAndResize","int32"),u=o.shape[0];j(4===i.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`),j(2===o.rank&&4===o.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`),j(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`),j(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),j(r[0]>=1&&r[1]>=1,()=>`cropSize must be atleast [1,1], but was ${r}`),j("bilinear"===a||"nearest"===a,()=>`method must be bilinear or nearest, but was ${a}`);let h=aQ.runKernel(tC,{image:i,boxes:o,boxInd:l},{method:a,extrapolationValue:s,cropSize:r});return h}}),dI=st({flipLeftRight_:function(e){let t=a7(e,"image","flipLeftRight","float32");j(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);let n=aQ.runKernel(tK,{image:t},{});return n}}),dS=st({grayscaleToRGB_:function(e){let t=a7(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];j(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),j(1===r,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`);let a=Array(t.rank);return a.fill(1,0,n),a[n]=3,u6(t,a)}}),dN=st({rotateWithOffset_:function(e,t,n=0,r=.5){let a=a7(e,"image","rotateWithOffset","float32");j(4===a.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`);let s=aQ.runKernel(rA,{image:a},{radians:t,fillValue:n,center:r});return s}});function dT(e,t,n,r,a,s){null==r&&(r=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==s&&(s=0);let i=e.shape[0];return n=Math.min(n,i),j(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),j(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),j(4===e.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`),j(1===t.rank,()=>"scores must be a 1D tensor"),j(t.shape[0]===i,()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`),j(0<=s&&s<=1,()=>`softNmsSigma must be in [0, 1], but was '${s}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s}}let dC=st({nonMaxSuppression_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){let s=a7(e,"boxes","nonMaxSuppression","float32"),i=a7(t,"scores","nonMaxSuppression","float32"),o=dT(s,i,n,r,a);n=o.maxOutputSize,r=o.iouThreshold,a=o.scoreThreshold;let l={maxOutputSize:n,iouThreshold:r,scoreThreshold:a};return aQ.runKernel(n$,{boxes:s,scores:i},l)}});function d$(e,t){return e>t?1:e<t?-1:0}function dE(e,t,n,r,a){return dF(e,t,n,r,a,0)}function dA(e,t,n,r,a,s){return dF(e,t,n,r,a,0,!1,s,!0)}function dR(e,t,n,r,a,s){return dF(e,t,n,r,a,s,!0)}function dF(e,t,n,r,a,s,i=!1,o=!1,l=!1){let u=[];for(let e=0;e<t.length;e++)t[e]>a&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(dD);let h=s>0?-.5/s:0,p=[],d=[];for(;p.length<n&&u.length>0;){let t=u.pop(),{score:n,boxIndex:s,suppressBeginIndex:i}=t;if(n<a)break;let o=!1;for(let n=p.length-1;n>=i;--n){let i=function(e,t,n){let r=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(a[0],a[2]),h=Math.min(a[1],a[3]),p=Math.max(a[0],a[2]),d=Math.max(a[1],a[3]),c=(o-s)*(l-i),f=(p-u)*(d-h);if(c<=0||f<=0)return 0;let m=Math.max(s,u),g=Math.max(i,h),y=Math.min(o,p),b=Math.min(l,d),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(c+f-x)}(e,s,p[n]);if(i>=r){o=!0;break}if(t.score=t.score*function(e,t,n){let r=Math.exp(t*n*n);return n<=e?r:0}(r,h,i),t.score<=a)break}t.suppressBeginIndex=p.length,!o&&(t.score===n?(p.push(s),d.push(t.score)):t.score>a&&function(e,t,n){let r=function(e,t,n){let r=0,a=e.length,s=0,i=!1;for(;r<a;){s=r+(a-r>>>1);let o=n(t,e[s]);o>0?r=s+1:(a=s,i=!o)}return i?r:-r-1}(e,t,n||d$),a=r<0?-(r+1):r;e.splice(a,0,t)}(u,t,dD))}let c=p.length,f=n-c;o&&f>0&&(p.push(...Array(f).fill(0)),d.push(...Array(f).fill(0)));let m={selectedIndices:p};return i&&(m.selectedScores=d),l&&(m.validOutputs=c),m}function dD(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}async function d_(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){let s=a7(e,"boxes","nonMaxSuppressionAsync"),i=a7(t,"scores","nonMaxSuppressionAsync"),o=dT(s,i,n,r,a);n=o.maxOutputSize,r=o.iouThreshold,a=o.scoreThreshold;let l=await Promise.all([s.data(),i.data()]),u=l[0],h=l[1],{selectedIndices:p}=dE(u,h,n,r,a);return s!==e&&s.dispose(),i!==t&&i.dispose(),pO(p,"int32")}let dO=st({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){let i=a7(e,"boxes","nonMaxSuppression"),o=a7(t,"scores","nonMaxSuppression"),l=dT(i,o,n,r,a,s);n=l.maxOutputSize,r=l.iouThreshold,a=l.scoreThreshold,s=l.softNmsSigma;let u={maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s},h=aQ.runKernel(nA,{boxes:i,scores:o},u);return{selectedIndices:h[0],selectedScores:h[1]}}});async function dM(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){let i=a7(e,"boxes","nonMaxSuppressionAsync"),o=a7(t,"scores","nonMaxSuppressionAsync"),l=dT(i,o,n,r,a,s);n=l.maxOutputSize,r=l.iouThreshold,a=l.scoreThreshold,s=l.softNmsSigma;let u=await Promise.all([i.data(),o.data()]),h=u[0],p=u[1],{selectedIndices:d,selectedScores:c}=dR(h,p,n,r,a,s);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:pO(d,"int32"),selectedScores:pO(c)}}let dL=st({nonMaxSuppressionPadded_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){let i=a7(e,"boxes","nonMaxSuppression"),o=a7(t,"scores","nonMaxSuppression"),l=dT(i,o,n,r,a,null),u=l.maxOutputSize,h=l.iouThreshold,p=l.scoreThreshold,d=aQ.runKernel(nE,{boxes:i,scores:o},{maxOutputSize:u,iouThreshold:h,scoreThreshold:p,padToMaxOutputSize:s});return{selectedIndices:d[0],validOutputs:d[1]}}});async function dz(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){let i=a7(e,"boxes","nonMaxSuppressionAsync"),o=a7(t,"scores","nonMaxSuppressionAsync"),l=dT(i,o,n,r,a,null),u=l.maxOutputSize,h=l.iouThreshold,p=l.scoreThreshold,[d,c]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=dA(d,c,u,h,p,s);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:pO(f,"int32"),validOutputs:ly(m,"int32")}}let dP=st({resizeBilinear_:function(e,t,n=!1,r=!1){let a=a7(e,"images","resizeBilinear");j(3===a.rank||4===a.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`),j(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),j(!1===r||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let s=a,i=!1;3===a.rank&&(i=!0,s=l5(a,[1,a.shape[0],a.shape[1],a.shape[2]]));let[]=t,o={images:s},l=aQ.runKernel(nK,o,{alignCorners:n,halfPixelCenters:r,size:t});return i?l5(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),dB=st({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){let a=a7(e,"images","resizeNearestNeighbor");j(3===a.rank||4===a.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`),j(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),j("float32"===a.dtype||"int32"===a.dtype,()=>"`images` must have `int32` or `float32` as dtype"),j(!1===r||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let s=a,i=!1;3===a.rank&&(i=!0,s=l5(a,[1,a.shape[0],a.shape[1],a.shape[2]]));let[]=t,o={images:s},l=aQ.runKernel(nq,o,{alignCorners:n,halfPixelCenters:r,size:t});return i?l5(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),dW=st({threshold_:function(e,t="binary",n=!1,r=.5){let a,s,i,o;let l=a7(e,"image","threshold"),u=l.shape[0]*l.shape[1],h=li(pO([r]),255);if(j(3===l.rank,()=>`Error in threshold: image must be rank 3,but got rank ${l.rank}.`),j(3===l.shape[2]||1===l.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${l.shape[2]}.`),j("int32"===l.dtype||"float32"===l.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${l.dtype}.`),j("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===l.shape[2]){[a,s,i]=pC(l,[1,1,1],-1);let e=li(a,.2989),t=li(s,.587),n=li(i,.114);o=lr(lr(e,t),n)}else o=e;if("otsu"===t){let e=uu(iS(ph(o),"int32"),sa([]),256);h=function(e,t){let n,r,a,s,i,o,l=pO([-1]),u=pO([0]),h=pO([0]);for(let p=0;p<e.size-1;p++){n=ut(e,0,p+1),r=ut(e,p+1),i=ls(uQ(n),t),o=ls(uQ(r),t);let d=uQ(li(n,pt(0,n.size)));a=ls(d,uQ(n));let c=lk(r.shape,n.size),f=lr(pt(0,r.size),c),m=li(r,f);s=ls(uQ(m),uQ(r));let g=lI(a,s),y=lI(a,s),b=li(i,o);h=li(li(b,g),y);let x=u9(h,u);u=uO(x,h,u),l=uO(x,pO([p]),l)}return l}(e,u)}let p=n?hi(o,h):u9(o,h),d=iS(li(p,255),"int32");return d}}),dV=st({transform_:function(e,t,n="nearest",r="constant",a=0,s){let i=a7(e,"image","transform","float32"),o=a7(t,"transforms","transform","float32");return j(4===i.rank,()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`),j(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),j(null==s||2===s.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`),aQ.runKernel(rv,{image:i,transforms:o},{interpolation:n,fillMode:r,fillValue:a,outputShape:s})}}),dU=st({bandPart_:function(e,t,n){j(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),j(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);let r=a7(e,"a","bandPart");j(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);let a=r.shape,[s,i]=r.shape.slice(-2);if(!(t<=s))throw Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=i))throw Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=s),n<0&&(n=i);let o=l5(pt(0,s,1,"int32"),[-1,1]),l=pt(0,i,1,"int32"),u=lI(o,l),h=hm(hi(u,ly(+t,"int32")),he(u,ly(-n,"int32"))),p=hT([s,i],r.dtype);return l5(pR(pG(l5(r,[-1,s,i])).map(e=>uO(h,e,p))),a)}}),dG=st({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,j(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");let n=e[0].shape[0];for(let t=1;t<e.length;++t)j(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=pC(e,e.shape[0],0).map(e=>pA(e,[0]));j(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);let n=[],r=e;for(let t=0;t<e.length;++t)n.push(aQ.tidy(()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){let t=li(uQ(li(n[r],e)),n[r]);e=lI(e,t)}return ls(e,u0(e,"euclidean"))}));return t?pR(n,0):n}});function dH(e,t=!1){return aQ.tidy(()=>{j(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);let n=e.shape[0],r=e.shape[1],a=u5(n),s=iN(e),i=pM([[1]],[1,1]),o=iN(i),l=n>=r?r:n;for(let e=0;e<l;++e){let t=s,l=o,u=a;[o,s,a]=aQ.tidy(()=>{let t=ut(s,[e,e],[n-e,1]),l=u0(t),u=ut(s,[e,e],[1,1]),h=uO(u9(u,0),pM([[-1]]),pM([[1]])),p=lI(u,li(h,l)),d=ls(t,p);o=1===d.shape[0]?iN(i):l9([i,ut(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);let c=od(ls(iY(h,p),l)),f=ut(s,[e,0],[n-e,r]),m=li(c,o),g=of(o);if(0===e)s=lI(f,iY(m,iY(g,f)));else{let t=lI(f,iY(m,iY(g,f)));s=l9([ut(s,[0,0],[e,r]),t],0)}let y=of(m),b=ut(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=lI(b,iY(iY(b,o),y));else{let t=lI(b,iY(iY(b,o),y));a=l9([ut(a,[0,0],[n,e]),t],1)}return[o,s,a]}),i9([t,l,u])}return!t&&n>r&&(a=ut(a,[0,0],[n,r]),s=ut(s,[0,0],[r,r])),[a,s]})}let dq=st({qr_:function(e,t=!1){if(j(e.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`),2===e.rank)return dH(e,t);{let n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),r=pG(l5(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],s=[];r.forEach(e=>{let[n,r]=dH(e,t);a.push(n),s.push(r)});let i=l5(pR(a,0),e.shape),o=l5(pR(s,0),e.shape);return[i,o]}}});!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(k||(k={}));let dj=st({computeWeightedLoss_:function(e,t,n=k.SUM_BY_NONZERO_WEIGHTS){let r=a7(e,"losses","computeWeightedLoss"),a=null;null!=t&&(a=a7(t,"weights","computeWeightedLoss"));let s=null==a?r:li(r,a);if(n===k.NONE)return s;if(n===k.SUM)return uQ(s);if(n===k.MEAN){if(null==a)return hN(s);{let e=r.size/a.size,t=ls(uQ(s),uQ(a));return e>1?ls(t,ly(e)):t}}if(n===k.SUM_BY_NONZERO_WEIGHTS){if(null==a)return ls(uQ(s),ly(r.size));{let e=li(a,hC(r.shape)),t=iS(uQ(hO(e,ly(0))),"float32");return ls(uQ(s),t)}}throw Error(`Unknown reduction: ${n}`)}}),dK=st({absoluteDifference_:function(e,t,n,r=k.SUM_BY_NONZERO_WEIGHTS){let a=a7(e,"labels","absoluteDifference"),s=a7(t,"predictions","absoluteDifference"),i=null;null!=n&&(i=a7(n,"weights","absoluteDifference")),K(a.shape,s.shape,"Error in absoluteDifference: ");let o=lN(lI(a,s));return dj(o,i,r)}}),dX=st({cosineDistance_:function(e,t,n,r,a=k.SUM_BY_NONZERO_WEIGHTS){let s=a7(e,"labels","cosineDistance"),i=a7(t,"predictions","cosineDistance"),o=null;null!=r&&(o=a7(r,"weights","cosineDistance")),K(s.shape,i.shape,"Error in cosineDistance: ");let l=ly(1),u=lI(l,uQ(li(s,i),n,!0));return dj(u,o,a)}}),dY=st({hingeLoss_:function(e,t,n,r=k.SUM_BY_NONZERO_WEIGHTS){let a=a7(e,"labels","hingeLoss"),s=a7(t,"predictions","hingeLoss"),i=null;null!=n&&(i=a7(n,"weights","hingeLoss")),K(a.shape,s.shape,"Error in hingeLoss: ");let o=ly(1);a=lI(li(ly(2),a),o);let l=pr(lI(o,li(a,s)));return dj(l,i,r)}}),dZ=st({huberLoss_:function(e,t,n,r=1,a=k.SUM_BY_NONZERO_WEIGHTS){let s=a7(e,"labels","huberLoss"),i=a7(t,"predictions","huberLoss"),o=null;null!=n&&(o=a7(n,"weights","huberLoss")),K(s.shape,i.shape,"Error in huberLoss: ");let l=ly(r),u=lN(lI(i,s)),h=hE(u,l),p=lI(u,h),d=lr(li(ly(.5),ll(h)),li(l,p));return dj(d,o,a)}}),dJ=st({logLoss_:function(e,t,n,r=1e-7,a=k.SUM_BY_NONZERO_WEIGHTS){let s=a7(e,"labels","logLoss"),i=a7(t,"predictions","logLoss"),o=null;null!=n&&(o=a7(n,"weights","logLoss")),K(s.shape,i.shape,"Error in logLoss: ");let l=ly(1),u=ly(r),h=od(li(s,hu(lr(i,u)))),p=li(lI(l,s),hu(lr(lI(l,i),u))),d=lI(h,p);return dj(d,o,a)}}),dQ=st({meanSquaredError_:function(e,t,n,r=k.SUM_BY_NONZERO_WEIGHTS){let a=a7(e,"labels","meanSquaredError"),s=a7(t,"predictions","meanSquaredError"),i=null;null!=n&&(i=a7(n,"weights","meanSquaredError")),K(a.shape,s.shape,"Error in meanSquaredError: ");let o=pE(a,s);return dj(o,i,r)}}),d0=st({sigmoidCrossEntropy_:function(e,t,n,r=0,a=k.SUM_BY_NONZERO_WEIGHTS){let s=a7(e,"multiClassLabels","sigmoidCrossEntropy"),i=a7(t,"logits","sigmoidCrossEntropy"),o=null;if(null!=n&&(o=a7(n,"weights","sigmoidCrossEntropy")),K(s.shape,i.shape,"Error in sigmoidCrossEntropy: "),r>0){let e=ly(r),t=ly(1),n=ly(.5);s=lr(li(s,lI(t,e)),li(n,e))}let l=function(e,t){let n=a7(e,"labels","sigmoidCrossEntropyWithLogits"),r=a7(t,"logits","sigmoidCrossEntropyWithLogits");K(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");let a=pr(r),s=li(r,n),i=hh(u2(od(lN(r))));return lr(lI(a,s),i)}(s,i);return dj(l,o,a)}}),d1=st({softmaxCrossEntropy_:function(e,t,n,r=0,a=k.SUM_BY_NONZERO_WEIGHTS){let s=a7(e,"onehotLabels","softmaxCrossEntropy"),i=a7(t,"logits","softmaxCrossEntropy"),o=null;if(null!=n&&(o=a7(n,"weights","softmaxCrossEntropy")),K(s.shape,i.shape,"Error in softmaxCrossEntropy: "),r>0){let e=ly(r),t=ly(1),n=ly(s.shape[1]);s=lr(li(s,lI(t,e)),ls(e,n))}let l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);let r=lm((e,t,r)=>{let a=hf(t,[n],!0),s=lI(iS(t,"float32"),a);r([e,s]);let i=od(li(s,e)),o=uQ(i,[n]);return{value:o,gradFunc:(e,t)=>{let[r,a]=t,s=uq(e.shape,[n]);return[li(l5(e,s),lI(iS(r,"float32"),u2(a))),li(l5(e,s),lI(u2(a),iS(r,"float32")))]}}});return r(e,t)}(s,i);return dj(l,o,a)}}),d2=st({sparseFillEmptyRows_:function(e,t,n,r){let a=a7(e,"indices","sparseFillEmptyRows","int32"),s=a7(t,"values","sparseFillEmptyRows"),i=a7(n,"denseShape","sparseFillEmptyRows","int32"),o=a7(r,"defaultValue","sparseFillEmptyRows",s.dtype);if(2!==a.rank)throw Error(`Indices should be Tensor2D but received shape
        ${a.shape}`);if(1!==s.rank)throw Error(`Values should be Tensor1D but received shape ${s.shape}`);if(1!==i.rank)throw Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw Error(`Default value should be a scalar but received shape ${o.shape}`);let l=aQ.runKernel(rs,{indices:a,values:s,denseShape:i,defaultValue:o});return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}}),d3=st({sparseReshape_:function(e,t,n){let r=a7(e,"inputIndices","sparseReshape","int32"),a=a7(t,"inputShape","sparseReshape","int32"),s=a7(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw Error(`Input indices should be Tensor2D but received shape
        ${r.shape}`);if(1!==a.rank)throw Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==s.rank)throw Error(`New shape should be Tensor1D but received shape ${s.shape}`);let i=aQ.runKernel(ri,{inputIndices:r,inputShape:a,newShape:s});return{outputIndices:i[0],outputShape:i[1]}}}),d4=st({sparseSegmentMean_:function(e,t,n){let r=a7(e,"data","sparseSegmentMean"),a=a7(t,"indices","sparseSegmentMean","int32"),s=a7(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw Error(`Indices should be Tensor1D but received shape
          ${a.shape}`);if(1!==s.rank)throw Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);return aQ.runKernel(ro,{data:r,indices:a,segmentIds:s})}}),d6=st({sparseSegmentSum_:function(e,t,n){let r=a7(e,"data","sparseSegmentSum"),a=a7(t,"indices","sparseSegmentSum","int32"),s=a7(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw Error(`Indices should be Tensor1D but received shape
         ${a.shape}`);if(1!==s.rank)throw Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);return aQ.runKernel(rl,{data:r,indices:a,segmentIds:s})}}),d5=st({stringNGrams_:function(e,t,n,r,a,s,i,o){let l=a7(e,"data","stringNGrams","string");if("string"!==l.dtype)throw Error("Data must be of datatype string");if(1!==l.shape.length)throw Error(`Data must be a vector, saw: ${l.shape}`);let u=a7(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw Error("Data splits must be of datatype int32");let h=aQ.runKernel(rc,{data:l,dataSplits:u},{separator:n,nGramWidths:r,leftPad:a,rightPad:s,padWidth:i,preserveShortSequences:o});return{nGrams:h[0],nGramsSplits:h[1]}}}),d8=st({stringSplit_:function(e,t,n=!0){let r=a7(e,"input","stringSplit","string"),a=a7(t,"delimiter","stringSplit","string");if(1!==r.rank)throw Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==a.rank)throw Error(`Delimiter should be a scalar but received shape ${a.shape}`);let s=aQ.runKernel(rf,{input:r,delimiter:a},{skipEmpty:n});return{indices:s[0],values:s[1],shape:s[2]}}}),d7=st({stringToHashBucketFast_:function(e,t){let n=a7(e,"input","stringToHashBucketFast","string");if(t<=0)throw Error("Number of buckets must be at least 1");return aQ.runKernel(rm,{input:n},{numBuckets:t})}}),d9={fft:pS,ifft:pN,rfft:p$,irfft:pT},ce={hammingWindow:db,hannWindow:dx,frame:dk,stft:dv},ct={flipLeftRight:dI,grayscaleToRGB:dS,resizeNearestNeighbor:dB,resizeBilinear:dP,rotateWithOffset:dN,cropAndResize:dw,nonMaxSuppression:dC,nonMaxSuppressionAsync:d_,nonMaxSuppressionWithScore:dO,nonMaxSuppressionWithScoreAsync:dM,nonMaxSuppressionPadded:dL,nonMaxSuppressionPaddedAsync:dz,threshold:dW,transform:dV},cn={bandPart:dU,gramSchmidt:dG,qr:dq},cr={absoluteDifference:dK,computeWeightedLoss:dj,cosineDistance:dX,hingeLoss:dY,huberLoss:dZ,logLoss:dJ,meanSquaredError:dQ,sigmoidCrossEntropy:d0,softmaxCrossEntropy:d1},ca={sparseFillEmptyRows:d2,sparseReshape:d3,sparseSegmentMean:d4,sparseSegmentSum:d6},cs={stringNGrams:d5,stringSplit:d8,stringToHashBucketFast:d7};l(lF,pY),l(lF,iJ),l(lF,uW),l(lF,pQ),l(lF,p1),l(lF,hx),l(lF,p3),l(lF,p6),l(lF,p8),l(lF,p9),l(lF,dn);var ci={};R(ci,"train",()=>co);let co={sgd:lR.sgd,momentum:lR.momentum,adadelta:lR.adadelta,adagrad:lR.adagrad,rmsprop:lR.rmsprop,adamax:lR.adamax,adam:lR.adam},cl="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function cu(){return new Promise(e=>cl(()=>e()))}var ch={};R(ch,"fromUint8ToStringArray",()=>fc),R(ch,"fromStringArrayToUint8",()=>ff),R(ch,"slice_util",()=>oF),R(ch,"upcastType",()=>aU),R(ch,"segment_util",()=>fu);var cp={};function cd(e,t){let n=e[0].length;e.forEach((e,t)=>{j(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),j(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);let r=e[0];e.forEach((e,a)=>{for(let s=0;s<n;s++)j(s===t||e[s]===r[s],()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`)})}function cc(e,t){let n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}R(cp,"assertParamsConsistent",()=>cd),R(cp,"computeOutShape",()=>cc);var cf={};function cm(e,t,n){let r=[];if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let a=1;a<n.length;++a){let s=n[a],i=r[r.length-n.length+a],o=r[i];if(s>=0){if(o>=0){if(o!==s)throw Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${a+e}] = ${s} but shape[${a+e}] = ${o}`)}else r[i]=s}}return r}function cg(e){let t={FIRST_DIM_SIZE:v.FIRST_DIM_SIZE,VALUE_ROWIDS:v.VALUE_ROWIDS,ROW_LENGTHS:v.ROW_LENGTHS,ROW_SPLITS:v.ROW_SPLITS,ROW_LIMITS:v.ROW_LIMITS,ROW_STARTS:v.ROW_STARTS},n=[];for(let r of e)if(r in t)n.push(t[r]);else break;return n}function cy(e){return 0===e.length?0:e[0]===v.FIRST_DIM_SIZE?e.length-1:e.length}function cb(e,t){if(null==e||null==t)return;let n=e.length,r=t.length;if(n>=r)throw Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let a=0;a<Math.min(n,r-1);++a){let n=e[a],r=t[a+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${a-e.length}] = ${n} but ragged tensor input.flatValues.shape[${a-e.length}] = ${r}`)}}R(cf,"RowPartitionType",()=>v),R(cf,"combineRaggedTensorToTensorShapes",()=>cm),R(cf,"getRowPartitionTypesHelper",()=>cg),R(cf,"getRaggedRank",()=>cy),R(cf,"validateDefaultValueShape",()=>cb),function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(v||(v={}));var cx={};R(cx,"PARALLELIZE_THRESHOLD",()=>ck),R(cx,"computeOptimalWindowSize",()=>cv);let ck=30;function cv(e){return e<=ck?e:ew(e,Math.floor(Math.sqrt(e)))}var cw={};function cI(e,t,n){let r=n*("number"==typeof e?e:e[0]),a=t*("number"==typeof e?e:e[1]);return[r,a]}R(cw,"getImageCenter",()=>cI);var cS={};function cN(e,t,n,r=!0){let a=[];if(r)(a=a.concat(t.slice(0))).push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);let n=t.length;for(let r=0;r<n;++r)a=a.concat([e[r+1]/t[r],t[r]]);a=a.concat(e.slice(n+1))}return a}function cT(e,t,n=!0){let r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{let n=[],a=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?a.push(r):n.push(r);r.push(...n),r.push(0),r.push(...a)}return r}function cC(e,t,n,r=!0){let a=[];r?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function c$(e,t){let n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function cE(e,t,n){let r=e.slice(0,1);for(let a=0;a<n;++a)r.push(e[a+1]-t[a][0]-t[a][1]);return r}R(cS,"getReshaped",()=>cN),R(cS,"getPermuted",()=>cT),R(cS,"getReshapedPermuted",()=>cC),R(cS,"getSliceBeginCoords",()=>c$),R(cS,"getSliceSize",()=>cE);var cA={};R(cA,"SELU_SCALEALPHA",()=>cR),R(cA,"SELU_SCALE",()=>cF);let cR=1.7580993408473768,cF=1.0507009873554805;var cD={};R(cD,"ERF_P",()=>c_),R(cD,"ERF_A1",()=>cO),R(cD,"ERF_A2",()=>cM),R(cD,"ERF_A3",()=>cL),R(cD,"ERF_A4",()=>cz),R(cD,"ERF_A5",()=>cP);let c_=.3275911,cO=.254829592,cM=-.284496736,cL=1.421413741,cz=-1.453152027,cP=1.061405429;var cB={};function cW(e,t){if(e.length!==t.length)throw Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);let n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function cV(e){let t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function cU(e){let t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function cG(e){let t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function cH(e,t){let n=e[2*t],r=e[2*t+1];return{real:n,imag:r}}function cq(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function cj(e,t){let n=new Float32Array(e/2),r=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){let s=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(s),r[a]=Math.sin(s)}return{real:n,imag:r}}function cK(e,t,n){let r=(n?2:-2)*Math.PI*(e/t),a=Math.cos(r),s=Math.sin(r);return{real:a,imag:s}}R(cB,"mergeRealAndImagArrays",()=>cW),R(cB,"splitRealAndImagArrays",()=>cV),R(cB,"complexWithEvenIndex",()=>cU),R(cB,"complexWithOddIndex",()=>cG),R(cB,"getComplexWithIndex",()=>cH),R(cB,"assignToTypedArray",()=>cq),R(cB,"exponents",()=>cj),R(cB,"exponent",()=>cK);var cX={};R(cX,"decodeEinsumEquation",()=>cZ),R(cX,"getEinsumPermutation",()=>cJ),R(cX,"checkEinsumDimSizes",()=>cQ),R(cX,"getEinsumComputePath",()=>c0),R(cX,"isIdentityPermutation",()=>c1);let cY=/->/g;function cZ(e,t){e=e.replace(/\s/g,"");let n=(e.length-e.replace(cY,"").length)/2;if(n<1)throw Error("Equations without an arrow are not supported.");if(n>1)throw Error('Equation must contain exactly one arrow ("->").');let[r,a]=e.split("->");j(-1===r.indexOf("..."),()=>'The ellipsis notation ("...") is not supported yet.');let s=r.split(","),i=s.length;if(t!==i)throw Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw Error("Support for more than 2 input tensors is not implemented yet.");let o=[];for(let e=0;e<a.length;++e){let t=a[e];if(!s.some(e=>-1!==e.indexOf(t)))throw Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<r.length;++e){let t=r[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}let l=Array(s.length);for(let e=0;e<i;++e){if(new Set(s[e].split("")).size!==s[e].length)throw Error(`Found duplicate axes in input component ${s[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<s[e].length;++t)l[e].push(o.indexOf(s[e][t]))}let u=o.length,h=a.length,p=[];for(let e=h;e<u;++e)p.push(e);return{allDims:o,summedDims:p,idDims:l}}function cJ(e,t){let n=Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;let r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return{permutationIndices:n=n.filter(e=>-1!==e),expandDims:r}}function cQ(e,t,n){let r=Array(e);for(let e=0;e<n.length;++e){let a=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=a[n]:j(r[t[e][n]]===a[n],()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(a)}, but got dimension ${a[n]}`)}}function c0(e,t){let n=[],r=0;0===e.length&&e.push(-1),r=e.length+1;for(let e=0;e<r;++e)n.push([]);let a=[];for(let r=0;r<e.length;++r){let s=e[r],i=function(e,t){let n=[];for(let r=0;r<e.length;++r)(0===e[r].length||-1!==e[r].indexOf(t)||-1===t)&&n.push(r);return n}(t,s);for(let e of i)-1===a.indexOf(e)&&(n[r].push(e),a.push(e))}return{path:e,steps:n}}function c1(e){return e.every((e,t)=>e===t)}var c2={};function c3(e,t,n=0){let r=[];if("number"==typeof t)j(e.shape[n]%t==0,()=>"Number of splits must evenly divide the axis."),r=Array(t).fill(e.shape[n]/t);else{let a=t.reduce((e,t)=>(-1===t&&(e+=1),e),0);j(a<=1,()=>"There should be only one negative value in split array.");let s=t.indexOf(-1);if(-1!==s){let r=t.reduce((e,t)=>t>0?e+t:e);t[s]=e.shape[n]-r}j(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),r=t}return r}R(c2,"prepareSplitSize",()=>c3);var c4={};function c6(e){return`Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${e}`}function c5(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function c8(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}R(c4,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",()=>c6),R(c4,"getSparseFillEmptyRowsNegativeIndexErrorMessage",()=>c5),R(c4,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",()=>c8);var c7={};function c9(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function fe(e,t){return`size ${e} must be non-negative, not ${t}`}function ft(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function fn(e,t){let n=Z(e),r=Z(t);return`Input to reshape is a SparseTensor with ${n}
  dense values, but the requested shape requires a multiple of ${r}. inputShape=${e} outputShape= ${t}`}function fr(e,t){let n=Z(e),r=Z(t);return`Input to reshape is a tensor with ${n} dense values, but the requested shape has ${r}. inputShape=${e} outputShape=${t}`}R(c7,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",()=>c9),R(c7,"getSparseReshapeNegativeOutputDimErrorMessage",()=>fe),R(c7,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",()=>ft),R(c7,"getSparseReshapeInputOutputMultipleErrorMessage",()=>fn),R(c7,"getSparseReshapeInputOutputMismatchErrorMessage",()=>fr);var fa={};function fs(){return"segment ids must be >= 0"}function fi(){return"segment ids are not increasing"}function fo(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function fl(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}R(fa,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",()=>fs),R(fa,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",()=>fi),R(fa,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",()=>fo),R(fa,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",()=>fl);var fu={};function fh(e,t){let n,r=!1;for(e<=ck?(n=e,r=!0):n=ew(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=ew(e,n+1);return n}function fp(e,t,n){let r=[],a=e.length;for(let s=0;s<a;s++)s!==t?r.push(e[s]):r.push(n);return r}function fd(e,t,n,r){let a=t.shape.length,s=e.shape.length;if(0!==r&&(r<-a||r>a))throw Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${r}`);if(r<0&&(r+=a),r>s)throw Error(`batchDims (${r}) must be less than rank(x) (
    ${s}).`);if(n<r)throw Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);let i=e.shape[n],o=[],l=1,u=1,h=1;for(let t=0;t<r;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=r;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=r;e<a;e++)o.push(t.shape[e]);for(let t=n+1;t<s;t++)o.push(e.shape[t]),h*=e.shape[t];return{batchSize:l,sliceSize:h,outerSize:u,dimSize:i,outputShape:o}}function fc(e){try{return e.map(e=>aE(e))}catch(e){throw Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function ff(e){return e.map(e=>a$(e))}R(fu,"segOpComputeOptimalWindowSize",()=>fh),R(fu,"computeOutShape",()=>fp),R(fu,"collectGatherOpShapeInfo",()=>fd),l(ch,uV),l(ch,og),l(ch,cp),l(ch,lH),l(ch,dl),l(ch,cf),l(ch,cx),l(ch,cw),l(ch,cS),l(ch,oT),l(ch,o$),l(ch,cA),l(ch,cD),l(ch,rO),l(ch,cB),l(ch,cX),l(ch,c2),l(ch,c4),l(ch,c7),l(ch,fa);var fm={};R(fm,"nonMaxSuppressionV3Impl",()=>dE),R(fm,"nonMaxSuppressionV4Impl",()=>dA),R(fm,"nonMaxSuppressionV5Impl",()=>dR),R(fm,"whereImpl",()=>pj),l(iC,lF),l(iC,ci),l(iC,iQ),l(iC,r_),l(iC,eZ),l({},iC);let fg={kernelName:eJ,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>li(e,pF(iS(n,"float32"),-1))}}},fy=st({avgPool3dGrad_:function(e,t,n,r,a,s){let i=a7(e,"dy","avgPool3dGrad"),o=a7(t,"input","avgPool3dGrad"),l=i,u=o,h=!1;4===o.rank&&(h=!0,l=l5(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=l5(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),j(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),j(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),l6("avgPool3dGrad",a,s);let p={dy:l,input:u},d=aQ.runKernel(ts,p,{filterSize:n,strides:r,pad:a,dimRoundingMode:s});return h?l5(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),fb=st({avgPoolGrad_:function(e,t,n,r,a){let s=a7(e,"dy","avgPoolGrad"),i=a7(t,"input","avgPoolGrad");j(i.rank===s.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${s.rank})`);let o=i,l=s,u=!1;3===i.rank&&(u=!0,o=l5(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=l5(s,[1,s.shape[0],s.shape[1],s.shape[2]])),j(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),j(4===o.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`);let h={dy:l,input:o},p=aQ.runKernel(tr,h,{filterSize:n,strides:r,pad:a});return u?l5(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),fx={kernelName:tm,inputsToSave:["x"],gradFunc:fg.gradFunc},fk=st({conv3DBackpropFilter_:function(e,t,n,r,a){let s=e;4===e.rank&&(s=l5(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=l5(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),j(5===s.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${s.shape}.`),j(5===i.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),j(5===n.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`),j(s.shape[4]===n[3],()=>`Error in conv3dDerFilter: depth of input ${s.shape[4]}) must match input depth in filter (${n[3]}.`),j(i.shape[4]===n[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`);let o={x:s,dy:i};return aQ.runKernel(tv,o,{strides:r,pad:a,filterShape:n})}});function fv(e,t){let n=[];for(let r=e;r<t;++r)n.push(r);return n}function fw(e){let t=[];for(let n=0;n<e.length;++n)for(let r=0;r<e[n].length;++r)t.push(e[n][r]);return t}let fI=st({localResponseNormalizationBackprop_:function(e,t,n,r=5,a=1,s=1,i=.5){return aQ.runKernel(np,{x:e,y:t,dy:n},{depthRadius:r,bias:a,alpha:s,beta:i})}});function fS(e,t,n,r){return t.rank<n.rank&&(t=l5(t,uq(t.shape,r))),e.rank<n.rank&&(e=l5(e,uq(e.shape,r))),{x:()=>{let r=li(e,iS(u_(n,t),e.dtype));return r}}}let fN={kernelName:nd,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{let{reductionIndices:r}=n,a=t[0],s=t[1],i=eo(r,a.shape),o=fS(e,s,a,i);return{x:()=>o.x()}}},fT=st({maxPool3dGrad_:function(e,t,n,r,a,s,i){let o=a7(e,"dy","maxPool3dGrad"),l=a7(t,"input","maxPool3dGrad"),u=a7(n,"output","maxPool3dGrad"),h=o,p=l,d=u,c=!1;4===l.rank&&(c=!0,h=l5(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),p=l5(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=l5(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),j(5===h.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${h.rank}.`),j(5===p.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${p.rank}.`),j(5===d.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`),l6("maxPool3dGrad",s,i);let f={dy:h,input:p,output:d},m=aQ.runKernel(ny,f,{filterSize:r,strides:a,pad:s,dimRoundingMode:i});return c?l5(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),fC=st({maxPoolGrad_:function(e,t,n,r,a,s,i){let o=a7(e,"dy","maxPoolGrad"),l=a7(t,"input","maxPoolGrad"),u=a7(n,"output","maxPoolGrad");return j(l.rank===o.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`),j(4===o.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`),j(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),l6("maxPoolGrad",s,i),aQ.runKernel(nm,{dy:o,input:l,output:u},{filterSize:r,strides:a,pad:s,dimRoundingMode:i})}}),f$={kernelName:n_,inputsToSave:["x"],gradFunc:(e,t,n)=>{let r=t[0],{paddings:a}=n,s=a.map(e=>e[0]);return{x:()=>ut(e,s,r.shape)}}},fE={kernelName:rn,gradFunc:(e,t,n)=>{let{blockShape:r,paddings:a}=n;return{x:()=>ua(e,r,a)}}},fA={kernelName:rr,gradFunc:(e,t,n)=>{let{axis:r}=n;return{x:()=>l9(e,r)}}},fR=[fg,{kernelName:eQ,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>{let t=ll(iS(n,"float32")),r=lo(lI(ly(1),t));return od(ls(e,r))}}}},{kernelName:e0,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>{let t=lo(lI(ll(iS(n,"float32")),1));return ls(e,t)}}}},{kernelName:e1,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=ox(n.shape,r.shape);return{a:()=>{let t=e,r=ob(n.shape,a);return r.length>0&&(t=uQ(t,r)),l5(t,n.shape)},b:()=>{let t=e,n=ob(r.shape,a);return n.length>0&&(t=uQ(t,n)),l5(t,r.shape)}}}},{kernelName:e2,saveAllInputs:!0,gradFunc:(e,t)=>{let n={};return t.forEach((t,r)=>{n[r]=()=>e.clone()}),n}},{kernelName:e6,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>lu(n)}}},{kernelName:e5,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>lu(n)}}},{kernelName:e8,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>ls(e,lo(lI(ly(1),ll(iS(n,"float32")))))}}},{kernelName:e7,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>{let t=lo(lr(ly(1),ll(iS(n,"float32"))));return ls(e,t)}}}},{kernelName:tt,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=ox(n.shape,r.shape);return{a:()=>{let t=lr(ll(n),ll(r)),s=li(e,ls(r,t)),i=ob(n.shape,a);return i.length>0&&(s=uQ(s,i)),l5(s,n.shape)},b:()=>{let t=lr(ll(n),ll(r)),s=od(li(e,ls(n,t))),i=ob(r.shape,a);return i.length>0&&(s=uQ(s,i)),l5(s,r.shape)}}}},{kernelName:e9,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>ls(e,lr(ll(iS(n,"float32")),1))}}},{kernelName:te,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>ls(e,lI(ly(1),ll(iS(n,"float32"))))}}},{kernelName:ta,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{filterSize:a,strides:s,pad:i,dimRoundingMode:o}=n;return{x:()=>fy(e,r,a,s,i,o)}}},{kernelName:tn,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{filterSize:a,strides:s,pad:i}=n;return{x:()=>fb(e,r,a,s,i)}}},{kernelName:ti,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{let[r,a]=t,{transposeA:s,transposeB:i}=n;return s||i?!s&&i?{a:()=>iY(e,a,!1,!1),b:()=>iY(e,r,!0,!1)}:s&&!i?{a:()=>iY(a,e,!1,!0),b:()=>iY(r,e,!1,!1)}:{a:()=>iY(a,e,!0,!0),b:()=>iY(e,r,!0,!0)}:{a:()=>iY(e,a,!1,!0),b:()=>iY(r,e,!0,!1)}}},{kernelName:to,gradFunc:(e,t,n)=>{let{blockShape:r,crops:a}=n;return{x:()=>hU(e,r,a)}}},{kernelName:tu,gradFunc:(e,t,n)=>{let r=n.inputShape,a=n.shape,s=Array.from(a);for(let e=r.length-1;e>=0;e--)if(r[e]===a[e])s[e]=1;else if(1!==r[e])throw Error(`broadcastTo(): [${r}] cannot be broadcast to [${a}].`);let i=[];for(let e=0;e<s.length;e++)s[e]>1&&i.push(e);return{x:()=>uQ(e,i,!0)}}},{kernelName:tp,gradFunc:e=>({x:()=>e.clone()})},{kernelName:td,gradFunc:e=>({x:()=>lu(e)})},{kernelName:tc,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{clipValueMin:a,clipValueMax:s}=n;return{x:()=>uO(hm(he(r,a),hi(r,s)),e,lu(e))}}},fx,{kernelName:tg,saveAllInputs:!0,gradFunc:(e,t,n)=>{let r=t.map(e=>e.shape),{axis:a}=n,s=eo(a,t[0].shape)[0],i=r.map(e=>e[s]),o=pC(e,i,s);return o.map(e=>()=>e)}},{kernelName:tx,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{let[r,a]=t,{strides:s,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>ub(e,a,s,i,o,1,l),filter:()=>di(e,r,a.shape,s,i,o,l)}}},{kernelName:ty,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{let[r,a]=t,{dilations:s,strides:i,pad:o,dataFormat:l}=n;return j(l2(s),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`),{x:()=>uk(r.shape,e,a,i,o,l),filter:()=>di(r,e,a.shape,i,o,l)}}},{kernelName:tk,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{let{dilations:r,strides:a,pad:s}=n;j(l2(r),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`);let[i,o]=t;return{x:()=>uI(i.shape,e,o,a,s),filter:()=>fk(i,e,o.shape,a,s)}}},{kernelName:tI,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>li(od(py(iS(n,"float32"))),e)}}},{kernelName:tS,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>li(pb(iS(n,"float32")),e)}}},{kernelName:tT,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{axis:a,exclusive:s,reverse:i}=n;return{x:()=>{let t=uK([a],r.rank),n=u$(e,a,s,!i);return null!=t&&(n=of(n,t)),n}}}},{kernelName:tA,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{let{dilations:r,strides:a,pad:s,dimRoundingMode:i}=n,o=null==r?[1,1]:r;j(l2(o),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);let[l,u]=t;return j(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),j(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),j(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),j(l3(a,o),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${a} and dilations '${o}'.`),l6("depthwiseConv2d",s,i),{x:()=>dm(l.shape,e,u,a,s,o,i),filter:()=>df(l,e,u.shape,a,s,o,i)}}},{kernelName:t_,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{let[r,a]=t,s={x:r,filter:a,dy:e},i={x:r,filter:a,dy:e};return{x:()=>aQ.runKernel(tO,s,n),filter:()=>aQ.runKernel(tM,i,n)}}},{kernelName:tL,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=ox(n.shape,r.shape);return{a:()=>{let t=ls(e,iS(r,"float32")),s=ob(n.shape,a);return s.length>0?l5(uQ(t,s),n.shape):t},b:()=>{let t=li(e,iS(n,"float32")),s=ob(r.shape,a);s.length>0&&(t=l5(uQ(t,s),r.shape));let i=ll(r);return od(ls(t,iS(i,"float32")))}}}},{kernelName:tP,outputsToSave:[!0],gradFunc:(e,t)=>{let[n]=t,r={dy:e,y:n};return{x:()=>aQ.runKernel(tB,r)}}},{kernelName:tW,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t,r=li(u2(od(ll(n))),2/Math.sqrt(Math.PI));return{x:()=>li(e,r)}}},{kernelName:tU,outputsToSave:[!0],gradFunc:(e,t)=>{let[n]=t;return{x:()=>li(e,n)}}},{kernelName:tG,inputsToSave:["input"],gradFunc:(e,t)=>{let[n]=t;return{input:()=>l5(e,n.shape)}}},{kernelName:tH,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>li(e,u2(n))}}},{kernelName:tY,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=ox(n.shape,r.shape);return{a:()=>{let t=ls(e,iS(r,"float32")),s=ob(n.shape,a);return s.length>0?l5(uQ(t,s),n.shape):t},b:()=>{let t=li(e,iS(n,"float32")),s=ob(r.shape,a);s.length>0&&(t=l5(uQ(t,s),r.shape));let i=ll(r);return od(ls(t,iS(i,"float32")))}}}},{kernelName:tX,gradFunc:e=>({x:()=>lu(e)})},{kernelName:tZ,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{let{varianceEpsilon:r}=n,[a,s,i,o]=t,l=null==o?ly(1):o,u=ob(s.shape,a.shape),h=[];if(1===s.rank){for(let e=0;e<a.shape.length-1;++e)h.push(a.shape[e]);h.push(1)}let p=lI(a,s),d=li(e,l),c=pp(lr(i,ly(r))),f=li(li(li(c,c),c),ly(-.5));return{x:()=>1===s.rank?l5(li(li(e,u6(l5(c,[1,1,1,s.shape[0]]),h)),l),a.shape):l5(li(li(e,c),l),a.shape),mean:()=>{let e=li(li(c,ly(-1)),d);return 1===s.rank&&(e=uQ(e,u)),l5(e,s.shape)},variance:()=>{let e=li(li(f,p),d);return 1===s.rank&&(e=uQ(e,u)),l5(e,s.shape)},scale:()=>{let t=li(p,c),n=li(e,t);return 1===s.rank&&(n=uQ(n,u)),l5(n,s.shape)},offset:()=>{let t=e;return 1===s.rank&&(t=uQ(t,u)),l5(t,s.shape)}}}},{kernelName:tJ,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{let[r,a]=t,{axis:s}=n,i=eo(s,r.shape)[0];return{x:()=>{let t=r.shape,n=a.size,o=t.slice(0,i),l=o.length,u=t.slice(s,t.length).slice(1),h=u.length,p=fv(0,l),d=fv(l+1,l+1+h),c=fw([o,[n],u]),f=l5(e,c),m=l5(a,[n]),g=fw([[l],p,d]),y=of(f,g),b=pU(y,m,r.shape[i]),x=uX(g);return of(b,x)},indices:()=>a}}},{kernelName:t1,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t;return{a:()=>lu(n),b:()=>lu(r)}}},{kernelName:t2,gradFunc:e=>({x:()=>iS(e,"float32")})},{kernelName:t6,gradFunc:e=>({x:()=>lu(e)})},{kernelName:t5,gradFunc:e=>({x:()=>lu(e)})},{kernelName:t8,gradFunc:e=>({x:()=>lu(e)})},{kernelName:t7,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{alpha:a}=n,s=u9(r,0);return{x:()=>uO(s,e,li(e,a))}}},{kernelName:nr,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>ls(e,lr(n,1))}}},{kernelName:nn,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>ls(e,iS(n,"float32"))}}},{kernelName:nl,inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{let[r]=t,{axis:a}=n;return{logits:()=>{let t=u2(r);return lI(e,li(uQ(e,a,!0),t))}}}},{kernelName:nh,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{let[r,a]=t,{depthRadius:s,bias:i,alpha:o,beta:l}=n;return{x:()=>fI(r,a,e,s,i,o,l)}}},fN,fN,{kernelName:nc,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t;return{a:()=>li(e,iS(he(n,r),"float32")),b:()=>li(e,iS(hs(n,r),"float32"))}}},{kernelName:ng,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{let[r,a]=t,{filterSize:s,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>fT(e,r,a,s,i,o,l)}}},{kernelName:nf,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{let[r,a]=t,{filterSize:s,strides:i,pad:o}=n;return{x:()=>fC(e,r,a,s,i,o)}}},{kernelName:nx,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{axis:a}=n,s=eo(a,r.shape),i=uH(r.shape,s),o=i[1],l=Z(o);return{x:()=>{let t=r.shape.slice();s.forEach(e=>{t[e]=1});let n=l5(e,t),a=ls(li(n,hC(r.shape,"float32")),l);return a}}}},{kernelName:nk,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{let{axis:r}=n,[a,s]=t,i=eo(r,a.shape),o=fS(e,s,a,i);return{x:()=>o.x()}}},{kernelName:nv,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t;return{a:()=>li(e,iS(hi(n,r),"float32")),b:()=>li(e,iS(u9(n,r),"float32"))}}},{kernelName:nw,inputsToSave:["x"],gradFunc:(e,t,n)=>{let r=t[0],{paddings:a}=n,s=a.map(e=>e[0]);return{x:()=>ut(e,s,r.shape)}}},{kernelName:nI,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=ox(n.shape,r.shape);return{a:()=>{let t=ob(n.shape,a);return t.length>0?l5(uQ(e,t),n.shape):e},b:()=>{let t=li(e,od(u8(ls(n,r)))),s=ob(r.shape,a);return s.length>0?l5(uQ(t,s),r.shape):t}}}},{kernelName:nN,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=ox(n.shape,r.shape);return{a:()=>{let t=li(e,iS(r,"float32")),s=ob(n.shape,a);return s.length>0?l5(uQ(t,s),n.shape):t},b:()=>{let t=li(e,iS(n,"float32")),s=ob(r.shape,a);return s.length>0?l5(uQ(t,s),r.shape):t}}}},{kernelName:nT,gradFunc:e=>({x:()=>od(e)})},{kernelName:nF,inputsToSave:["indices"],gradFunc:(e,t)=>{let n=t[0];return{indices:()=>hT(n.shape,"float32")}}},{kernelName:nR,gradFunc:e=>({x:()=>lu(e)})},{kernelName:nD,saveAllInputs:!0,gradFunc:(e,t,n)=>{let{axis:r}=n,a=pG(e,r);return a.map(e=>()=>e)}},f$,f$,{kernelName:nM,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{let[n,r,a]=t,s=ox(n.shape,r.shape);return{a:()=>{let t=iS(r,"float32"),a=li(e,li(t,lw(n,lI(t,ly(1))))),i=ob(n.shape,s);return i.length>0&&(a=uQ(a,i)),l5(a,n.shape)},b:()=>{let t=u9(n,0),i=uO(t,hu(n),lu(n)),o=li(e,li(a,i)),l=ob(r.shape,s);return l.length>0&&(o=uQ(o,l)),l5(o,r.shape)}}}},{kernelName:nL,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{let[n,r]=t,a=u9(n,0);return{x:()=>uO(a,e,li(e,r)),alpha:()=>{let t=uO(a,lu(e),li(e,n)),s=ob(r.shape,e.shape);return s.length>0&&(t=uQ(t,s)),l5(t,r.shape)}}}},{kernelName:nz,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{axis:a}=n,s=[];return s=null==a?r.shape.map((e,t)=>t):"number"==typeof a?[a]:a,{x:()=>(function(e,t,n){let r=e.shape.length,a=r-n.length,s=ch.getAxesPermutation(n,r),i=e;null!=s&&(i=of(e,s));let o=i.shape.slice(),l=o.splice(r-n.length,n.length),u=l.reduce((e,t)=>e*t,1);o.push(u);let h=i.reshape(o),p=function(e,t,n){let r=e.shape.slice();r[n]=1;let a=l5(t,r),s=uC(e,n,!0,!1),i=uC(e,n,!0,!0),o=li(s,i);return li(a,o)}(h,t,a);if(p=p.reshape(i.shape),null!=s){let e=ch.getUndoAxesPermutation(s);p=of(p,e)}return p})(r,e,s)}}},{kernelName:nU,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>ls(e,od(ll(n)))}}},{kernelName:nY,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t,r=li(hi(n,6),pF(n));return{x:()=>li(e,iS(r,"float32"))}}},{kernelName:nG,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>li(e,iS(pF(n),"float32"))}}},{kernelName:nH,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>l5(e,n.shape)}}},{kernelName:nK,inputsToSave:["images"],gradFunc:(e,t,n)=>{let[r]=t,a={dy:e,images:r};return{images:()=>aQ.runKernel(nX,a,n)}}},{kernelName:nq,inputsToSave:["images"],gradFunc:(e,t,n)=>{let[r]=t,a={dy:e,images:r};return{images:()=>aQ.runKernel(nj,a,n)}}},{kernelName:nZ,gradFunc:(e,t,n)=>{let{dims:r}=n,a=eo(r,e.shape);return{x:()=>ps(e,a)}}},{kernelName:nJ,gradFunc:e=>({x:()=>lu(e)})},{kernelName:nQ,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>od(ls(e,li(lw(n,1.5),2)))}}},{kernelName:n2,inputsToSave:["condition"],gradFunc:(e,t)=>{let[n]=t;return{condition:()=>iS(lu(n),"float32"),t:()=>li(e,iS(n,e.dtype)),e:()=>li(e,iS(hg(n),e.dtype))}}},{kernelName:n3,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>{let t=u9(n,ly(0)),r=ly(cR),a=ly(cF),s=li(e,a),i=li(li(e,r),u2(iS(n,"float32")));return uO(t,s,i)}}}},{kernelName:n7,outputsToSave:[!0],gradFunc:(e,t)=>{let[n]=t;return{x:()=>li(e,li(n,lI(ly(1),n)))}}},{kernelName:n8,gradFunc:e=>({x:()=>lu(e)})},{kernelName:n6,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>li(uN(iS(n,"float32")),e)}}},{kernelName:n5,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>li(uT(iS(n,"float32")),e)}}},{kernelName:n4,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{begin:a,size:s}=n,i=r.shape,[o,l]=oq(r,a,s),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>hz(e,u)}}},{kernelName:ra,outputsToSave:[!0],gradFunc:(e,t,n)=>{let[r]=t,{dim:a}=n,s=li(e,r);return{logits:()=>lI(s,li(uQ(s,[a],!0),r))}}},{kernelName:n9,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>li(e,ue(n))}}},fE,fE,fA,fA,{kernelName:re,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>ls(e,li(lo(iS(n,"float32")),2))}}},{kernelName:rh,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=ly(2);return{a:()=>li(e,li(a,lI(n,r))),b:()=>li(e,li(a,lI(r,n)))}}},{kernelName:rp,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>li(e,li(iS(n,"float32"),2))}}},{kernelName:r$,gradFunc:e=>({x:()=>lu(e)})},{kernelName:rg,inputsToSave:["a","b"],gradFunc:(e,t)=>{let[n,r]=t,a=ox(n.shape,r.shape);return{a:()=>{let t=e,r=ob(n.shape,a);return r.length>0&&(t=uQ(t,r)),l5(t,n.shape)},b:()=>{let t=e,n=ob(r.shape,a);return n.length>0&&(t=uQ(t,n)),l5(od(t),r.shape)}}}},{kernelName:rt,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,a=r.shape.slice(),{axis:s}=n,i=eo(s,r.shape);i.forEach(e=>{a[e]=1});let o=l5(e,a),l=li(o,hC(r.shape,"float32"));return{x:()=>l}}},{kernelName:ry,inputsToSave:["x"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>ls(e,ll(uN(n)))}}},{kernelName:rb,outputsToSave:[!0],gradFunc:(e,t)=>{let[n]=t;return{x:()=>li(lI(ly(1),ll(n)),e)}}},{kernelName:rx,inputsToSave:["x"],gradFunc:(e,t,n)=>{let[r]=t,{reps:a}=n;return{x:()=>{let t=lu(r);if(1===r.rank)for(let n=0;n<a[0];++n)t=lr(t,ut(e,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<a[0];++n)for(let s=0;s<a[1];++s)t=lr(t,ut(e,[n*r.shape[0],s*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<a[0];++n)for(let s=0;s<a[1];++s)for(let i=0;i<a[2];++i)t=lr(t,ut(e,[n*r.shape[0],s*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else if(4===r.rank)for(let n=0;n<a[0];++n)for(let s=0;s<a[1];++s)for(let i=0;i<a[2];++i)for(let o=0;o<a[3];++o)t=lr(t,ut(e,[n*r.shape[0],s*r.shape[1],i*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]));else throw Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);return t}}}},{kernelName:rw,gradFunc:(e,t,n)=>{let{perm:r}=n,a=uX(r);return{x:()=>of(e,a)}}},{kernelName:rS,gradFunc:(e,t,n)=>{let{axis:r}=n;return{value:()=>pR(e,r)}}},{kernelName:rN,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{let[n]=t;return{x:()=>(function(e,t){let n=lT(t,lu(t)),r=u7(e,n),a=he(t,ly(0,"int32")),s=r.rank-a.rank;for(let e=0;e<s;++e)a=u3(a,e+1);a=hm(a,hC(r.shape,"bool"));let i=lu(r);return uO(a,r,i)})(e,n)}}},{kernelName:rC,gradFunc:e=>({x:()=>lu(e)})}];for(let e of fR)rG(e);aP().prototype.abs=function(){return this.throwIfDisposed(),lN(this)},aP().prototype.acos=function(){return this.throwIfDisposed(),lD(this)},aP().prototype.acosh=function(){return this.throwIfDisposed(),l_(this)},aP().prototype.add=function(e){return this.throwIfDisposed(),lr(this,e)},aP().prototype.all=function(e,t){return this.throwIfDisposed(),lM(this,e,t)},aP().prototype.any=function(e,t){return this.throwIfDisposed(),lL(this,e,t)},aP().prototype.argMax=function(e){return this.throwIfDisposed(),lz(this,e)},aP().prototype.argMin=function(e){return this.throwIfDisposed(),lP(this,e)},aP().prototype.asScalar=function(){return this.throwIfDisposed(),j(1===this.size,()=>"The array must have only 1 element."),l5(this,[])},aP().prototype.asType=function(e){return this.throwIfDisposed(),iS(this,e)},aP().prototype.as1D=function(){return this.throwIfDisposed(),l5(this,[this.size])},aP().prototype.as2D=function(e,t){return this.throwIfDisposed(),l5(this,[e,t])},aP().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),l5(this,[e,t,n])},aP().prototype.as4D=function(e,t,n,r){return this.throwIfDisposed(),l5(this,[e,t,n,r])},aP().prototype.as5D=function(e,t,n,r,a){return this.throwIfDisposed(),l5(this,[e,t,n,r,a])},aP().prototype.asin=function(){return this.throwIfDisposed(),lB(this)},aP().prototype.asinh=function(){return this.throwIfDisposed(),lW(this)},aP().prototype.atan=function(){return this.throwIfDisposed(),lV(this)},aP().prototype.atan2=function(e){return this.throwIfDisposed(),lU(this,e)},aP().prototype.atanh=function(){return this.throwIfDisposed(),lG(this)},aP().prototype.avgPool=function(e,t,n,r){return this.throwIfDisposed(),l8(this,e,t,n,r)},aP().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),ua(this,e,t)},aP().prototype.batchNorm=function(e,t,n,r,a){return this.throwIfDisposed(),us(this,e,t,n,r,a)},aP().prototype.broadcastTo=function(e){return this.throwIfDisposed(),up(this,e)},aP().prototype.cast=function(e){return this.throwIfDisposed(),iS(this,e)},aP().prototype.ceil=function(){return this.throwIfDisposed(),ud(this)},aP().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),uc(this,e,t)},aP().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof az&&(e=[e]),l9([this,...e],t)},aP().prototype.conv1d=function(e,t,n,r,a,s){return this.throwIfDisposed(),ux(this,e,t,n,r,a,s)},aP().prototype.conv2dTranspose=function(e,t,n,r,a){return this.throwIfDisposed(),uv(this,e,t,n,r,a)},aP().prototype.conv2d=function(e,t,n,r,a,s){return this.throwIfDisposed(),ub(this,e,t,n,r,a,s)},aP().prototype.cos=function(){return this.throwIfDisposed(),uN(this)},aP().prototype.cosh=function(){return this.throwIfDisposed(),uT(this)},aP().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),uC(this,e,t,n)},aP().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),u$(this,e,t,n)},aP().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),uA(this,e,t)},aP().prototype.depthwiseConv2d=function(e,t,n,r,a,s){return this.throwIfDisposed(),uR(this,e,t,n,r,a,s)},aP().prototype.dilation2d=function(e,t,n,r,a){return this.throwIfDisposed(),uD(this,e,t,n,r,a)},aP().prototype.divNoNan=function(e){return this.throwIfDisposed(),uM(this,e)},aP().prototype.div=function(e){return this.throwIfDisposed(),ls(this,e)},aP().prototype.dot=function(e){return this.throwIfDisposed(),uL(this,e)},aP().prototype.elu=function(){return this.throwIfDisposed(),uP(this)},aP().prototype.equal=function(e){return this.throwIfDisposed(),u_(this,e)},aP().prototype.erf=function(){return this.throwIfDisposed(),uB(this)},aP().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),u1(this,e,t)},aP().prototype.exp=function(){return this.throwIfDisposed(),u2(this)},aP().prototype.expandDims=function(e){return this.throwIfDisposed(),u3(this,e)},aP().prototype.expm1=function(){return this.throwIfDisposed(),u4(this)},aP().prototype.fft=function(){return this.throwIfDisposed(),pS(this)},aP().prototype.flatten=function(){return this.throwIfDisposed(),l5(this,[this.size])},aP().prototype.floor=function(){return this.throwIfDisposed(),u8(this)},aP().prototype.floorDiv=function(e){return this.throwIfDisposed(),la(this,e)},aP().prototype.gather=function(e,t){return this.throwIfDisposed(),u7(this,e,t)},aP().prototype.greaterEqual=function(e){return this.throwIfDisposed(),he(this,e)},aP().prototype.greater=function(e){return this.throwIfDisposed(),u9(this,e)},aP().prototype.ifft=function(){return this.throwIfDisposed(),pN(this)},aP().prototype.irfft=function(){return this.throwIfDisposed(),pT(this)},aP().prototype.isFinite=function(){return this.throwIfDisposed(),ht(this)},aP().prototype.isInf=function(){return this.throwIfDisposed(),hn(this)},aP().prototype.isNaN=function(){return this.throwIfDisposed(),hr(this)},aP().prototype.leakyRelu=function(e){return this.throwIfDisposed(),ha(this,e)},aP().prototype.lessEqual=function(e){return this.throwIfDisposed(),hi(this,e)},aP().prototype.less=function(e){return this.throwIfDisposed(),hs(this,e)},aP().prototype.localResponseNormalization=function(e,t,n,r){return this.throwIfDisposed(),hl(this,e,t,n,r)},aP().prototype.logSigmoid=function(){return this.throwIfDisposed(),hd(this)},aP().prototype.logSoftmax=function(e){return this.throwIfDisposed(),hc(this,e)},aP().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),hf(this,e,t)},aP().prototype.log=function(){return this.throwIfDisposed(),hu(this)},aP().prototype.log1p=function(){return this.throwIfDisposed(),hh(this)},aP().prototype.logicalAnd=function(e){return this.throwIfDisposed(),hm(this,e)},aP().prototype.logicalNot=function(){return this.throwIfDisposed(),hg(this)},aP().prototype.logicalOr=function(e){return this.throwIfDisposed(),hy(this,e)},aP().prototype.logicalXor=function(e){return this.throwIfDisposed(),hb(this,e)},aP().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),iY(this,e,t,n)},aP().prototype.maxPool=function(e,t,n,r){return this.throwIfDisposed(),hw(this,e,t,n,r)},aP().prototype.max=function(e,t){return this.throwIfDisposed(),uZ(this,e,t)},aP().prototype.maximum=function(e){return this.throwIfDisposed(),lT(this,e)},aP().prototype.mean=function(e,t){return this.throwIfDisposed(),hN(this,e,t)},aP().prototype.min=function(e,t){return this.throwIfDisposed(),uJ(this,e,t)},aP().prototype.minimum=function(e){return this.throwIfDisposed(),hE(this,e)},aP().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),hA(this,e,t)},aP().prototype.mod=function(e){return this.throwIfDisposed(),hR(this,e)},aP().prototype.mul=function(e){return this.throwIfDisposed(),li(this,e)},aP().prototype.neg=function(){return this.throwIfDisposed(),od(this)},aP().prototype.norm=function(e,t,n){return this.throwIfDisposed(),u0(this,e,t,n)},aP().prototype.notEqual=function(e){return this.throwIfDisposed(),hO(this,e)},aP().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),iZ(this,e,t,n)},aP().prototype.onesLike=function(){return this.throwIfDisposed(),hM(this)},aP().prototype.pad=function(e,t){return this.throwIfDisposed(),hz(this,e,t)},aP().prototype.pool=function(e,t,n,r,a,s){return this.throwIfDisposed(),hG(this,e,t,n,r,a,s)},aP().prototype.pow=function(e){return this.throwIfDisposed(),lw(this,e)},aP().prototype.prelu=function(e){return this.throwIfDisposed(),hH(this,e)},aP().prototype.prod=function(e,t){return this.throwIfDisposed(),hq(this,e,t)},aP().prototype.reciprocal=function(){return this.throwIfDisposed(),pn(this)},aP().prototype.relu=function(){return this.throwIfDisposed(),pr(this)},aP().prototype.relu6=function(){return this.throwIfDisposed(),pa(this)},aP().prototype.reshapeAs=function(e){return this.throwIfDisposed(),l5(this,e.shape)},aP().prototype.reshape=function(e){return this.throwIfDisposed(),l5(this,e)},aP().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),dP(this,e,t,n)},aP().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),dB(this,e,t,n)},aP().prototype.reverse=function(e){return this.throwIfDisposed(),ps(this,e)},aP().prototype.rfft=function(){return this.throwIfDisposed(),p$(this)},aP().prototype.round=function(){return this.throwIfDisposed(),ph(this)},aP().prototype.rsqrt=function(){return this.throwIfDisposed(),pp(this)},aP().prototype.selu=function(){return this.throwIfDisposed(),pd(this)},aP().prototype.separableConv2d=function(e,t,n,r,a,s){return this.throwIfDisposed(),pc(this,e,t,n,r,a,s)},aP().prototype.sigmoid=function(){return this.throwIfDisposed(),ue(this)},aP().prototype.sign=function(){return this.throwIfDisposed(),pg(this)},aP().prototype.sin=function(){return this.throwIfDisposed(),py(this)},aP().prototype.sinh=function(){return this.throwIfDisposed(),pb(this)},aP().prototype.slice=function(e,t){return this.throwIfDisposed(),ut(this,e,t)},aP().prototype.softmax=function(e){return this.throwIfDisposed(),pI(this,e)},aP().prototype.softplus=function(){return this.throwIfDisposed(),hp(this)},aP().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),hU(this,e,t)},aP().prototype.split=function(e,t){return this.throwIfDisposed(),pC(this,e,t)},aP().prototype.sqrt=function(){return this.throwIfDisposed(),lo(this)},aP().prototype.square=function(){return this.throwIfDisposed(),ll(this)},aP().prototype.squaredDifference=function(e){return this.throwIfDisposed(),pE(this,e)},aP().prototype.squeeze=function(e){return this.throwIfDisposed(),pA(this,e)},aP().prototype.stack=function(e,t){this.throwIfDisposed();let n=e instanceof az?[this,e]:[this,...e];return pR(n,t)},aP().prototype.step=function(e){return this.throwIfDisposed(),pF(this,e)},aP().prototype.stridedSlice=function(e,t,n,r,a,s,i,o){return this.throwIfDisposed(),pD(this,e,t,n,r,a,s,i,o)},aP().prototype.sub=function(e){return this.throwIfDisposed(),lI(this,e)},aP().prototype.sum=function(e,t){return this.throwIfDisposed(),uQ(this,e,t)},aP().prototype.tan=function(){return this.throwIfDisposed(),p_(this)},aP().prototype.tanh=function(){return this.throwIfDisposed(),un(this)},aP().prototype.tile=function(e){return this.throwIfDisposed(),u6(this,e)},aP().prototype.toBool=function(){return this.throwIfDisposed(),iS(this,"bool")},aP().prototype.toFloat=function(){return this.throwIfDisposed(),iS(this,"float32")},aP().prototype.toInt=function(){return this.throwIfDisposed(),iS(this,"int32")},aP().prototype.topk=function(e,t){return this.throwIfDisposed(),pB(this,e,t)},aP().prototype.transpose=function(e){return this.throwIfDisposed(),of(this,e)},aP().prototype.unique=function(e){return this.throwIfDisposed(),pV(this,e)},aP().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),pU(this,e,t)},aP().prototype.unstack=function(e){return this.throwIfDisposed(),pG(this,e)},aP().prototype.where=function(e,t){return this.throwIfDisposed(),uO(e,this,t)},aP().prototype.zerosLike=function(){return this.throwIfDisposed(),lu(this)};class fF extends Error{constructor(e){super(e),Object.setPrototypeOf(this,fF.prototype)}}class fD extends Error{constructor(e){super(e),Object.setPrototypeOf(this,fD.prototype)}}class f_ extends Error{constructor(e){super(e),Object.setPrototypeOf(this,f_.prototype)}}class fO extends Error{constructor(e){super(e),Object.setPrototypeOf(this,fO.prototype)}}class fM extends Error{constructor(e){super(e),Object.setPrototypeOf(this,fM.prototype)}}class fL{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){let e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){let e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function fz(e,t){if(Array.isArray(e)){let n=[];for(let r=0;r<t;r++)n=n.concat(e);return n}{let n=Array(t);return n.fill(e),n}}function fP(e,t){if(!e)throw new fM(t)}function fB(e,t){let n=0;for(let r of e)r===t&&n++;return n}function fW(e){return 1===e.length?e[0]:e}function fV(e){return Array.isArray(e)?e:[e]}function fU(e){let t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2"),n=t.replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==n[0]?n:"private"+n}function fG(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,(e,t)=>t.toUpperCase())}let fH={};function fq(e){if(null==e)return null;let t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function fj(e,t={},n={},r="object",a=!1){if("string"==typeof e){let a;if(e in n)a=n[e];else if(e in fH)a=fH[e];else if(null==(a=t[e]))throw new f_(`Unknown ${r}: ${e}. This may be due to one of the following reasons:
1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{let s,i;if(null==e.className||null==e.config)throw new f_(`${r}: Improper config format: ${JSON.stringify(e)}.
'className' and 'config' must set.`);let o=e.className;if(o in n?[s,i]=n[o]:o in fH?[s,i]=fH.className:o in t&&([s,i]=t[o]),null==s)throw new f_(`Unknown ${r}: ${o}. This may be due to one of the following reasons:
1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.
2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=i){let t={};for(let e of Object.keys(fH))t[e]=fH[e];for(let e of Object.keys(n))t[e]=n[e];let r=e.config;r.customObjects=t;let o=Object.assign({},fH);for(let e of Object.keys(n))fH[e]=n[e];!function e(t){if(null!=t&&"object"==typeof t){if(Array.isArray(t))t.forEach(t=>e(t));else{let n=Object.keys(t);for(let r of n){let n=t[r];null!=n&&"object"==typeof n&&(Array.isArray(n)||"ndarray"!==n.type||"number"!=typeof n.value?e(n):t[r]=n.value)}}}}(e.config);let l=i(s,e.config,n,a);return fH=Object.assign({},o),l}{let t=Object.assign({},fH);for(let e of Object.keys(n))fH[e]=n[e];let r=new s(e.config);return fH=Object.assign({},t),r}}}function fK(e,t){return -1*(e<t?-1:e>t?1:0)}function fX(e){if(null==e)return e;let t=[];for(let n of e)-1===t.indexOf(n)&&t.push(n);return t}function fY(e,t,n){if(null!=n&&0>e.indexOf(n))throw new f_(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function fZ(e,t,n=0,r=1/0){return fP(n>=0),fP(r>=n),Array.isArray(e)&&e.length>=n&&e.length<=r&&e.every(e=>typeof e===t)}function fJ(e,t){Array.isArray(e)?(rX.assert(e.length>0,()=>`${t} is unexpectedly an empty array.`),e.forEach((e,n)=>fJ(e,`element ${n+1} of ${t}`))):rX.assert(Number.isInteger(e)&&e>0,()=>`Expected ${t} to be a positive integer, but got ${function e(t){return null===t?"null":Array.isArray(t)?"["+t.map(t=>e(t)).join(",")+"]":"string"==typeof t?`"${t}"`:`${t}`}(e)}.`)}function fQ(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let f0=0,f1={};function f2(e=""){return e in f1||(f1[e]=0),f1[e]+=1,e+f1[e].toString()}let f3=["channelsFirst","channelsLast"],f4=["nearest","bilinear"],f6=["valid","same","causal"],f5=["max","avg"],f8=["sum","mul","concat","ave"],f7=new Map;function f9(e){fY(f3,"DataFormat",e)}function me(e){fY(f6,"PaddingMode",e)}function mt(e){fY(f5,"PoolMode",e)}let mn=[];function mr(e,t){mn.push(e);try{let e=t();return mn.pop(),e}catch(e){throw mn.pop(),e}}function ma(e){if(!mo(e))throw Error("Not a valid tensor name: '"+e+"'");return(0===mn.length?"":mn.join("/")+"/")+e}function ms(e){if(!mo(e))throw Error("Not a valid tensor name: '"+e+"'");f7.has(e)||f7.set(e,0);let t=f7.get(e);if(f7.set(e,f7.get(e)+1),!(t>0))return e;{let n=`${e}_${t}`;return f7.set(n,1),n}}let mi=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function mo(e){return!!e.match(mi)}function ml(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let r=1;for(let a=t;a<n;++a)r*=e[a];return r}function mu(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){let r=e[n];r<t&&(t=r)}return t}function mh(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){let r=e[n];r>t&&(t=r)}return t}function mp(e,t){if(t<e)throw new f_(`end (${t}) < begin (${e}) is forbidden.`);let n=[];for(let r=e;r<t;++r)n.push(r);return n}function md(){return null==a&&(a=ou().epsilon()),a}function mc(){return"channelsLast"}function mf(e,t=-1){let n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),l5(e,n)}function mm(e,t,n){return i7(()=>{switch(e.rank){case 1:return px(e,t,n);case 2:return pk(e,[t,0],[n,e.shape[1]]);case 3:return pv(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return pw(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return ut(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return ut(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new f_(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}})}function mg(e,t,n){return i7(()=>{switch(e.rank){case 1:return px(e,t,n);case 2:return pk(e,[0,t],[e.shape[0],n]);case 3:return pv(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return pw(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new f_(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function my(e,t,n,r){return i7(()=>{switch(e.rank){case 1:return px(e,t,n);case 2:switch(r){case 1:return mm(e,t,n);case 2:return mg(e,t,n);default:throw new f_(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return mm(e,t,n);case 2:return pv(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return mg(e,t,n);default:throw new f_(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return mm(e,t,n);case 2:return pw(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return pw(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return mg(e,t,n);default:throw new f_(`The axis is not within the rank of the tensor ${r}`)}default:throw new f_(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}})}function mb(e,t=-1){let n;return t<0&&(t=0!==(n=e[0].rank)?n:0),t===e[0].rank&&(t=-1),l9(e,t)}function mx(e,t){switch(e.rank){case 1:return uf([e,t]);case 2:return um([e,t],0);case 3:return ug([e,t],0);case 4:return uy([e,t],0);default:throw new f_(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function mk(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new f_(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return u6(e,t)}function mv(e,t=0,n=1,r,a){return h7(e,t,n,r,a)}function mw(e,t,n,r){if(e.rank<2||t.rank<2)throw new fO(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3){let n=e.shape.slice(-1)[0],r=t.shape.slice(-2)[0];if(n!==r)throw new fO(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`)}if(2===e.rank&&2===t.rank)return ds.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?mS(e.rank,r,mc()):null,activation:n});{let a=e.shape.slice(),s=a.pop();e=l5(e,[-1,s]);let i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],h=Array.from({length:t.rank},(e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n);t=l5(of(t,h),[l,-1]);let p=[...a,...u];return l5(ds.matMul({a:e,b:t,transposeA:!1,transposeB:!1,bias:r?mS(e.rank,r,mc()):null,activation:n}),p)}}function mI(e,t,n){return i7(()=>u7(e,t=Array.isArray(t)?pO(t,"int32"):iS(t,"int32"),n))}function mS(e,t,n){let r=t.shape;if(1!==t.rank&&t.rank!==e)throw new f_(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===r.length?l5(t,[1,r[0],1,1,1]):l5(t,[1,r[3],r[0],r[1],r[2]]);if("channelsLast"===n)return 1===r.length?l5(t,[1,1,1,1,r[0]]):l5(t,[1].concat(r))}else if(4===e){if("channelsFirst"===n)return 1===r.length?l5(t,[1,r[0],1,1]):l5(t,[1,r[2],r[0],r[1]]);if("channelsLast"===n)return 1===r.length?l5(t,[1,1,1,r[0]]):l5(t,[1].concat(r))}else if(3===e){if("channelsFirst"===n)return 1===r.length?l5(t,[1,r[0],1]):l5(t,[1,r[1],r[0]]);if("channelsLast"===n)return 1===r.length?l5(t,[1,1,r[0]]):l5(t,[1].concat(r))}else if(e<3)return t;throw new f_(`Unsupported input rank by biasAdd: ${t.rank}`)}function mN(e,t,n){return i7(()=>(null==n&&(n=mc()),f9(n),lr(e,mS(e.rank,t,n))))}function mT(e,t,n=!1){return n?e():t()}let mC=["fanIn","fanOut","fanAvg"],m$=["normal","uniform","truncatedNormal"];class mE extends oX.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class mA extends mE{apply(e,t){return hT(e,t)}}mA.className="Zeros",oX.registerClass(mA);class mR extends mE{apply(e,t){return hC(e,t)}}mR.className="Ones",oX.registerClass(mR);class mF extends mE{constructor(e){if(super(),"object"!=typeof e)throw new f_(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new f_(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return i7(()=>li(ly(this.value),hC(e,t)))}getConfig(){return{value:this.value}}}mF.className="Constant",oX.registerClass(mF);class mD extends mE{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return pe(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}mD.className="RandomUniform",oX.registerClass(mD);class m_ extends mE{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new fO(`randomNormal does not support dType ${t}.`);return mv(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}m_.className="RandomNormal",oX.registerClass(m_);class mO extends mE{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new fO(`truncatedNormal does not support dType ${t}.`);return pW(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}mO.className="TruncatedNormal",oX.registerClass(mO);class mM extends mE{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return i7(()=>{if(2===e.length&&e[0]===e[1])return li(this.gain,u5(e[0]));throw new f_("Identity matrix initializer can only be used for 2D square matrices.")})}getConfig(){return{gain:this.gain}}}mM.className="Identity",oX.registerClass(mM);class mL extends mE{constructor(e){if(super(),e.scale<0)throw new f_(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,fY(mC,"FanMode",this.mode),this.distribution=null==e.distribution?"normal":e.distribution,fY(m$,"Distribution",this.distribution),this.seed=e.seed}apply(e,t){let n=function(e,t="channelsLast"){let n,r;if(f9(t),2===e.length)n=e[0],r=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){let t=ml(e,2);n=e[1]*t,r=e[0]*t}else if("channelsLast"===t){let t=ml(e,0,e.length-2);n=e[e.length-2]*t,r=e[e.length-1]*t}}else{let t=ml(e);n=Math.sqrt(t),r=Math.sqrt(t)}return[n,r]}(e),r=n[0],a=n[1],s=this.scale;if("fanIn"===this.mode?s/=Math.max(1,r):"fanOut"===this.mode?s/=Math.max(1,a):s/=Math.max(1,(r+a)/2),"normal"===this.distribution){let n=Math.sqrt(s);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new fO(`${this.getClassName()} does not support dType ${t}.`);return pW(e,0,n,t,this.seed)}{let n=Math.sqrt(3*s);return pe(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}mL.className="VarianceScaling",oX.registerClass(mL);class mz extends mL{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return mL.className}}mz.className="GlorotUniform",oX.registerClass(mz);class mP extends mL{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return mL.className}}mP.className="GlorotNormal",oX.registerClass(mP);class mB extends mL{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return mL.className}}mB.className="HeNormal",oX.registerClass(mB);class mW extends mL{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return mL.className}}mW.className="HeUniform",oX.registerClass(mW);class mV extends mL{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return mL.className}}mV.className="LeCunNormal",oX.registerClass(mV);class mU extends mL{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return mL.className}}mU.className="LeCunNormal",oX.registerClass(mU);class mG extends mE{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new fO("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return i7(()=>{if(e.length<2)throw new fO("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);let t=e[0]>e[1]?[e[1],e[0]]:e,n=mv(t,0,1,"float32"),r=cn.gramSchmidt(n);return e[0]>e[1]&&(r=of(r)),li(this.gain,r)})}getConfig(){return{gain:this.gain,seed:this.seed}}}mG.className="Orthogonal",oX.registerClass(mG);let mH={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function mq(e,t={}){return fj(e,oX.SerializationMap.getMap().classNameMap,t,"initializer")}function mj(e){if("string"==typeof e){let t=e in mH?mH[e]:e;if("GlorotNormal"===t)return new mP;{if("GlorotUniform"===t)return new mz;if("HeNormal"===t)return new mB;if("HeUniform"===t)return new mW;if("LeCunNormal"===t)return new mV;if("LeCunUniform"===t)return new mU;let e={};return e.className=t,e.config={},mq(e)}}return e instanceof mE?e:mq(e)}function mK(e){return Array.isArray(e)&&Array.isArray(e[0])}function mX(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function mY(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new f_(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function mZ(e){if(!(Array.isArray(e)&&Array.isArray(e[0])))return e;if(1===e.length)return e[0];throw new f_(`Expected exactly 1 Shape; got ${e.length}`)}function mJ(e){let t=0;for(let n of e)0===n.shape.length?t+=1:t+=n.shape.reduce((e,t)=>e*t);return t}let mQ="Variable";class m0{constructor(e,t="float32",n=mQ,r=!0,a=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=f0++,n=null==n?mQ:n,this.originalName=ma(n),this.name=ms(this.originalName),this.trainable_=r,this.constraint=a,this.val=pq(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function m1(e){return e.map(e=>e.read())}function m2(e){e.forEach(e=>{let t=e[0];t.write(e[1])})}class m3{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class m4{constructor(e,t,n,r,a,s,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=r,this.callArgs=a,this.outputTensorIndex=i,this.id=f0++,null!=s&&(this.originalName=ma(s),this.name=ms(this.originalName)),this.rank=t.length}}let m6=0;class m5{constructor(e,t){for(let n of(this.callArgs=t,this.id=m6++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes,e.inboundLayers))null!=n&&n.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){let e=[];for(let t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let m8=0;class m7 extends oX.Serializable{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=m8++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){let e=this.getClassName();t=fU(e)+"_"+f2(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new fD(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new f_(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return fW(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return fW(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new fF(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new fF(`Layer ${this.name} is not connected, no input to return.`);return fW(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new fF(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new fF(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return fW(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(e=>e())}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach(t=>t.trainable=e),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(e=>e.trainable):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(e=>!e.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=fV(e),null==this.inputSpec||0===this.inputSpec.length)return;let t=fV(this.inputSpec);if(e.length!==t.length)throw new f_(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){let r=e[n],a=t[n];if(null==a)continue;let s=r.rank;if(null!=a.ndim&&s!==a.ndim)throw new f_(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${s}`);if(null!=a.maxNDim&&s>a.maxNDim)throw new f_(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${s}`);if(null!=a.minNDim&&s<a.minNDim)throw new f_(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${s}.`);if(null!=a.dtype&&r.dtype!==a.dtype)throw new f_(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${r.dtype}.`);if(a.axes){let e=r.shape;for(let t in a.axes){let r=Number(t),s=a.axes[t],i=r>=0?e[r]:e[e.length+r];if(null!=s&&-1===[s,null].indexOf(i))throw new f_(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${s} but got shape ${e}.`)}}if(null!=a.shape)for(let e=0;e<a.shape.length;++e){let t=a.shape[e],s=r.shape[e];if(null!=t&&null!=s&&t!==s)throw new f_(`Input ${n} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${r.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();let n=fV(e),r=!0;for(let e of n)if(!(e instanceof m4)){r=!1;break}let a=!0;for(let e of n)if(e instanceof m4){a=!1;break}if(r===a)throw new f_("Arguments to apply() must be all SymbolicTensors or all Tensors");return mr(this.name,()=>{if(!this.built){this.assertInputCompatibility(e);let t=[];for(let n of fV(e))t.push(n.shape);this.build(fW(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&a&&(this._refCount=1)}if(this.assertInputCompatibility(e),a){let r=this.call(e,t),a=fV(r),s=[];for(let e of a)-1!==n.indexOf(e)&&(e=e.clone()),s.push(e);if(r=fW(s),null!=this.activityRegularizer)throw new fO("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return r}{let n;let r=function(e){e=fV(e);let t=[];for(let n of e)t.push(n.shape);return fW(t)}(e),a=this.computeOutputShape(r),s="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?r[0]:r),n=null!=a&&a.length>0&&Array.isArray(a[0])?a.map((n,r)=>new m4(s,n,this,fV(e),t,this.name,r)):new m4(s,a,this,fV(e),t,this.name),this.addInboundNode(e,n,null,null,r,a,t),this._refCount++,null!=this.activityRegularizer)throw new fO("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return n}})}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape){if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach((n,r)=>{null!=n&&null!=e[r]&&e[r]!==n&&(t=!0)}),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new fF(`The layer ${this.name} has never been called and thus has no defined output shape.`);let e=[];for(let t of this.inboundNodes){let n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){let e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new fF(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new fD(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return mJ(this.weights)}build(e){this.built=!0}getWeights(e=!1){return m1(e?this.trainableWeights:this.weights)}setWeights(e){i7(()=>{let t=this.weights;if(t.length!==e.length)throw new f_(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;let n=[],r=m1(t);for(let a=0;a<r.length;++a){let s=r[a],i=t[a],o=e[a];if(!rX.arraysEqual(s.shape,o.shape))throw new f_(`Layer weight shape ${s.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}m2(n)})}addWeight(e,t,n,r,a,s,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new f_(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(r=null!=o?o():mj("zeros"));let l=r.apply(t,n),u=new m0(l,n,e,s,i);return l.dispose(),null!=a&&this.addLoss(()=>a.apply(u.read())),null==s&&(s=!0),s?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=fV(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(Array.isArray(t))t.forEach(e=>{if(null!=e)throw TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)});else throw TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}return null}return t}addInboundNode(e,t,n,r,a,s,i=null){let o=fV(e);t=fV(t),n=fV(n),r=fV(r),a=mX(a),s=mX(s);let l=[],u=[],h=[];for(let e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),h.push(e.tensorIndex);new m5({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:h,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:r,inputShapes:a,outputShapes:s},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){let e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach(e=>e.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}class m9 extends m7{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:f2("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new f_("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new f_("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new f_("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");let n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];let r=new m4(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new m5({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new f_(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}m9.className="InputLayer",oX.registerClass(m9);class ge{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof ge)for(let t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(let t of e)this.add(t.key,t.value)}}add(e,t,n){if(null==this.id2Value[e.id])this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return iS(t,e.dtype)}catch(n){throw new f_(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n);else throw new f_(`Duplicate key: name=${e.name}, id=${e.id}`);return this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof m4){if(null!=this.id2Value[e.id])return this.id2Value[e.id];throw new f_(`Nonexistent key: ${e.name}`)}{let t=this.name2Id[e];if(null==t)throw new f_(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof m4){if(null!=this.id2Value[e.id])return this.id2Mask[e.id];throw new f_(`Nonexistent key: ${e.name}`)}{let t=this.name2Id[e];if(null==t)throw new f_(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&i9(this.id2Mask)}}let gt=new fL,gn=new fL;function gr(e,t,n,r){let a;let s=null!=n&&n.training,i=Array.isArray(e),o=i?e:[e],l=o.map(e=>e.name),u=[],h=t.names();for(let e of l)-1!==h.indexOf(e)?u.push(t.getValue(e)):u.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);let p=l.join(",")+"|"+t.names().sort().join(","),d=gt.get(p);if(null==d){let e=function(e,t){rX.assert(null!=e&&e.length>0,()=>"Expected at least one fetch, got none");let n=[],r={};if(1===e.length){let a=ga(e[0],t);n=a.sorted,r=a.recipientMap}else{let a=new Set;for(let s of e){let{sorted:e,recipientMap:i}=ga(s,t);for(let t of e)a.has(t.name)||(n.push(t),a.add(t.name));for(let e in i)null==r[e]&&(r[e]=new Set),i[e].forEach(t=>r[e].add(t))}}return{sorted:n,recipientCounts:function(e){let t={};for(let n in e)t[n]=e[n].size;return t}(r)}}(o,t);d=e.sorted,a=e.recipientCounts,gt.put(p,d),gn.put(p,a)}a={},s||Object.assign(a,gn.get(p));let c=new ge(t);for(let e=0;e<d.length;++e){if(null!=r){let e=i5().numTensors;e>r.maxNumTensors&&(r.maxNumTensors=e),e<r.minNumTensors&&(r.minNumTensors=e)}let i=d[e],o=i.sourceLayer;if(o instanceof m9)continue;let h=[],p=[],f=[],m=!1;for(let e of i.inputs){let n=c.getValue(e),r=c.getMask(e);h.push(n),p.push(r),null!=r&&(m=!0),s||(a[e.name]--,0!==a[e.name]||t.hasKey(e)||-1!==l.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=p[0]);let g=fV(o.apply(h,n)),y=null;o.supportsMasking&&(y=o.computeMask(h,p));let b=function(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(let r of e.sourceLayer.inboundNodes[t].outputTensors)if(r.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}(i),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){c.hasKey(x[e])||c.add(x[e],g[e],Array.isArray(y)?y[0]:y);let t=l.indexOf(x[e].name);-1!==t&&(u[t]=g[e])}s||i9(f)}return c.disposeMasks(),i?u:u[0]}function ga(e,t){let n=new Set,r=[],a={};for(let e of t.names())n.add(e);let s=[],i=[];for(s.push(e);s.length>0;){let e=s[s.length-1];if(n.has(e.name)){s.pop();continue}let t=i[i.length-1]===s.length-1;if(0===e.inputs.length||t)s.pop(),r.push(e),n.add(e.name),t&&i.pop();else for(let t of(i.push(s.length-1),e.inputs))null==a[t.name]&&(a[t.name]=new Set),a[t.name].add(e.name),n.has(t.name)||s.push(t)}return{sorted:r,recipientMap:a}}let gs=eM;function gi(e,t){return i7(()=>lo(uQ(li(e,e),t,!0)))}gs.registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function(e){null!=gt&&gt.setMaxEntries(e),null!=gn&&gn.setMaxEntries(e)});class go extends oX.Serializable{getConfig(){return{}}}class gl extends go{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return i7(()=>{let t=gi(e,this.axis),n=uc(t,0,this.maxValue);return li(e,ls(n,lr(md(),t)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}gl.className="MaxNorm",oX.registerClass(gl);class gu extends go{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return i7(()=>ls(e,lr(md(),gi(e,this.axis))))}getConfig(){return{axis:this.axis}}}gu.className="UnitNorm",oX.registerClass(gu);class gh extends go{apply(e){return pr(e)}}gh.className="NonNeg",oX.registerClass(gh);class gp extends go{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return i7(()=>{let t=gi(e,this.axis),n=lr(li(this.rate,uc(t,this.minValue,this.maxValue)),li(1-this.rate,t));return li(e,ls(n,lr(md(),t)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}gp.className="MinMaxNorm",oX.registerClass(gp);let gd={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function gc(e,t={}){return fj(e,oX.SerializationMap.getMap().classNameMap,t,"constraint")}function gf(e){if(null==e)return null;if("string"==typeof e){let t=e in gd?gd[e]:e;return gc({className:t,config:{}})}return e instanceof go?e:gc(e)}async function gm(e){if(null==e)return;let t=[],n=[],r=[];for(let a in e){let s=e[a];"number"!=typeof s&&(t.push(s.data()),n.push(a),r.push(s))}if(t.length>0){let a=await Promise.all(t);for(let t=0;t<a.length;++t)e[n[t]]=a[t][0];i9(r)}}function gg(e){if(null!=e)for(let t in e){let n=e[t];"number"!=typeof n&&n.dispose()}}!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(w||(w={}));class gy{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class gb{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(let t of this.callbacks)t.setParams(e)}setModel(e){for(let t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){for(let n of(null==t&&(t={}),this.callbacks))await n.onEpochBegin(e,t)}async onEpochEnd(e,t){for(let n of(null==t&&(t={}),this.callbacks))await n.onEpochEnd(e,t)}async onBatchBegin(e,t){for(let n of(null==t&&(t={}),this.callbacks))await n.onBatchBegin(e,t)}async onBatchEnd(e,t){for(let n of(null==t&&(t={}),this.callbacks))await n.onBatchEnd(e,t)}async onTrainBegin(e){for(let t of(null==e&&(e={}),this.callbacks))await t.onTrainBegin(e)}async onTrainEnd(e){for(let t of(null==e&&(e={}),this.callbacks))await t.onTrainEnd(e)}}class gx extends gy{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});let n=null==t.size?0:t.size;for(let e in this.seen+=n,t){let r=t[e];if("number"==typeof r)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+r*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;let a=i7(()=>lr(this.totals[e],li(r,n)));this.totals[e]=a,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(let e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:i7(()=>{let n=li(ls(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),oe(t[e])}))}}class gk extends gy{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){for(let n in null==t&&(t={}),this.epoch.push(e),t)null==this.history[n]&&(this.history[n]=[]),this.history[n].push(t[n])}async syncData(){let e=[],t=[],n=[];for(let r in this.history){let a=this.history[r];for(let s=0;s<a.length;++s)if("number"!=typeof a[s]){let i=a[s];e.push(i.data()),t.push(r),n.push(s)}}let r=await Promise.all(e);for(let e=0;e<r.length;++e){let a=this.history[t[e]][n[e]];a.dispose(),this.history[t[e]][n[e]]=r[e][0]}}}class gv extends gy{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||cu,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");rX.isNumber(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let r,a=null!=n?n():rX.now();return(...s)=>{let i=null!=n?n():rX.now();return i-a<t?r:(a=i,r=e(...s))}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){let r=[];null!=this.yield&&(await gm(n),r.push(this.yield(e,t,n))),r.push(this.nextFrameFunc()),await Promise.all(r)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await gm(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){let n=[];null!=this.epochEnd&&(await gm(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await gm(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){let n=[];null!=this.batchEnd&&(await gm(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):rX.isNumber(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await gm(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await gm(e),await this.trainEnd(e))}}function gw(e,t){if(null==e&&(e={}),e instanceof gy)return[e];if(Array.isArray(e)&&e[0]instanceof gy)return e;let n=fV(e);return n.map(e=>new gv(e,t))}class gI{constructor(){}static registerCallbackConstructor(e,t){rX.assert(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),gI.checkForDuplicate(t),null==gI.constructors[e]&&(gI.constructors[e]=[]),gI.constructors[e].push(t)}static checkForDuplicate(e){for(let t in gI.constructors){let n=gI.constructors[+t];n.forEach(t=>{if(t===e)throw new f_("Duplicate callback constructor.")})}}static clear(){gI.constructors={}}static createCallbacks(e){let t=[];for(let n in gI.constructors){let r=+n;e>=r&&t.push(...gI.constructors[r])}return t.map(e=>new e)}}function gS(e,t,n,r,a,s,i,o,l){let u=new gk,h=[new gx,...gI.createCallbacks(t)];null!=e&&h.push(...e),h.push(u);let p=new gb(h);return p.setParams({epochs:n,initialEpoch:r,samples:a,steps:s,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:p,history:u}}function gN(e,t={},n=!1){return fj(e,oX.SerializationMap.getMap().classNameMap,t,"layer",n)}function gT(e,t){return i7(()=>{var n;"float32"!==e.dtype&&(e=iS(e,"float32"));let r=uQ(li(n=e,n),t,!0),a=lk(r.shape,md()),s=lo(lT(r,a));return ls(e,s)})}function gC(e,t){return i7(()=>{var n;return hN(li(n=lI(t,e),n),-1)})}function g$(e,t){return i7(()=>hN(lN(lI(t,e)),-1))}function gE(e,t){return i7(()=>{let n=lI(e,t),r=uc(lN(e),md(),Number.MAX_VALUE),a=lN(ls(n,r));return li(100,hN(a,-1))})}function gA(e,t,n=!1){return i7(()=>{if(n)t=pI(t);else{let e=uQ(t,t.shape.length-1,!0);t=ls(t,e)}return t=uc(t,md(),1-md()),od(uQ(li(iS(e,"float32"),hu(t)),t.shape.length-1))})}function gR(e,t,n=!1){return i7(()=>{let r=iS(u8(function(e){let t=[ml(e.shape)];return l5(e,t)}(e)),"int32");t=uc(t,md(),1-md());let a=t.shape,s=l5(iZ(r,a[a.length-1]),a);return gA(s,t,n)})}function gF(e,t){return i7(()=>{let n;return hN(function(e,t){if(!rX.arraysEqual(e.shape,t.shape))throw new f_(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return i7(()=>{let n=pr(t),r=od(lN(t));return lr(lI(n,li(t,e)),hh(u2(r)))})}(e,n=hu(ls(n=uc(t,md(),1-md()),lI(1,n)))),-1)})}function gD(e,t){return i7(()=>{let n=gT(e,-1),r=gT(t,-1),a=li(n,r);return od(uQ(a,-1))})}gI.constructors={};let g_={meanSquaredError:gC,meanAbsoluteError:g$,meanAbsolutePercentageError:gE,meanSquaredLogarithmicError:function(e,t){return i7(()=>{var n;let r=uc(t,md(),Number.MAX_VALUE),a=hu(lr(1,r)),s=uc(e,md(),Number.MAX_VALUE),i=hu(lr(1,s));return hN(li(n=lI(a,i),n),-1)})},squaredHinge:function(e,t){return i7(()=>{let n=lT(0,lI(1,li(e,t)));return hN(li(n,n),-1)})},hinge:function(e,t){return i7(()=>{let n=lT(0,lI(1,li(e,t)));return hN(n,-1)})},categoricalHinge:function(e,t){return i7(()=>{let n=uQ(li(e,t),-1),r=uZ(li(lI(1,e),t),-1);return lT(0,lr(1,lI(r,n)))})},logcosh:function(e,t){return i7(()=>{let n=Math.log(2),r=lI(t,e),a=lI(lr(r,hp(li(-2,r))),n);return hN(a,-1)})},categoricalCrossentropy:gA,sparseCategoricalCrossentropy:gR,binaryCrossentropy:gF,kullbackLeiblerDivergence:function(e,t){return i7(()=>{let n=uc(e,md(),1),r=uc(t,md(),1);return uQ(li(e,hu(ls(n,r))),-1)})},poisson:function(e,t){return i7(()=>{let n=hu(lr(md(),t));return hN(lI(t,li(e,n)),-1)})},cosineProximity:gD};function gO(e){if("string"!=typeof e)return e;{if(e in g_)return g_[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new f_(t)}}function gM(e,t){return i7(()=>{let n=li(.5,hM(t)),r=iS(u9(t,n),e.dtype);return hN(u_(e,r),-1)})}function gL(e,t){return i7(()=>iS(u_(lz(e,-1),lz(t,-1)),"float32"))}function gz(e,t){return gF(e,t)}function gP(e,t){return e.rank===t.rank&&(e=pA(e,[e.rank-1])),(t=lz(t,-1)).dtype!==e.dtype&&(t=iS(t,e.dtype)),iS(u_(e,t),"float32")}let gB={binaryAccuracy:gM,categoricalAccuracy:gL,precision:function(e,t){return i7(()=>{let n=i7(()=>iS(uQ(hm(u_(e,1),u_(t,1))),"float32")),r=i7(()=>iS(uQ(hm(u_(e,0),u_(t,1))),"float32")),a=lr(n,r);return iS(uO(u9(a,0),ls(n,a),0),"float32")})},categoricalCrossentropy:gA,sparseCategoricalCrossentropy:gR,mse:gC,MSE:gC,mae:g$,MAE:g$,mape:gE,MAPE:gE,cosine:gD};function gW(e){if(fP(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(let n of Object.keys(g_))if(g_[n]===e){t=n;break}if(void 0!==t)return t;for(let n of Object.keys(gB))if(gB[n]===e){t=n;break}return void 0!==t?t:e.name}}function gV(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!function e(t){if(null===t)return!0;if("object"==typeof t){if(Object.getPrototypeOf(t)===Object.prototype){let n=Object.keys(t);for(let r of n)if("string"!=typeof r||!e(t[r]))return!1;return!0}if(!Array.isArray(t))return!1;for(let n of t)if(!e(n))return!1;return!0}{let e=typeof t;return"string"===e||"number"===e||"boolean"===e}}(e))throw Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){let n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function gU(e,t,n=console.log){let r="";for(let n=0;n<e.length;++n)n>0&&(r=r.slice(0,r.length-1)+" "),r+=e[n],r=r.slice(0,t[n]),r+=" ".repeat(t[n]-r.length);n(r)}function gG(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function gH(e,t){if(null===e)return null;if("string"==typeof e)return fG(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){let n=[],r=e.length;for(let a=0;a<r;++a){let r=e[a];gG(t,a,r)?n.push(r):n.push(gH(r,t))}return n}{let t={};for(let n of Object.keys(e)){let r=e[n];if("name"===n&&"string"==typeof r)t[n]=r;else{let e=fG(n);t[e]=gH(r,e)}}return t}}let gq="3.21.0";class gj extends m7{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){let e=this.getClassName().toLowerCase();this.name=f2(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],fX(this.inputs).length!==this.inputs.length)throw new f_(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(e=>e.name)}`);for(let e of(fX(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(e=>e.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[],this.outputs)){let t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(let e of this.inputs){let t=e.sourceLayer,n=e.nodeIndex,r=e.tensorIndex;fP(0===n,"input layer has >1 nodes"),fP(0===r,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){let n=this.inputLayers[t];if(!(n instanceof m9))throw TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(let e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map(e=>e.shape),this.internalOutputShapes=this.outputs.map(e=>e.shape);let t={},n={},r={},a={},s={},i=[],o=(e,t,n,r,a,l)=>{(null==r||null==a||null==l)&&(r=e.sourceLayer,a=e.nodeIndex,l=e.tensorIndex);let u=r.inboundNodes[a];if(-1!==n.indexOf(u))throw new fD(`The tensor ${e.name} at layer "${r.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(gj.nodeKey(r,a)),r.id in s||(s[r.id]=Object.keys(s).length),-1===n.indexOf(u)&&n.push(u);let h=u.inboundLayers.length;for(let e=0;e<h;e++){let r=u.inputTensors[e],a=u.inboundLayers[e],s=u.nodeIndices[e],i=u.tensorIndices[e];o(r,t,n,a,s,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(let e of this.outputs)o(e,l,u);let h=i.slice().reverse();for(let e of h){n[e.id]=e,e.id in t||(t[e.id]=0);let s=t[e.id],i=null==r[e.outboundLayer.id]?0:r[e.outboundLayer.id];s=Math.max(s,i),r[e.outboundLayer.id]=s,a[e.outboundLayer.id]=e.outboundLayer,t[e.id]=s;for(let r=0;r<e.inboundLayers.length;r++){let a=e.inboundLayers[r],i=e.nodeIndices[r],o=a.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(s+1,l),n[o.id]=o}}let p={};for(let e in t){let r=t[e];r in p||(p[r]=[]),p[r].push(n[e])}let d={};for(let e in r){let t=r[e];t in d||(d[t]=[]),d[t].push(a[e])}let c=Object.keys(d).map(e=>parseInt(e,10)).sort(fK);for(let e of(this.layers=[],c)){let t=d[e];for(let e of(t.sort((e,t)=>{let n=s[e.id],r=s[t.id];return n<r?-1:n>r?1:0}),t))e instanceof gj&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=d,c=Object.keys(p).map(e=>parseInt(e,10)).sort(fK);let f=this.inputs.slice(),m=[];for(let e of c)for(let t of p[e]){let e=t.outboundLayer;if(null!=e){for(let n of t.inputTensors)if(-1===f.indexOf(n))throw new fD(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(let e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=p;let g=this.layers.map(e=>e.name);for(let e of g){let t=g.filter(t=>t===e).length;if(1!==t)throw new fD(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new m5({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(e=>null),outputMasks:this.outputs.map(e=>null),inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs.map(e=>e.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();let e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(let t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(let t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach(t=>{t._trainableWeights.forEach(t=>t.trainable=e)}),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new f_("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(let t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){let e=[];for(let t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){let t=[];for(let e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){let n={},r=0;for(let e of this.layers)for(let t of e.weights){if(null!=n[t.originalName])throw new f_(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,r++}let a=[];for(let r in e){let s=r;if(null==n[r]){let e=r.split("/"),t=e.slice(0,-2).concat([e[e.length-1]]);s=t.join("/")}if(null!=n[s])a.push([n[s],e[r]]);else if(t)throw new f_(`Provided weight data has no target variable: ${r}`);delete n[s]}if(t){let e=[];for(let t in n)e.push(t);if(e.length>0)throw new f_(`${e.length} of ${r} weights are not set: ${e}`)}m2(a)}updatedConfig(){let e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion=`tfjs-layers ${gq}`,t.backend="TensorFlow.js",t}toJSON(e,t=!0){let n=function e(t,n){if(null==t)return null;if("string"==typeof t)return fU(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){let r=[],a=t.length;for(let s=0;s<a;++s){let a=t[s];gG(n,s,a)?r.push(a):r.push(e(a,n))}return r}{let n={};for(let r of Object.keys(t)){let a=t[r],s=fU(r);("name"===r||"className"===r)&&"string"==typeof a?n[s]=a:n[s]=e(a,r)}return n}}(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return i7(()=>{e=fV(e);let n=new ge;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return gr(this.outputs,n,t)})}computeMask(e,t){return i7(()=>{let n;return e=fV(e),n=null==t?fz(null,e.length):fV(t),this.runInternalGraph(e,n)[1]})}computeOutputShape(e){let t=mX(e);if(t.length!==this.inputLayers.length)throw new f_(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);let n={};for(let e=0;e<t.length;e++){let r=this.inputLayers[e],a=t[e],s=r.name+"_0_0";n[s]=a}let r=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(fK);if(r.length>1)for(let e of r){let t=this.nodesByDepth[e];for(let e of t){let t=e.outboundLayer;if(-1!==this.inputLayers.map(e=>e.id).indexOf(t.id))continue;let r=[];for(let t=0;t<e.inboundLayers.length;t++){let a=e.inboundLayers[t],s=e.nodeIndices[t],i=e.tensorIndices[t],o=`${a.name}_${s}_${i}`,l=n[o];r.push(l)}let a=t.computeOutputShape(fW(r)),s=mX(a),i=t.inboundNodes.indexOf(e);for(let e=0;e<s.length;e++){let r=`${t.name}_${i}_${e}`;n[r]=s[e]}}}let a=[],s=[];for(let e=0;e<this.outputLayers.length;e++){let t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],r=this.outputLayersTensorIndices[e],a=`${t.name}_${n}_${r}`;s.push(a)}for(let e=0;e<s.length;e++){let t=s[e];fP(t in n),a.push(n[t])}return fW(a)}runInternalGraph(e,t){null==t&&(t=fz(null,e.length));let n={};for(let r=0;r<this.inputs.length;++r){let a=this.inputs[r],s=e[r],i=t[r];n[a.id]=[s,i]}let r=Object.keys(this.nodesByDepth).map(e=>parseInt(e,10)).sort(fK);for(let e of r){let t=this.nodesByDepth[e];for(let e of t){let t=e.outboundLayer,r=e.inputTensors,a=e.outputTensors,s=[];for(let e of r)e.id in n&&s.push(n[e.id]);if(s.length===r.length){let r,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===s.length){let[e,n]=s[0];null==u.mask&&(u.mask=n),o=fV(t.call(e,u)),l=fV(t.computeMask(e,n)),r=[e],i=[n]}else r=s.map(e=>e[0]),i=s.map(e=>e[1]),null==u.mask&&(u.mask=i),o=fV(t.call(r,u)),l=fV(t.computeMask(r,i));if(t.activityRegularizer)throw new fO("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<a.length;++e){let t=a[e],r=o[e],s=l[e];n[t.id]=[r,s]}}}}let a=[],s=[],i=[];for(let e of this.outputs){fP(e.id in n,`Could not compute output ${e.name} : ${e.id}`);let[t,r]=n[e.id];i.push(t.shape),a.push(t),s.push(r)}return[a,s,i]}buildNodeConversionMap(e){let t;let n={};for(let e of this.layers){t=e instanceof gj?1:0;for(let r=0;r<e.inboundNodes.length;r++){let a=gj.nodeKey(e,r);this.containerNodes.has(a)&&(n[a]=t,t+=1)}}return n}getLayer(e,t){if(null!=t){if(!(this.layers.length<=t))return this.layers[t];throw new f_(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`)}if(null==e)throw new f_("Provide either a layer name or layer index");for(let t of this.layers)if(t.name===e)return t;throw new f_(`No such layer: ${e}`)}calculateLosses(){return i7(()=>{let e=[];for(let t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){let r=gj.nodeKey(t,n);this.containerNodes.has(r)&&e.push(...t.calculateLosses())}return e})}getConfig(){let e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(let e of this.layers){let r=e.getClassName(),a=e.getConfig(),s=[];for(let n=0;n<e.inboundNodes.length;n++){let r=e.inboundNodes[n],a=gj.nodeKey(e,n),i={};if(this.containerNodes.has(a)){if(r.callArgs)try{JSON.stringify(r.callArgs),i=r.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(r.inboundLayers.length>0){let e=[];for(let n=0;n<r.inboundLayers.length;n++){let a=r.inboundLayers[n],s=r.nodeIndices[n],o=r.tensorIndices[n],l=gj.nodeKey(a,s),u=t[l];null==u&&(u=0),e.push([a.name,u,o,i])}s.push(e)}}}let i={};i.name=e.name,i.className=r,i.config=a,i.inboundNodes=s,n.push(i)}e.layers=n;let r=[];for(let e=0;e<this.inputLayers.length;e++){let n=this.inputLayers[e],a=this.inputLayersNodeIndices[e],s=gj.nodeKey(n,a);if(!this.containerNodes.has(s))continue;let i=t[s];null==i&&(i=0);let o=this.inputLayersTensorIndices[e];r.push([n.name,i,o])}e.inputLayers=r;let a=[];for(let e=0;e<this.outputLayers.length;e++){let n=this.outputLayers[e],r=this.outputLayersNodeIndices[e],s=gj.nodeKey(n,r);if(!this.containerNodes.has(s))continue;let i=t[s];null==i&&(i=0);let o=this.outputLayersTensorIndices[e];a.push([n.name,i,o])}return e.outputLayers=a,e}static fromConfig(e,t,n={},r=!1){let a={},s={};function i(e,t){e.name in s?s[e.name].push(t):s[e.name]=[t]}let o=t.name,l=t.layers;for(let e of l)!function(e){let n=e.name,s=gN(e,null!=t.customObjects?t.customObjects:{});s.setFastWeightInitDuringBuild(r),a[n]=s;let o=e.inboundNodes;o.forEach(e=>{if(!(e instanceof Array))throw new f_(`Corrupted configuration, expected array for nodeData: ${e}`);i(s,e)})}(e);for(;!function(e){if(null==e)throw new f_(`Invalid value in obj: ${JSON.stringify(e)}`);for(let t in e)if(e.hasOwnProperty(t))return!1;return!0}(s);)for(let e of l){let t=a[e.name];if(t.name in s){let e=s[t.name];for(let n of(delete s[t.name],e))!function(e,t){let n;let r=[];for(let s of t){let o=s[0],l=s[1],u=s[2];if(n=null==s[3]?{}:s[3],!(o in a)){i(e,t);return}let h=a[o];if(h.inboundNodes.length<=l){i(e,t);return}let p=h.inboundNodes[l];r.push(p.outputTensors[u])}r.length>0&&e.apply(fW(r),n)}(t,n)}}let u=[],h=[],p=t.inputLayers;for(let e of p){let t=e[0],n=e[1],r=e[2];fP(t in a);let s=a[t],i=s.inboundNodes[n].outputTensors;u.push(i[r])}let d=t.outputLayers;for(let e of d){let t=e[0],n=e[1],r=e[2];fP(t in a);let s=a[t],i=s.inboundNodes[n].outputTensors;h.push(i[r])}return new e({inputs:u,outputs:h,name:o})}get stateful(){if(this._stateful)throw new f_("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(let e of this.layers)if(e.stateful)return!0;return!1}resetStates(){i7(()=>{this.layers.forEach(e=>{e.stateful&&e.resetStates()})})}}function gK(e,t){return function(e,t,n){let r=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>null);if(1===r)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==r)throw Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){let n=[];return t.forEach(t=>{t in e?n.push(e[t]):n.push(null)}),n}throw Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function gX(e,t,n,r){if(null!=t||null!=r)throw Error("Support sampleWeight is not implemented yet");if(null==n)return null;{let t=i7(()=>{if(1===e.shape.length)return iN(e);if(2===e.shape.length){if(e.shape[1]>1)return lz(e,1);if(1===e.shape[1])return l5(e,[e.shape[0]]);throw Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),r=Array.from(await t.data());i9(t);let a=[];return r.forEach(e=>{if(null==n[e])throw Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);a.push(n[e])}),pO(a,"float32")}}function gY(e,t){let n,r;n=t.xs,r=t.ys,rX.assert(null!=n&&null!=r,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);let a=gZ("input",e.inputNames,n),s=gZ("output",e.outputNames,r),i=a[0].shape[0];rX.assert(a.length===e.inputs.length,()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${a.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`),rX.assert(s.length===e.outputs.length,()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${s.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`);for(let t=0;t<a.length;t++)rX.assert(a[t].shape[0]===i,()=>`Batch size mismatch: input ${e.inputNames[t]} has ${a[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`);for(let t=0;t<s.length;t++)rX.assert(s[t].shape[0]===i,()=>`Batch size mismatch: output ${e.outputNames[t]} has ${s[t].shape[0]}; expected  ${i} based on input ${e.inputNames[0]}.`);return{xs:a,ys:s}}function gZ(e,t,n){if(n instanceof az)return[n];if(Array.isArray(n))return rX.assert(n.length===t.length,()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`),n;{let r=[];for(let a of t){if(null==n[a])throw new f_(`The feature data generated by the dataset lacks the required ${e} key '${a}'.`);r.push(n[a])}return r}}async function gJ(e,t,n){let r=null!=n.batchesPerEpoch;if(rX.assert(null!=e.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),rX.assert(null!=n,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),rX.assert(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`),rX.assert(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`),rX.assert(null==n.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),e.isTraining)throw Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{let a,s,i,o;let l=null!=n.validationData;if(l){if(gQ(n.validationData))rX.assert(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`);else{let e=function(e){if(3===e.length)throw new fO("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);a=e.xs,s=e.ys}}let u=e.makeTrainFunction(),h=e.getDedupedMetricsNames();i=l?h.slice().concat(h.map(e=>"val_"+e)):h.slice();let p=gw(n.callbacks,n.yieldEvery),d=null==n.verbose?1:n.verbose,{callbackList:c,history:f}=gS(p,d,n.epochs,null,null,(o=null,null!=n.batchesPerEpoch?o=n.batchesPerEpoch:Number.isFinite(t.size)&&(o=t.size),o),null,l,i);c.setModel(e),e.history=f,await c.onTrainBegin(),e.stopTraining_=!1;let m=null==n.initialEpoch?0:n.initialEpoch,g=await t.iterator();for(;m<n.epochs;){let i={};await c.onEpochBegin(m);let o=0,p=0;for(r||(g=await t.iterator());!r||o<n.batchesPerEpoch;){let t=await g.next();if(r&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${o} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${n.batchesPerEpoch*n.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=t.value){let{xs:r,ys:a}=gY(e,t.value),s={};s.batch=p,s.size=r[0].shape[0],await c.onBatchBegin(p,s);let i=[];if(null!=n.classWeight){let t=gK(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await gX(a[e],null,t[e]))}let l=r.concat(a).concat(i),d=u(l);i9(l);for(let e=0;e<h.length;++e){let t=h[e],n=d[e];s[t]=n,oe(n)}await c.onBatchEnd(p,s),gg(s),p++,o++}if(r?o>=n.batchesPerEpoch:t.done){if(l){let t;t=gQ(n.validationData)?fV(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):fV(e.evaluate(a,s,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)i[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await c.onEpochEnd(m,i),m++,e.stopTraining_)break}return await c.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}function gQ(e){return"function"==typeof e.iterator}async function g0(e,t,n){n=n||{};let r=null!=n.batches,a=e.testFunction,s=[];if(n.verbose>0)throw new fO("Verbose mode is not implemented yet.");rX.assert(!r||n.batches>0&&Number.isInteger(n.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`);let i="function"==typeof t.next?t:await t.iterator(),o=0,l=0;for(;!r||l<n.batches;){let t=await i.next();if(s=i7(()=>{if(t.value){let{xs:n,ys:r}=gY(e,t.value),i=n.concat(r),u=i7(()=>a(i));if(i9(i),0===l)for(let e=0;e<u.length;++e)s.push(ly(0));let h=i[0].shape[0];for(let e=0;e<u.length;++e){let t=u[e],n=s[e];s[e]=i7(()=>lr(s[e],li(h,t))),l>0&&i9(n)}i9(u),o+=h,++l}return s}),t.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<s.length;++e){let t=s[e];s[e]=ls(s[e],o),i9(t)}return fW(s)}function g1(e){rX.assert(e>0&&Number.isInteger(e),()=>`batchSize is required to be a positive integer, but got ${e}`)}function g2(e,t,n){return null==e?[null]:Array.isArray(e)?e.map(e=>mm(e,t,n-t)):mm(e,t,n-t)}function g3(e,t){return i7(()=>null==e?null:Array.isArray(e)?e.map(e=>g3(e,t)):mI(e,"int32"===t.dtype?t:iS(t,"int32")))}function g4(e,t){let n=[],r=0,a=null;for(;r<e;)(a=r+t)>=e&&(a=e),n.push([r,a]),r=a;return n}async function g6(e,t,n,r,a,s,i,o,l,u,h,p,d,c,f){let m;null==a&&(a=32),null==s&&(s=1),null==h&&(h=!0),null==d&&(d=0);let g=!1;if(null!=l&&null!=u&&(g=!0),null!=f&&(g=!0,null==c))throw new f_("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");let y=e.checkNumSamples(n,a,c,"steps_per_epoch");null!=y&&(m=mp(0,y)),null==i&&(i=1);let{callbackList:b,history:x}=gS(o,i,s,d,y,c,a,g,p);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let i=d;i<s;++i){await b.onEpochBegin(i);let s={};if(null!=c)throw new fO("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new fO("batch shuffling is not implemneted yet");h&&rX.shuffle(m);let i=pO(m),o=g4(y,a);for(let h=0;h<o.length;++h){let p={};if(await b.onBatchBegin(h,p),i7(()=>{let d=o[h][0],c=o[h][1],f=mm(i,d,c-d);p.batch=h,p.size=c-d;let m=g3(n,f),y=t(m);for(let e=0;e<r.length;++e){let t=r[e],n=y[e];p[t]=n,oe(n)}if(h===o.length-1&&g){let t=e.testLoop(l,u,a);for(let e=0;e<r.length;++e){let n=r[e],a=t[e];oe(a),s["val_"+n]=a}}}),await b.onBatchEnd(h,p),gg(p),e.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,s),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}async function g5(e,t,n,r={}){let a,s,i,o,l,u,h,p,d;if(e.isTraining)throw Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{let c,f,m;let g=null==r.batchSize?32:r.batchSize;g1(g);let y=await e.standardizeUserData(t,n,r.sampleWeight,r.classWeight,!1,g);a=y[0],s=y[1],d=y[2];let b=!1;if(null!=r.validationData&&r.validationData.length>0){if(b=!0,2===r.validationData.length)l=r.validationData[0],u=r.validationData[1];else if(3===r.validationData.length)throw new fO("validationData including sample weights is not supported yet.");else throw new f_(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);let t=await e.standardizeUserData(l,u,null,null,!0,g);h=t[0],p=t[1],c=h.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){b=!0;let e=Math.floor(a[0].shape[0]*(1-r.validationSplit)),t=a[0].shape[0];h=g2(a,e,t),i=a,a=g2(a,0,e),p=g2(s,e,t),o=s,s=g2(s,0,e),c=h.concat(p)}else null!=r.validationSteps&&(b=!0);let x=a.concat(s).concat(d);e.checkTrainableWeightsConsistency();let k=e.makeTrainFunction(),v=e.getDedupedMetricsNames();b?(e.makeTestFunction(),f=e.testFunction,m=v.slice().concat(v.map(e=>"val_"+e))):(f=null,c=[],m=v.slice());let w=gw(r.callbacks,r.yieldEvery),I=await g6(e,k,x,v,g,r.epochs,r.verbose,w,f,c,r.shuffle,m,r.initialEpoch,null,null);return I}finally{e.isTraining=!1,g7(a,t),g7(s,n),g7(i,t),g7(o,n),g7(h,l),g7(p,u),null!=d&&i9(d)}}function g8(e){let t=[];e instanceof az&&(e=[e]);for(let n=0;n<e.length;++n){let r=e[n];if(1===r.rank)t.push(mf(r,1));else if(0===r.rank)throw Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");else t.push(r)}return t}function g7(e,t){if(null==e)return;let n=[];if(t instanceof az)n.push(t.id);else if(Array.isArray(t))t.forEach(e=>n.push(e.id));else if(null!=t)for(let e in t){let r=t[e];n.push(r.id)}let r=[];if(e instanceof az)-1===n.indexOf(e.id)&&r.push(e);else if(Array.isArray(e))e.forEach(e=>{-1===n.indexOf(e.id)&&r.push(e)});else if(null!=e)for(let t in e){let a=e[t];-1===n.indexOf(a.id)&&r.push(a)}r.forEach(e=>{e.isDisposed||e.dispose()})}function g9(e){return Array.isArray(e)}function ye(e){return!(e instanceof az)&&!g9(e)}function yt(e,t,n,r=!0,a=""){let s;if(null==t||0===t.length){if(null!=e){let t=!1;if(g9(e)&&e.length>0)t=!0;else if(ye(e)){for(let n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new f_(`Error when checking model ${a} expected no data, but got ${e}`)}return[]}if(null==e)return t.map(e=>null);if(ye(e))for(let n of(s=[],t)){if(null==e[n])throw new f_(`No data provided for "${n}". Need data for each key in: ${t}`);s.push(e[n])}else if(g9(e)){if(e.length!==t.length)throw new f_(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);s=e}else{if(t.length>1)throw new f_(`The model ${a} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);s=[e]}if(s=g8(s),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;let i=s[e];if(i.shape.length!==n[e].length)throw new f_(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!r)continue;let s=i.shape[t],o=n[e][t];if(null!=o&&o>=0&&s!==o)throw new f_(`${a} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${a} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return s}function yn(e,t,n,r=!0,a=""){let s;if(Array.isArray(e)){if(e.length!==t.length)throw new f_(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);s=e}else{if(t.length>1)throw new f_(`The model expects ${t.length} ${a} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);s=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;let i=s[e];if(i.shape.length!==n[e].length)throw new f_(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let s=0;s<n[e].length;++s){if(0===s&&!r)continue;let o=i.shape[s],l=n[e][s];if(null!=l&&l!==o)throw new f_(`Error when checking ${a}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class yr extends gj{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new f_("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,r=console.log){let a;let s=function(e){let t=!0,n=[],r=[];for(let t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(let e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}r.push(...e)}if(t)for(let n of e.layers){let e=!1;for(let a of n.inboundNodes)if(-1!==r.indexOf(a)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),i=["Layer (type)","Input Shape","Output shape","Param #"];if(s?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map(e=>Math.floor(t*e))),!s)for(let t in i.push("Receives inputs"),a=[],e.nodesByDepth)a.push(...e.nodesByDepth[t]);r("_".repeat(t)),gU(i,n,r),r("=".repeat(t));let o=e.layers;for(let e=0;e<o.length;++e)s?function(e,t,n){let r,a;try{a=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(e){a="multiple"}try{r=JSON.stringify(e.outputShape)}catch(e){r="multiple"}let s=e.name,i=e.getClassName(),o=[`${s} (${i})`,a,r,e.countParams().toString()];gU(o,t,n)}(o[e],n,r):function(e,t,n,r){let a,s;try{s=e.inboundNodes.map(e=>JSON.stringify(e.inputShapes)).join(",")}catch(e){s="multiple"}try{a=JSON.stringify(e.outputShape)}catch(e){a="multiple"}let i=[];for(let t of e.inboundNodes)if(null==n||!(n.length>0)||-1!==n.indexOf(t))for(let e=0;e<t.inboundLayers.length;++e){let n=t.inboundLayers[e].name,r=t.nodeIndices[e],a=t.tensorIndices[e];i.push(`${n}[${r}][${a}]`)}let o=e.name,l=e.getClassName(),u=0===i.length?"":i[0],h=[`${o} (${l})`,s,a,e.countParams().toString(),u];gU(h,t,r);for(let e=1;e<i.length;++e)gU(["","","","",i[e]],t,r)}(o[e],n,a,r),r((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();let l=null!=e.collectedTrainableWeights?mJ(e.collectedTrainableWeights):mJ(e.trainableWeights),u=mJ(e.nonTrainableWeights);r(`Total params: ${l+u}`),r(`Trainable params: ${l}`),r(`Non-trainable params: ${u}`),r("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){let t={Adagrad:()=>co.adagrad(.01),Adadelta:()=>co.adadelta(1,.95,md()),Adam:()=>co.adam(.001,.9,.999,md()),Adamax:()=>co.adamax(.002,.9,.999,md(),0),RMSProp:()=>co.rmsprop(.001,.9,0,md()),SGD:()=>co.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new f_(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof lb))throw new f_("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss){if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new f_(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);let n=e.loss;t=n.map(e=>gO(e))}else{let n=gO(e.loss);this.outputs.forEach(e=>{t.push(n)})}}else{for(let t in e.loss=e.loss,e.loss)if(-1===this.outputNames.indexOf(t))throw new f_(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(let n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(gO(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){let t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}let n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],mr("loss",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;let t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}});let r=function(e,t){let n;if(null==e||Array.isArray(e)&&0===e.length)return t.map(e=>[]);if("string"==typeof e||"function"==typeof e)n=[e];else if(Array.isArray(e)||"object"==typeof e)n=e;else throw TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);if(Array.isArray(n))return t.map(e=>n);{let e=[];for(let r of t){let t=n.hasOwnProperty(r)?n[r]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),a=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};mr("metric",()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;let t=r[e],s=t=>{let n,r,s;for(let i of t){let t;if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){let t;let a=this.internalOutputShapes[e];1===a[a.length-1]||this.lossFunctions[e]===gF?-1!==["accuracy","acc"].indexOf(i)?r=gM:-1!==["crossentropy","ce"].indexOf(i)&&(r=gz):this.lossFunctions[e]===gR?-1!==["accuracy","acc"].indexOf(i)?r=gP:-1!==["crossentropy","ce"].indexOf(i)&&(r=gR):-1!==["accuracy","acc"].indexOf(i)?r=gL:-1!==["crossentropy","ce"].indexOf(i)&&(r=gA),-1!==["accuracy","acc"].indexOf(i)?t="acc":-1!==["crossentropy","ce"].indexOf(i)&&(t="ce"),s=r,n=""+t}else{let e=function(e){if("string"==typeof e&&e in gB)return gB[e];if("string"!=typeof e&&null!=e)return e;throw new f_(`Unknown metric ${e}`)}(i);s=e,n=""+gW(i)}mr(n,()=>{t=s}),a(e,n,t)}};s(t)}}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){let r=null==n.batchSize?32:n.batchSize;g1(r);let a=this.standardizeUserDataXY(e,t,!0,r);try{let e=a[0].concat(a[1]);this.makeTestFunction();let t=this.testFunction,s=this.testLoop(t,e,r,n.verbose,n.steps);return fW(s)}finally{g7(a[0],e),g7(a[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),g0(this,e,t)}checkNumSamples(e,t,n,r="steps"){let a;if(null!=n){if(a=null,null!=t)throw new f_(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else if(null!=e)a=Array.isArray(e)?e[0].shape[0]:e.shape[0];else throw new f_(`Either the input data should have a defined shape, or ${r} shoud be specified.`);return a}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new f_("`outputs` is an empty Array, which is not allowed.");let n=Array.isArray(t),r=n?t:[t],a=this.retrieveSymbolicTensors(r),s=new ge;if(e instanceof az&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new f_(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)s.add(this.inputs[t],e[t])}else for(let t of this.inputs){let n=e[t.name];if(null==n)throw new f_(`No value is provided for the model's input ${t.name}`);s.add(t,n)}let i=gr(a,s);return n?i:i[0]}retrieveSymbolicTensors(e){let t=fz(null,e.length),n=e.length;for(let r of this.layers){let a=Array.isArray(r.output)?r.output:[r.output],s=a.map(e=>e.name);for(let r=0;r<e.length;++r){let i=s.indexOf(e[r]);if(-1!==i&&(t[r]=a[i],n--),0===n)break}if(0===n)break}if(n>0){let n=[];throw t.forEach((t,r)=>{null==t&&n.push(e[r])}),new f_(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return i7(()=>{let r=this.checkNumSamples(e);if(n)throw new fO("Verbose predictLoop() is not implemented yet.");let a=g4(r,t),s=this.outputs.map(e=>[]);for(let t=0;t<a.length;++t){let n=i7(()=>{let n=a[t][0],r=a[t][1],s=g2(e,n,r),i=[];if(Array.isArray(s))for(let e=0;e<s.length;++e)i.push({key:this.inputs[e],value:s[e]});else i.push({key:this.inputs[0],value:s});let o=new ge(i);return gr(this.outputs,o)});n.forEach((e,t)=>s[t].push(e))}return fW(s.map(e=>l9(e,0)))})}predict(e,t={}){let n=g8(e);yn(n,this.inputNames,this.feedInputShapes,!1);try{let e=null==t.batchSize?32:t.batchSize;return g1(e),this.predictLoop(n,e)}finally{g7(n,e)}}predictOnBatch(e){yn(e,this.inputNames,this.feedInputShapes,!0);let t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,r){if(null==this.optimizer_)throw new fD("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");let a=[];for(let e=0;e<this.feedOutputShapes.length;++e){let t=this.feedOutputShapes[e],n=this.feedLossFns[e];n===gR?a.push(t.slice(0,t.length-1).concat([1])):a.push(t)}if(!function(e,t,n){let r=fX(e.map(e=>e.shape[0]));r.sort();let a=fX(t.map(e=>e.shape[0]));if(a.sort(),r.length>1)throw new f_(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map(e=>e.shape))}`);if(a.length>1)throw new f_(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(e=>e.shape))}`);if(r.length>0&&a.length>0&&!rX.arraysEqual(r,a))throw new f_(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${a[0]} target sample(s).`)}(e=yt(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=yt(t,this.feedOutputNames,a,!1,"target"),0),!function(e,t,n){let r=[gC,gF,gA];for(let a=0;a<e.length;++a){let s=e[a],i=t[a],o=n[a];if(null!=i){if(i===gA&&1===s.shape[s.shape.length-1])throw new f_(`You are passing a target array of shape ${s.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(i)){let e=s.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){let r=e[n],a=t[n];if(null!=a&&r!==a)throw new f_(`A target Tensor with shape ${s.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&e[0].shape[0]%r!=0)throw new f_(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,r,a=!0,s){let[i,o]=this.standardizeUserDataXY(e,t,a,s);if(null!=n)throw Error("sample weight is not supported yet.");let l=null;if(null!=r){let e=gK(r,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await gX(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,r=0,a){return i7(()=>{let s=this.checkNumSamples(t,n,a,"steps"),i=[];if(r>0)throw new fO("Verbose mode is not implemented yet.");if(null!=a)throw new fO("steps mode in testLoop() is not implemented yet");{let r=g4(s,n),a=pO(mp(0,s));for(let n=0;n<r.length;++n){let s=r[n][0],o=r[n][1],l=mm(a,s,o-s),u=g3(t,l),h=e(u);if(0===n)for(let e=0;e<h.length;++e)i.push(ly(0));for(let e=0;e<h.length;++e){let t=h[e];i[e]=lr(i[e],li(o-s,t))}}for(let e=0;e<i.length;++e)i[e]=ls(i[e],s)}return i})}getDedupedMetricsNames(){let e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){let r=e[n],a=r;if(fB(e,r)>1){let t=fB(e.slice(0,n),r);a+=`_${t}`}t.push(a)}return t}makeTrainFunction(){return e=>{let t=[],n=e.slice(0,this.inputs.length),r=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),s=[],i=this.collectedTrainableWeights.map(e=>e.read()),o=this.optimizer_.minimize(()=>{let e;let i=[];for(let e=0;e<this.inputs.length;++e)i.push({key:this.inputs[e],value:n[e]});let o=new ge(i),l=gr(this.outputs,o,{training:!0});for(let n=0;n<this.lossFunctions.length;++n){let s=this.lossFunctions[n],i=s(r[n],l[n]);null!=a[n]&&(i=li(i,a[n]));let o=hN(i);t.push(o),e=0===n?i:lr(e,i)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{let t=this.metricsTensors[e][0],a=this.metricsTensors[e][1];n=hN(t(r[a],l[a]))}oe(n),s.push(n)}return e=hN(e),this.calculateLosses().forEach(t=>{e=lr(e,t)}),e},!0,i);return[o].concat(s)}}makeTestFunction(){this.testFunction=e=>i7(()=>{let t;let n=[],r=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=[];for(let e=0;e<this.inputs.length;++e)s.push({key:this.inputs[e],value:r[e]});let i=new ge(s),o=gr(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){let r=this.lossFunctions[e],s=hN(r(a[e],o[e]));t=0===e?s:lr(t,s),n.push(t)}for(let e=0;e<this.metricsTensors.length;++e){let t=this.metricsTensors[e][0],r=this.metricsTensors[e][1],s=hN(t(a[r],o[r]));n.push(s)}return n})}async fit(e,t,n={}){return g5(this,e,t,n)}async fitDataset(e,t){return gJ(this,e,t)}async trainOnBatch(e,t){let n=await this.standardizeUserData(e,t),r=n[0],a=n[1],s=this.makeTrainFunction(),i=s(r.concat(a)),o=[];for(let e of i){let t=await e.data();o.push(t[0])}return i9(i),g7(n[0],e),g7(n[1],t),fW(o)}getNamedWeights(e){let t=[],n=null!=e&&e.trainableOnly,r=n?this.trainableWeights:this.weights,a=this.getWeights(n);for(let e=0;e<r.length;++e)(!n||r[e].trainable)&&t.push({name:r[e].originalName,tensor:a[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){let e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){let t=i5().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-i5().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=fU(this.loss);else if(Array.isArray(this.loss)){for(let e of this.loss)if("string"!=typeof e)throw Error("Serialization of non-string loss is not supported.");e=this.loss.map(e=>fU(e))}else{let t=Object.keys(this.loss);e={};let n=this.loss;for(let r of t)if("string"==typeof n[r])e[r]=fU(n[r]);else throw Error("Serialization of non-string loss is not supported.")}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[fU(gW(this.metrics))];{if(Array.isArray(this.metrics))return this.metrics.map(e=>fU(gW(e)));let e={};for(let t in this.metrics)e[t]=fU(gW(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){let t,n;if(null!=e.weighted_metrics)throw Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw Error("Loading sample_weight_mode is not supported yet.");let r=gH(e.optimizer_config),a=gN(r);if("string"==typeof e.loss)t=fG(e.loss);else if(Array.isArray(e.loss))t=e.loss.map(e=>fG(e));else if(null!=e.loss)for(let n in t={},e.loss)t[n]=fG(e.loss[n]);if(Array.isArray(e.metrics))n=e.metrics.map(e=>fG(e));else if(null!=e.metrics)for(let t in n={},e.metrics)n[t]=fG(e.metrics[t]);this.compile({loss:t,metrics:n,optimizer:a})}async save(e,t){if("string"==typeof e){let t=i$.getSaveHandlers(e);if(0===t.length)throw new f_(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new f_(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new f_("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");let n=await i$.encodeWeights(this.getNamedWeights(t)),r=this.toJSON(null,!1),a={modelTopology:r,format:"layers-model",generatedBy:`TensorFlow.js tfjs-layers v${gq}`,convertedBy:null},s=null!=t&&t.includeOptimizer;if(s&&null!=this.optimizer){a.trainingConfig=this.getTrainingConfig();let{data:e,specs:t}=await i$.encodeWeights(await this.optimizer.getWeights(),"optimizer");n.specs.push(...t),n.data=i$.concatenateArrayBuffers([n.data,e])}return null!=this.userDefinedMetadata&&(gV(this.userDefinedMetadata,this.name,!0),a.userDefinedMetadata=this.userDefinedMetadata),a.weightData=n.data,a.weightSpecs=n.specs,e.save(a)}setUserDefinedMetadata(e){gV(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}yr.className="Model",oX.registerClass(yr);class ya extends yr{}async function ys(e,t){if(null==t&&(t={}),"string"==typeof e){let n=i$.getLoadHandlers(e,t);if(0===n.length)n.push(i$.browserHTTPRequest(e,t));else if(n.length>1)throw new f_(`Found more than one (${n.length}) load handlers for URL '${e}'`);e=n[0]}return yi(e,void 0,t)}async function yi(e,t,n){if(null==n&&(n={}),null==e.load)throw new f_("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let r=await e.load(),a=r.modelTopology;null!=a.model_config&&(a=a.model_config);let s=null==n.strict||n.strict,i=null!=r.weightData&&null!=r.weightSpecs&&s,o=gN(gH(a),t,i),l=r.trainingConfig;if(null!=l&&o.loadTrainingConfig(l),null!=r.userDefinedMetadata&&o.setUserDefinedMetadata(r.userDefinedMetadata),null!=r.weightData){if(null==r.weightSpecs)throw new f_("LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");let{modelWeights:e,optimizerWeights:t}=function(e,t){let n=i$.decodeWeights(e,t),r={},a=[];return t.forEach(e=>{"optimizer"===e.group?a.push({name:e.name,tensor:n[e.name]}):r[e.name]=n[e.name]}),{modelWeights:r,optimizerWeights:a}}(r.weightData,r.weightSpecs);o.loadWeights(e,s),null!=o.optimizer&&t.length>0&&await o.optimizer.setWeights(t),i9(e),i9(t.map(e=>e.tensor))}return o}ya.className="Functional",oX.registerClass(ya);class yo extends yr{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:f2("sequential_"),null!=e.layers)for(let t of e.layers)this.add(t)}checkShape(e){let t=e.inboundNodes[0].outputTensors[0].shape;if(t.some(e=>e<0))throw new f_(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){let t;let n=e instanceof yo||e instanceof yr;if(n){if(1!==(t=e).outputs.length)throw new f_("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==t.inputs.length)throw new f_("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new f_("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");let t=function(e){if(null==e.batchShape&&null==e.shape)throw Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new f_("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;null==n&&(n="float32");let r=new m9({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}),a=r.inboundNodes[0].outputTensors;return a[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(n)this.outputs=t.outputs,this.inputs=t.inputs;else{if(1!==e.inboundNodes.length)throw new f_(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new f_("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=function e(t,n,r){if((null==n||null!=r&&r>0)&&(n=t.sourceLayer,r=t.nodeIndex),0===n.inboundNodes.length)return[t];{let t=n.inboundNodes[r];if(0===t.inboundLayers.length)return t.inputTensors;{let n=[];for(let r=0;r<t.inboundLayers.length;r++){let a=t.inputTensors[r],s=t.inboundLayers[r],i=t.nodeIndices[r],o=e(a,s,i);for(let e of o)-1===n.indexOf(e)&&n.push(e)}return n}}}(this.outputs[0])}this.inboundNodes=[],new m5({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:fz(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(e=>e.shape),outputShapes:this.outputs[0].shape})}else{let t=e.apply(this.outputs[0]);if(Array.isArray(t))throw TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{let e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(mZ(e),0===this.inputs.length||0===this.outputs.length)throw TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new yr({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new fD("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new fD("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new fD("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new fD("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},r=!1){let a;let s={};if(t instanceof Array){if(!(null!=t[0].className)||"Merge"===t[0].className)throw new f_("Legacy serialization format not supported yet.");a=t}else rX.assert(null!=t.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=t.layers,delete t.layers,s=t;let i=new e(s);if(!(i instanceof yo))throw new fO(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(let e of a){let t=void 0,n=gN(e,t,r);r&&n.setFastWeightInitDuringBuild(!0),i.add(n)}return i}set stopTraining(e){if(null==this.model)throw new f_("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new f_("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){let e=[];for(let t of this.layers){let n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}yo.className="Sequential",oX.registerClass(yo);class yl extends oX.Serializable{getConfig(){return{}}}class yu extends yl{apply(e,t=1){return function(e,t=1){if(1!==t)throw new fO(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return uP(e)}(e,t)}}yu.className="elu",oX.registerClass(yu);class yh extends yl{apply(e){return pd(e)}}yh.className="selu",oX.registerClass(yh);class yp extends yl{apply(e){return pr(e)}}yp.className="relu",oX.registerClass(yp);class yd extends yl{apply(e){return i7(()=>hE(6,pr(e)))}}yd.className="relu6",oX.registerClass(yd);class yc extends yl{apply(e){return e}}yc.className="linear",oX.registerClass(yc);class yf extends yl{apply(e){return ue(e)}}yf.className="sigmoid",oX.registerClass(yf);class ym extends yl{apply(e){return i7(()=>{let t=lr(.5,li(.2,e));return uc(t,0,1)})}}ym.className="hardSigmoid",oX.registerClass(ym);class yg extends yl{apply(e){return hp(e)}}yg.className="softplus",oX.registerClass(yg);class yy extends yl{apply(e){return i7(()=>ls(e,lr(lN(e),1)))}}yy.className="softsign",oX.registerClass(yy);class yb extends yl{apply(e){return un(e)}}yb.className="tanh",oX.registerClass(yb);class yx extends yl{apply(e,t=-1){return pI(e,t)}}yx.className="softmax",oX.registerClass(yx);class yk extends yl{apply(e,t=-1){return hc(e,t)}}yk.className="logSoftmax",oX.registerClass(yk);class yv extends yl{apply(e,t=1){return i7(()=>li(ue(li(e,t)),e))}}yv.className="swish",oX.registerClass(yv);class yw extends yl{apply(e){return i7(()=>li(e,un(hp(e))))}}function yI(e){return e.getClassName()}function yS(e,t={}){return fj(e,oX.SerializationMap.getMap().classNameMap,t,"activation")}function yN(e){if(null==e){let e={};return e.className="linear",e.config={},yS(e)}if("string"==typeof e){let t={};return t.className=e,t.config={},yS(t)}return e instanceof yl?e:yS(e)}yw.className="mish",oX.registerClass(yw);class yT extends oX.Serializable{}class yC extends yT{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return i7(()=>{let t=hT([1]);return this.hasL1&&(t=lr(t,uQ(li(this.l1,lN(e))))),this.hasL2&&(t=lr(t,uQ(li(this.l2,li(e,e))))),l5(t,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}yC.className="L1L2",oX.registerClass(yC);let y$={l1l2:"L1L2"};function yE(e,t={}){return fj(e,oX.SerializationMap.getMap().classNameMap,t,"regularizer")}function yA(e){if(null==e)return null;if("string"==typeof e){let t=e in y$?y$[e]:e;return yE({className:t,config:{}})}return e instanceof yT?e:yE(e)}class yR extends m7{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){let n=pr(e=mY(e));return null!=this.maxValue&&(n=uc(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){let e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}yR.className="ReLU",oX.registerClass(yR);class yF extends m7{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){let n=mY(e);return ha(n,this.alpha)}computeOutputShape(e){return e}getConfig(){let e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}yF.className="LeakyReLU",oX.registerClass(yF);class yD extends m7{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=mj(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=yA(e.alphaRegularizer),this.alphaConstraint=gf(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else if("number"==typeof e.sharedAxes)this.sharedAxes=[e.sharedAxes];else throw new f_(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`)}build(e){e=mZ(e);let t=e.slice(1);if(null!=this.sharedAxes)for(let e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);let n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new m3({ndim:e.length,axes:n})],this.built=!0}call(e,t){return hH(e=mY(e),this.alpha.read())}getConfig(){let e={alphaInitializer:fq(this.alphaInitializer),alphaRegularizer:fq(this.alphaRegularizer),alphaConstraint:fq(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}yD.className="PReLU",oX.registerClass(yD);class y_ extends m7{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new fO(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){let n=mY(e);return uP(n)}computeOutputShape(e){return e}getConfig(){let e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}y_.className="ELU",oX.registerClass(y_);class yO extends m7{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){let n=mY(e);return li(n,iS(u9(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){let e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}yO.className="ThresholdedReLU",oX.registerClass(yO);class yM extends m7{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=new yx().apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){let n=mY(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){let e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function yL(e,t,n){if("number"==typeof e)return fz(e,t);if(e.length!==t)throw new f_(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let r=0;r<t;++r){let a=e[r];if(a!==parseInt(a.toString(),10))throw new f_(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${a}`)}return e}function yz(e,t,n,r,a=1){return null==e?e:Math.floor((("same"===n?e:e-(t+(t-1)*(a-1))+1)+r-1)/r)}function yP(e,t,n,r){if(null==e)return null;if("valid"===r)e=e*t+mh([n-t,0]);else if("same"===r)e*=t;else throw new f_(`Unsupport padding mode: ${r}.`);return e}function yB(e,t){return i7(()=>(f9(t),"channelsFirst"===t)?of(e,[0,2,3,1]):e)}function yW(e,t){return i7(()=>(f9(t),"channelsFirst"===t)?of(e,[0,2,3,4,1]):e)}function yV(e,t,n,r=[1,1],a="valid",s,i,o=null){return i7(()=>{if(null==s&&(s=mc()),f9(s),3!==e.rank&&4!==e.rank)throw new f_(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new f_(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=yB(e,s);if("causal"===a)throw new fO("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=ds.conv2d({x:l,filter:t,strides:r,pad:"same"===a?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===s&&(l=of(l,[0,3,1,2])),l})}yM.className="Softmax",oX.registerClass(yM);class yU extends m7{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",yU.verifyArgs(t),this.rank=e,fJ(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new fO(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=yL(t.kernelSize,e,"kernelSize"),this.strides=yL(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,me(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,f9(this.dataFormat),this.activation=yN(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=mj(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=gf(t.biasConstraint),this.biasRegularizer=yA(t.biasRegularizer),this.activityRegularizer=yA(t.activityRegularizer),this.dilationRate=yL(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new f_(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new f_(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new f_(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}}static verifyArgs(e){if(fP("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!fZ(e.kernelSize,"number",1,3))throw new f_(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){let e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:yI(this.activation),useBias:this.useBias,biasInitializer:fq(this.biasInitializer),biasRegularizer:fq(this.biasRegularizer),activityRegularizer:fq(this.activityRegularizer),biasConstraint:fq(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class yG extends yU{constructor(e,t){super(e,t),this.kernel=null,yG.verifyArgs(t),this.filters=t.filters,fJ(this.filters,"filters"),this.kernelInitializer=mj(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=gf(t.kernelConstraint),this.kernelRegularizer=yA(t.kernelRegularizer)}build(e){e=mZ(e);let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new f_(`The channel dimension of the input should be defined. Found ${e[t]}`);let n=e[t],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return i7(()=>{let t;e=mY(e);let n=null==this.bias?null:this.bias.read(),r=fQ(this.activation.getClassName());if(null!=r&&2===this.rank)t=yV(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)t=function(e,t,n,r=1,a="valid",s,i=1){return i7(()=>{if(null==s&&(s=mc()),f9(s),3!==e.shape.length)throw new f_(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new f_(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new f_(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===s&&(e=of(e,[0,2,1])),"causal"===a)throw new fO("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=ux(e,t,r,"same"===a?"same":"valid","NWC",i);return null!=n&&(o=mN(o,n)),o})}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=yV(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else if(3===this.rank)t=function(e,t,n,r=[1,1,1],a="valid",s,i){return i7(()=>{if(null==s&&(s=mc()),f9(s),4!==e.rank&&5!==e.rank)throw new f_(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new f_(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=yW(e,s);if("causal"===a)throw new fO("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=uw(o,t,r,"same"===a?"same":"valid","NDHWC",i),null!=n&&(o=mN(o,n)),"channelsFirst"===s&&(o=of(o,[0,4,1,2,3])),o})}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else throw new fO("convolutions greater than 3D are not implemented yet.");null!=this.activation&&(t=this.activation.apply(t))}return t})}computeOutputShape(e){e=mZ(e);let t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){let r=yz(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(r)}let r=[e[0]];return"channelsLast"===this.dataFormat?(r=r.concat(t)).push(this.filters):(r.push(this.filters),r=r.concat(t)),r}getConfig(){let e={filters:this.filters,kernelInitializer:fq(this.kernelInitializer),kernelRegularizer:fq(this.kernelRegularizer),kernelConstraint:fq(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new f_(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class yH extends yG{constructor(e){super(2,e),yH.verifyArgs(e)}getConfig(){let e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!fZ(e.kernelSize,"number",1,2))throw new f_(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}yH.className="Conv2D",oX.registerClass(yH);class yq extends yG{constructor(e){super(3,e),yq.verifyArgs(e)}getConfig(){let e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!(Array.isArray(e.kernelSize)&&(1===e.kernelSize.length||3===e.kernelSize.length)))throw new f_(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}yq.className="Conv3D",oX.registerClass(yq);class yj extends yH{constructor(e){if(super(e),this.inputSpec=[new m3({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new f_(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=mZ(e)).length)throw new f_("Input should have rank 4; Received input shape: "+JSON.stringify(e));let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new f_("The channel dimension of the inputs should be defined. Found `None`.");let n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new m3({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return i7(()=>{let t,n,r=mY(e);if(4!==r.shape.length)throw new f_(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);let a=r.shape,s=a[0];"channelsFirst"===this.dataFormat?(t=2,n=3):(t=1,n=2);let i=a[t],o=a[n],l=this.kernelSize[0],u=this.kernelSize[1],h=this.strides[0],p=this.strides[1],d=yP(i,h,l,this.padding),c=yP(o,p,u,this.padding),f=[s,d,c,this.filters];"channelsLast"!==this.dataFormat&&(r=of(r,[0,2,3,1]));let m=uv(r,this.kernel.read(),f,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(m=of(m,[0,3,1,2])),null!=this.bias&&(m=mN(m,this.bias.read(),this.dataFormat)),null!=this.activation&&(m=this.activation.apply(m)),m})}computeOutputShape(e){let t,n,r;e=mZ(e);let a=e.slice();"channelsFirst"===this.dataFormat?(t=1,n=2,r=3):(t=3,n=1,r=2);let s=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return a[t]=this.filters,a[n]=yP(a[n],o,s,this.padding),a[r]=yP(a[r],l,i,this.padding),a}getConfig(){let e=super.getConfig();return delete e.dilationRate,e}}yj.className="Conv2DTranspose",oX.registerClass(yj);class yK extends yq{constructor(e){if(super(e),this.inputSpec=[new m3({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new f_(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=mZ(e)).length)throw new f_("Input should have rank 5; Received input shape: "+JSON.stringify(e));let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new f_("The channel dimension of the inputs should be defined. Found `None`.");let n=e[t],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",r,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new m3({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return i7(()=>{let t,n,r,a=mY(e);if(5!==a.shape.length)throw new f_(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${a.shape.length}`);let s=a.shape,i=s[0];"channelsFirst"===this.dataFormat?(r=2,t=3,n=4):(r=1,t=2,n=3);let o=s[r],l=s[t],u=s[n],h=this.kernelSize[0],p=this.kernelSize[1],d=this.kernelSize[2],c=this.strides[0],f=this.strides[1],m=this.strides[2],g=yP(o,c,h,this.padding),y=yP(l,f,p,this.padding),b=yP(u,m,d,this.padding),x=[i,g,y,b,this.filters];"channelsLast"!==this.dataFormat&&(a=of(a,[0,2,3,4,1]));let k=uS(a,this.kernel.read(),x,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(k=of(k,[0,4,1,2,3])),null!==this.bias&&(k=mN(k,this.bias.read(),this.dataFormat)),null!==this.activation&&(k=this.activation.apply(k)),k})}computeOutputShape(e){let t,n,r,a;e=mZ(e);let s=e.slice();"channelsFirst"===this.dataFormat?(t=1,n=2,r=3,a=4):(t=4,n=1,r=2,a=3);let i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],h=this.strides[1],p=this.strides[2];return s[t]=this.filters,s[n]=yP(s[n],u,i,this.padding),s[r]=yP(s[r],h,o,this.padding),s[a]=yP(s[a],p,l,this.padding),s}getConfig(){let e=super.getConfig();return delete e.dilationRate,e}}yK.className="Conv3DTranspose",oX.registerClass(yK);class yX extends yG{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new f_("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new f_("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new f_(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=mj(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=yA(t.depthwiseRegularizer),this.depthwiseConstraint=gf(t.depthwiseConstraint),this.pointwiseInitializer=mj(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=yA(t.pointwiseRegularizer),this.pointwiseConstraint=gf(t.pointwiseConstraint)}build(e){if((e=mZ(e)).length<this.rank+2)throw new f_(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);let t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new f_(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);let n=e[t],r=this.kernelSize.concat([n,this.depthMultiplier]),a=[];for(let e=0;e<this.rank;++e)a.push(1);a.push(n*this.depthMultiplier,this.filters),this.depthwiseKernel=this.addWeight("depthwise_kernel",r,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,!0,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.inputSpec=[new m3({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return i7(()=>{let t;if(e=mY(e),1===this.rank)throw new fO("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=of(e,[0,2,3,1])),t=pc(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=mN(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=of(t,[0,3,1,2])),t})}getConfig(){let e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=fq(this.depthwiseInitializer),e.pointwiseInitializer=fq(this.pointwiseInitializer),e.depthwiseRegularizer=fq(this.depthwiseRegularizer),e.pointwiseRegularizer=fq(this.pointwiseRegularizer),e.depthwiseConstraint=fq(this.depthwiseConstraint),e.pointwiseConstraint=fq(this.pointwiseConstraint),e}}yX.className="SeparableConv";class yY extends yX{constructor(e){super(2,e)}}yY.className="SeparableConv2D",oX.registerClass(yY);class yZ extends yG{constructor(e){super(1,e),yZ.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){let e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!fZ(e.kernelSize,"number",1,1))throw new f_(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}yZ.className="Conv1D",oX.registerClass(yZ);class yJ extends m7{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return i7(()=>{if(e=mY(e),"channelsLast"===this.dataFormat){let t=my(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return my(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{let t=my(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return my(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){let e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}yJ.className="Cropping2D",oX.registerClass(yJ);class yQ extends m7{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,f9(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,fY(f4,"InterpolationFormat",this.interpolation)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){let t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{let t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return i7(()=>{let t=mY(e),n=t.shape;if("channelsFirst"===this.dataFormat){t=of(t,[0,2,3,1]);let e=this.size[0]*n[2],r=this.size[1]*n[3],a="nearest"===this.interpolation?ct.resizeNearestNeighbor(t,[e,r]):ct.resizeBilinear(t,[e,r]);return of(a,[0,3,1,2])}{let e=this.size[0]*n[1],r=this.size[1]*n[2];return"nearest"===this.interpolation?ct.resizeNearestNeighbor(t,[e,r]):ct.resizeBilinear(t,[e,r])}})}getConfig(){let e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}yQ.className="UpSampling2D",oX.registerClass(yQ);class y0 extends yU{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=mj(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=gf(e.depthwiseConstraint),this.depthwiseRegularizer=yA(e.depthwiseRegularizer)}build(e){if((e=mZ(e)).length<4)throw new f_(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);let t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new f_(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);let n=e[t],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return i7(()=>{let t=function(e,t,n=[1,1],r="valid",a,s){return i7(()=>{null==a&&(a=mc()),f9(a);let s=yB(e,a);if(4!==e.rank)throw new f_(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new f_(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return s=uR(s,t,n,"same"===r?"same":"valid","NHWC",null),"channelsFirst"===a&&(s=of(s,[0,3,1,2])),s})}(e=mY(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,0);return this.useBias&&(t=mN(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t})}computeOutputShape(e){e=mZ(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=yz(t,this.kernelSize[0],this.padding,this.strides[0]),s=yz(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],r,a,s]:[e[0],a,s,r]}getConfig(){let e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=fq(this.depthwiseInitializer),e.depthwiseRegularizer=fq(this.depthwiseRegularizer),e.depthwiseConstraint=fq(this.depthwiseRegularizer),e}}y0.className="DepthwiseConv2D",oX.registerClass(y0);var y1={};function y2(e,t,n,r){if(Array.isArray(e)){if(null!=t||null!=n)throw new f_("When inputs is an array, neither initialState or constants should be provided");null!=r&&(n=e.slice(e.length-r,e.length),e=e.slice(0,e.length-r)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function a(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=a(t),constants:n=a(n)}}function y3(e,t,n,r=!1,a,s,i=!1,o=!1){return i7(()=>{let l,u,h;let p=t.shape.length;if(p<3)throw new f_(`Input should be at least 3D, but is ${p}D.`);let d=[1,0].concat(mp(2,p));if(t=of(t,d),null!=s)throw new fO("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=a&&((a=iS(iS(a,"bool"),"float32")).rank===p-1&&(a=u3(a,-1)),a=of(a,d)),r&&(t=ps(t,0),null!=a&&(a=ps(a,0)));let c=[],f=n,m=t.shape[0],g=pG(t);null!=a&&(u=pG(a));for(let t=0;t<m;++t){let n=g[t],r=i7(()=>e(n,f));if(null==a)l=r[0],f=r[1];else{let e=i7(()=>{let e=u[t],n=lI(hM(e),e),a=lr(li(r[0],e),li(f[0],n)),s=f.map((t,a)=>lr(li(r[1][a],e),li(t,n)));return{output:a,newStates:s}});l=e.output,f=e.newStates}o&&c.push(l)}return o&&(h=pR(c,1)),[l,h,f]})}R(y1,"ConvLSTM2DCell",()=>bi),R(y1,"ConvLSTM2D",()=>bo);class y4 extends m7{constructor(e){let t;if(super(e),null==e.cell)throw new f_("cell property is missing for the constructor of RNN.");if(null==(t=Array.isArray(e.cell)?new bn({cells:e.cell}):e.cell).stateSize)throw new f_("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new m3({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){if(null!=this.states_)return this.states_;{let e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;return mp(0,e).map(e=>null)}}setStates(e){this.states_=e}computeOutputShape(e){let t;mK(e)&&(e=e[0]);let n=this.cell.stateSize;Array.isArray(n)||(n=[n]);let r=n[0];if(t=this.returnSequences?[e[0],e[1],r]:[e[0],r],!this.returnState)return t;{let r=[];for(let t of n)r.push([e[0],t]);return[t].concat(r)}}computeMask(e,t){return i7(()=>{Array.isArray(t)&&(t=t[0]);let e=this.returnSequences?t:null;if(!this.returnState)return e;{let t=this.states.map(e=>null);return[e].concat(t)}})}get states(){if(null!=this.states_)return this.states_;{let e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}}set states(e){this.states_=e}build(e){let t;if(null!=this.numConstants)throw new fO("Constants support is not implemented in RNN yet.");mK(e)&&(e=e[0]);let n=this.stateful?e[0]:null,r=e.slice(2);this.inputSpec[0]=new m3({shape:[n,null,...r]});let a=[e[0]].concat(e.slice(2));if(this.cell.build(a),t=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!rX.arraysEqual(this.stateSpec.map(e=>e.shape[e.shape.length-1]),t))throw new f_(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=t.map(e=>new m3({shape:[null,e]}));this.stateful&&this.resetStates()}resetStates(e,t=!1){i7(()=>{if(!this.stateful)throw new fF("Cannot call resetStates() on an RNN Layer that is not stateful.");let n=this.inputSpec[0].shape[0];if(null==n)throw new f_("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>hT([n,e])):this.states_=[hT([n,this.cell.stateSize])];else if(null==e)i9(this.states_),null!=this.keptStates&&(i9(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(e=>hT([n,e])):this.states_[0]=hT([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new f_(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):i9(this.states_);for(let t=0;t<this.states_.length;++t){let r=e[t],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,s=[n,a];if(!rX.arraysEqual(r.shape,s))throw new f_(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${r.shape}`);this.states_[t]=r}}this.states_=this.states_.map(e=>oe(e.clone()))})}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});let a=y2(e,n,r,this.numConstants);e=a.inputs,n=a.initialState,r=a.constants;let s=[],i=[];if(null!=n){for(let e of(t.initialState=n,s=s.concat(n),this.stateSpec=[],n))this.stateSpec.push(new m3({shape:e.shape}));i=i.concat(this.stateSpec)}null!=r&&(t.constants=r,s=s.concat(r),this.numConstants=r.length);let o=s[0]instanceof m4;if(!o)return super.apply(e,t);{let n=[e].concat(s),r=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=r;let o=super.apply(n,t);return this.inputSpec=a,o}}call(e,t){return i7(()=>{let n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;e=mY(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));let s=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==s)throw new f_(`RNN Layer has ${s} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");let i={training:r},o=y3((e,t)=>{let n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]},e,a,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],h=o[2];this.stateful&&this.resetStates(h,r);let p=this.returnSequences?u:l;return this.returnState?[p].concat(h):p})}getInitialState(e){return i7(()=>{let t=hT(e.shape);return(t=mf(t=uQ(t,[1,2])),Array.isArray(this.cell.stateSize))?this.cell.stateSize.map(e=>e>1?mk(t,[1,e]):t):this.cell.stateSize>1?[mk(t,[1,this.cell.stateSize])]:[t]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){let e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);let n=this.cell.getConfig();return this.getClassName()===y4.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){let r=t.cell,a=gN(r,n);return new e(Object.assign(t,{cell:a}))}}y4.className="RNN",oX.registerClass(y4);class y6 extends m7{}class y5 extends y6{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,fJ(this.units,"units"),this.activation=yN(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=mj(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=mj(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=mj(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=yA(e.kernelRegularizer),this.recurrentRegularizer=yA(e.recurrentRegularizer),this.biasRegularizer=yA(e.biasRegularizer),this.kernelConstraint=gf(e.kernelConstraint),this.recurrentConstraint=gf(e.recurrentConstraint),this.biasConstraint=gf(e.biasConstraint),this.dropout=mu([1,mh([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=mu([1,mh([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=mZ(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return i7(()=>{let n;if(2!==e.length)throw new f_(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];let a=null!=t.training&&t.training;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=br({ones:()=>hM(e),rate:this.dropout,training:a,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=br({ones:()=>hM(r),rate:this.recurrentDropout,training:a,dropoutFunc:this.dropoutFunc}));let s=this.dropoutMask,i=this.recurrentDropoutMask;n=null!=s?mw(li(e,s),this.kernel.read()):mw(e,this.kernel.read()),null!=this.bias&&(n=mN(n,this.bias.read())),null!=i&&(r=li(r,i));let o=lr(n,mw(r,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]})}getConfig(){let e=super.getConfig(),t={units:this.units,activation:yI(this.activation),useBias:this.useBias,kernelInitializer:fq(this.kernelInitializer),recurrentInitializer:fq(this.recurrentInitializer),biasInitializer:fq(this.biasInitializer),kernelRegularizer:fq(this.kernelRegularizer),recurrentRegularizer:fq(this.recurrentRegularizer),biasRegularizer:fq(this.biasRegularizer),activityRegularizer:fq(this.activityRegularizer),kernelConstraint:fq(this.kernelConstraint),recurrentConstraint:fq(this.recurrentConstraint),biasConstraint:fq(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}y5.className="SimpleRNNCell",oX.registerClass(y5);class y8 extends y4{constructor(e){e.cell=new y5(e),super(e)}call(e,t){return i7(()=>{null!=this.cell.dropoutMask&&(i9(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(i9(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:a})})}static fromConfig(e,t){return new e(t)}}y8.className="SimpleRNN",oX.registerClass(y8);class y7 extends y6{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new f_("GRUCell does not support reset_after parameter set to true.");this.units=e.units,fJ(this.units,"units"),this.activation=yN(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=yN(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=mj(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=mj(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=mj(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=yA(e.kernelRegularizer),this.recurrentRegularizer=yA(e.recurrentRegularizer),this.biasRegularizer=yA(e.biasRegularizer),this.kernelConstraint=gf(e.kernelConstraint),this.recurrentConstraint=gf(e.recurrentConstraint),this.biasConstraint=gf(e.biasConstraint),this.dropout=mu([1,mh([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=mu([1,mh([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=mZ(e);let t=e[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return i7(()=>{let n,r,a;if(2!==e.length)throw new f_(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);let s=null!=t.training&&t.training,i=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=br({ones:()=>hM(e),rate:this.dropout,training:s,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=br({ones:()=>hM(i),rate:this.recurrentDropout,training:s,count:3,dropoutFunc:this.dropoutFunc}));let o=this.dropoutMask,l=this.recurrentDropoutMask;0<this.dropout&&this.dropout<1&&(e=li(e,o[0]));let u=mw(e,this.kernel.read());this.useBias&&(u=mN(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(i=li(i,l[0]));let h=this.recurrentKernel.read(),[p,d]=pC(h,[2*this.units,this.units],h.rank-1),c=mw(i,p),[f,m,g]=pC(u,3,u.rank-1),[y,b]=pC(c,2,c.rank-1);n=this.recurrentActivation.apply(lr(f,y)),r=this.recurrentActivation.apply(lr(m,b));let x=mw(li(r,i),d);a=this.activation.apply(lr(g,x));let k=lr(li(n,i),li(lr(1,od(n)),a));return[k,k]})}getConfig(){let e=super.getConfig(),t={units:this.units,activation:yI(this.activation),recurrentActivation:yI(this.recurrentActivation),useBias:this.useBias,kernelInitializer:fq(this.kernelInitializer),recurrentInitializer:fq(this.recurrentInitializer),biasInitializer:fq(this.biasInitializer),kernelRegularizer:fq(this.kernelRegularizer),recurrentRegularizer:fq(this.recurrentRegularizer),biasRegularizer:fq(this.biasRegularizer),activityRegularizer:fq(this.activityRegularizer),kernelConstraint:fq(this.kernelConstraint),recurrentConstraint:fq(this.recurrentConstraint),biasConstraint:fq(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}y7.className="GRUCell",oX.registerClass(y7);class y9 extends y4{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new y7(e),super(e)}call(e,t){return i7(()=>{null!=this.cell.dropoutMask&&(i9(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(i9(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:a})})}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}y9.className="GRU",oX.registerClass(y9);class be extends y6{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,fJ(this.units,"units"),this.activation=yN(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=yN(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=mj(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=mj(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=mj(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=yA(e.kernelRegularizer),this.recurrentRegularizer=yA(e.recurrentRegularizer),this.biasRegularizer=yA(e.biasRegularizer),this.kernelConstraint=gf(e.kernelConstraint),this.recurrentConstraint=gf(e.recurrentConstraint),this.biasConstraint=gf(e.biasConstraint),this.dropout=mu([1,mh([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=mu([1,mh([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;let n;e=mZ(e);let r=e[e.length-1];if(this.kernel=this.addWeight("kernel",[r,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){let e=this.biasInitializer,r=this.units;n=new((t=class extends mE{apply(t,n){let a=e.apply([r]),s=new mR().apply([r]),i=e.apply([2*r]);return mx(mx(a,s),i)}}).className="CustomInit",t)}else n=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,n,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return i7(()=>{let n,r,a;let s=null!=t.training&&t.training;if(3!==e.length)throw new f_(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let i=e[1],o=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=br({ones:()=>hM(e),rate:this.dropout,training:s,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=br({ones:()=>hM(i),rate:this.recurrentDropout,training:s,count:4,dropoutFunc:this.dropoutFunc}));let l=this.dropoutMask,u=this.recurrentDropoutMask;0<this.dropout&&this.dropout<1&&(e=li(e,l[0]));let h=mw(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(i=li(i,u[0])),h=lr(h,mw(i,this.recurrentKernel.read())),this.useBias&&(h=mN(h,this.bias.read()));let[p,d,c,f]=pC(h,4,h.rank-1);n=this.recurrentActivation.apply(p),r=lr(li(this.recurrentActivation.apply(d),o),li(n,this.activation.apply(c))),a=this.recurrentActivation.apply(f);let m=li(a,this.activation.apply(r));return[m,m,r]})}getConfig(){let e=super.getConfig(),t={units:this.units,activation:yI(this.activation),recurrentActivation:yI(this.recurrentActivation),useBias:this.useBias,kernelInitializer:fq(this.kernelInitializer),recurrentInitializer:fq(this.recurrentInitializer),biasInitializer:fq(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:fq(this.kernelRegularizer),recurrentRegularizer:fq(this.recurrentRegularizer),biasRegularizer:fq(this.biasRegularizer),activityRegularizer:fq(this.activityRegularizer),kernelConstraint:fq(this.kernelConstraint),recurrentConstraint:fq(this.recurrentConstraint),biasConstraint:fq(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}be.className="LSTMCell",oX.registerClass(be);class bt extends y4{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new be(e),super(e)}call(e,t){return i7(()=>{null!=this.cell.dropoutMask&&(i9(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(i9(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);let n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:a})})}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}bt.className="LSTM",oX.registerClass(bt);class bn extends y6{constructor(e){super(e),this.cells=e.cells}get stateSize(){let e=[];for(let t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return i7(()=>{let n;let r=e.slice(1),a=[];for(let e of this.cells.slice().reverse())Array.isArray(e.stateSize)?a.push(r.splice(0,e.stateSize.length)):a.push(r.splice(0,1));a.reverse();let s=[];for(let i=0;i<this.cells.length;++i){let o=this.cells[i];r=a[i],n=0===i?[e[0]].concat(r):[n[0]].concat(r),n=o.call(n,t),s.push(n.slice(1))}for(let e of(r=[],s.slice().reverse()))r.push(...e);return[n[0]].concat(r)})}build(e){let t;mK(e)&&(e=e[0]),this.cells.forEach((n,r)=>{mr(`RNNCell_${r}`,()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]})}),this.built=!0}getConfig(){let e=super.getConfig(),t=this.cells.map(e=>({className:e.getClassName(),config:e.getConfig()}));return Object.assign({},e,{cells:t})}static fromConfig(e,t,n={}){let r=[];for(let e of t.cells)r.push(gN(e,n));return new e({cells:r})}get trainableWeights(){if(!this.trainable)return[];let e=[];for(let t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){let e=[];for(let t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){let t=[];for(let e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){let e=[];for(let t of this.cells)e.push(...t.weights);return m1(e)}setWeights(e){let t=[];for(let n of this.cells){let r=n.weights.length,a=e.splice(r);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],a[e]])}m2(t)}}function br(e){let{ones:t,rate:n,training:r=!1,count:a=1,dropoutFunc:s}=e,i=()=>{var e;return null!=s?s(t(),n):(e=t(),i7(()=>p7(e,n,void 0,void 0)))},o=()=>mT(i,t,r);if(!a||a<=1)return oe(o().clone());let l=Array(a).fill(void 0).map(o);return l.map(e=>oe(e.clone()))}bn.className="StackedRNNCells",oX.registerClass(bn);var ba=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&0>t.indexOf(r)&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var a=0,r=Object.getOwnPropertySymbols(e);a<r.length;a++)0>t.indexOf(r[a])&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]]);return n};class bs extends y4{constructor(e){if(e.unroll)throw new fO("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new fO("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new m3({ndim:5})]}call(e,t){return i7(()=>{if(null!=this.cell.dropoutMask&&(i9(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(i9(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new f_("ConvRNN2D cell does not support constants");let n=null==t?null:t.mask,r=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:r,initialState:a})})}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...[,,].fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return i7(()=>{let{stateSize:t}=this.cell,n=e.shape,r=this.computeSingleOutputShape(n),a=[r[0],...r.slice(2)],s=hT(a);return Array.isArray(t)?Array(t.length).fill(s):[s]})}resetStates(e,t=!1){i7(()=>{if(!this.stateful)throw new fF("Cannot call resetStates() on an RNN Layer that is not stateful.");let n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),a=[r[0],...r.slice(2)],s=n[0];if(null==s)throw new f_("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>hT(a)):this.states_=[hT(a)];else if(null==e)i9(this.states_),null!=this.keptStates&&(i9(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>hT(a)):this.states_[0]=hT(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new f_(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):i9(this.states_);for(let t=0;t<this.states_.length;++t){let n=e[t];if(!rX.arraysEqual(n.shape,a))throw new f_(`State ${t} is incompatible with layer ${this.name}: expected shape=${a}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map(e=>oe(e.clone()))})}computeSingleOutputShape(e){let{dataFormat:t,filters:n,kernelSize:r,padding:a,strides:s,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],h=yz(l,r[0],a,s[0],i[0]),p=yz(u,r[1],a,s[1],i[1]),d=[...e.slice(0,2),...o?[n,h,p]:[h,p,n]];return d}}bs.className="ConvRNN2D";class bi extends be{constructor(e){let{filters:t,kernelSize:n,strides:r,padding:a,dataFormat:s,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,fJ(this.filters,"filters"),this.kernelSize=yL(n,2,"kernelSize"),this.kernelSize.forEach(e=>fJ(e,"kernelSize")),this.strides=yL(r||1,2,"strides"),this.strides.forEach(e=>fJ(e,"strides")),this.padding=a||"valid",me(this.padding),this.dataFormat=s||"channelsLast",f9(this.dataFormat),this.dilationRate=yL(i||1,2,"dilationRate"),this.dilationRate.forEach(e=>fJ(e,"dilationRate"))}build(e){var t;e=mZ(e);let n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new f_(`The channel dimension of the input should be defined. Found ${e[n]}`);let r=e[n],a=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);let s=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",s,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){let n=this.biasInitializer,r=this.filters;e=new((t=class extends mE{apply(e,t){let a=n.apply([r]),s=hC([r]),i=n.apply([2*r]);return mb([a,s,i])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return i7(()=>{if(3!==e.length)throw new f_(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let n=t.training||!1,r=e[0],a=e[1],s=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=br({ones:()=>hM(r),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));let i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?li(t[n],e):e,l=o(r,i,0),u=o(r,i,1),h=o(r,i,2),p=o(r,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=br({ones:()=>hM(a),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));let d=this.recurrentDropoutMask,c=o(a,d,0),f=o(a,d,1),m=o(a,d,2),g=o(a,d,3),[y,b,x,k]=pC(this.kernel.read(),4,3),[v,w,I,S]=this.useBias?pC(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,v,this.padding),u=this.inputConv(u,b,w,this.padding),h=this.inputConv(h,x,I,this.padding),p=this.inputConv(p,k,S,this.padding);let[N,T,C,$]=pC(this.recurrentKernel.read(),4,3);c=this.recurrentConv(c,N),f=this.recurrentConv(f,T),m=this.recurrentConv(m,C),g=this.recurrentConv(g,$);let E=this.recurrentActivation.apply(lr(l,c)),A=this.recurrentActivation.apply(lr(u,f)),R=lr(li(A,s),li(E,this.activation.apply(lr(h,m)))),F=li(this.recurrentActivation.apply(lr(p,g)),this.activation.apply(R));return[F,F,R]})}getConfig(){let e=super.getConfig(),{units:t}=e,n=ba(e,["units"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,r)}inputConv(e,t,n,r){let a=ub(e,t,this.strides,r||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?mN(a,n,this.dataFormat):a}recurrentConv(e,t){return ub(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}bi.className="ConvLSTM2DCell",oX.registerClass(bi);class bo extends bs{constructor(e){let t=new bi(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}bo.className="ConvLSTM2D",oX.registerClass(bo);class bl extends m7{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;let t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return i7(()=>{this.invokeCallHook(e,t);let n=mY(e);if(0<this.rate&&this.rate<1){let e=null!=t.training&&t.training,r=this.getNoiseShape(n),a=mT(()=>{var e,t;return e=this.rate,t=this.seed,i7(()=>p7(n,e,r,t))},()=>n,e);return a}return e})}getConfig(){let e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}bl.className="Dropout",oX.registerClass(bl);class bu extends bl{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){let t=e.shape;return[t[0],1,t[2]]}}bu.className="SpatialDropout1D",oX.registerClass(bu);class bh extends m7{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,fJ(this.units,"units"),this.activation=yN(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=mj(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=mj(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=gf(e.kernelConstraint),this.biasConstraint=gf(e.biasConstraint),this.kernelRegularizer=yA(e.kernelRegularizer),this.biasRegularizer=yA(e.biasRegularizer),this.activityRegularizer=yA(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){e=mZ(e);let t=e[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){e=mZ(e);let t=e.slice();return t[t.length-1]=this.units,t}call(e,t){return i7(()=>{let n;this.invokeCallHook(e,t);let r=mY(e),a=fQ(this.activation.getClassName());return null!=a?n=mw(r,this.kernel.read(),a,this.bias?this.bias.read():null):(n=mw(r,this.kernel.read()),null!=this.bias&&(n=mN(n,this.bias.read())),null!=this.activation&&(n=this.activation.apply(n))),n})}getConfig(){let e={units:this.units,activation:yI(this.activation),useBias:this.useBias,kernelInitializer:fq(this.kernelInitializer),biasInitializer:fq(this.biasInitializer),kernelRegularizer:fq(this.kernelRegularizer),biasRegularizer:fq(this.biasRegularizer),activityRegularizer:fq(this.activityRegularizer),kernelConstraint:fq(this.kernelConstraint),biasConstraint:fq(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}bh.className="Dense",oX.registerClass(bh);class bp extends m7{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){for(let t of(e=mZ(e)).slice(1))if(null==t)throw new f_(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],ml(e,1)]}call(e,t){return i7(()=>{this.invokeCallHook(e,t);let n=mY(e);if("channelsFirst"===this.dataFormat&&n.rank>1){let e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=of(n,e)}return function(e){if(e.rank<=1)throw new f_(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);let t=[e.shape[0],ml(e.shape,1)];return l5(e,t)}(n)})}getConfig(){let e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);let t=super.getConfig();return Object.assign(e,t),e}}bp.className="Flatten",oX.registerClass(bp);class bd extends m7{constructor(e){super(e),this.supportsMasking=!0,this.activation=yN(e.activation)}call(e,t){return i7(()=>{this.invokeCallHook(e,t);let n=mY(e);return this.activation.apply(n)})}getConfig(){let e={activation:yI(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}bd.className="Activation",oX.registerClass(bd);class bc extends m7{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return i7(()=>{var t,n;return t=e=mY(e),n=this.n,i7(()=>{if(2!==t.shape.length)throw new f_(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);let e=mf(t,1);return mk(e,[1,n,1])})})}getConfig(){let e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}bc.className="RepeatVector",oX.registerClass(bc);class bf extends m7{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){let n="Total size of new array must be unchanged.",r=t.slice(),a=1,s=null;for(let e=0;e<r.length;++e){let t=r[e];if(this.isUnknown(t)){if(null===s)s=e;else throw new f_("Can only specifiy one unknown dimension.")}else a*=t}let i=ml(e);if(null!==s){if(0===a||i%a!=0)throw new f_(n);r[s]=i/a}else if(i!==a)throw new f_(n);return r}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return i7(()=>{this.invokeCallHook(e,t);let n=mY(e),r=n.shape,a=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return l5(n,a)})}getConfig(){let e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}bf.className="Reshape",oX.registerClass(bf);class bm extends m7{constructor(e){if(super(e),null==e.dims)throw Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);let t=mp(1,e.dims.length+1);if(!rX.arraysEqual(e.dims.slice().sort(),t))throw Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new m3({ndim:this.dims.length+1})]}computeOutputShape(e){e=mZ(e);let t=e.slice();return this.dims.forEach((n,r)=>{t[r+1]=e[n]}),t}call(e,t){return of(mY(e),this.dimsIncludingBatch)}getConfig(){let e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}bm.className="Permute",oX.registerClass(bm);class bg extends m7{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e?this.maskValue=null==e.maskValue?0:e.maskValue:this.maskValue=0}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){let n=mY(e);return lL(hO(n,this.maskValue),-1)}call(e,t){return i7(()=>{this.invokeCallHook(e,t);let n=mY(e),r=lL(hO(n,this.maskValue),-1,!0),a=li(n,iS(r,n.dtype));return a})}}bg.className="Masking",oX.registerClass(bg);class by extends m7{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(fV(e.inputLength))}this.inputDim=e.inputDim,fJ(this.inputDim,"inputDim"),this.outputDim=e.outputDim,fJ(this.outputDim,"outputDim"),this.embeddingsInitializer=mj(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=yA(e.embeddingsRegularizer),this.activityRegularizer=yA(e.activityRegularizer),this.embeddingsConstraint=gf(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return i7(()=>this.maskZero?hO(e=mY(e),lu(e)):null)}computeOutputShape(e){if(e=mZ(e),null==this.inputLength)return[...e,this.outputDim];let t=fV(this.inputLength);if(t.length!==e.length-1)throw new f_(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let r=0;r<t.length;++r){let a=t[r],s=e[r+1];if(null!=a&&null!=s&&a!==s)throw new f_(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(t[n]=s),n++}}return[e[0],...t,this.outputDim]}call(e,t){return i7(()=>{this.invokeCallHook(e,t);let n=mY(e);"int32"!==n.dtype&&(n=iS(n,"int32"));let r=mI(this.embeddings.read(),l5(n,[n.size]));return l5(r,mZ(this.computeOutputShape(n.shape)))})}getConfig(){let e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:fq(this.embeddingsInitializer),embeddingsRegularizer:fq(this.embeddingsRegularizer),activityRegularizer:fq(this.activityRegularizer),embeddingsConstraint:fq(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}by.className="Embedding",oX.registerClass(by);class bb extends m7{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new fO}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;let n=e.slice(0,e.length-t.length);for(let r=0;r<t.length;++r){let a=e[e.length-t.length+r],s=t[r];if(null==a||null==s||a<0||s<0)n.push(null);else if(1===a)n.push(s);else if(1===s)n.push(a);else{if(a!==s)throw new f_("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(a)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[mZ(e)]),e.length<2)throw new f_(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(let n of e)null!=n&&null!==n[0]&&t.push(n[0]);if((t=fX(t)).length>1)throw new f_(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){let r=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}let r=e.map(e=>e.length);-1===e.indexOf(null)&&1===fX(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return i7(()=>{if(!this.reshapeRequired)return this.mergeFunction(e);{let t=[],n=e.map(e=>e.rank);if(-1===n.indexOf(null)){let r=mh(n);for(let n of e){let e=n.rank;for(let t=0;t<r-e;++t)n=mf(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(let r of e){let e=r.rank;if(null==e){let e=r.shape,a=e[0],s=e.slice(1).concat([a]),i=l5(r,[a].concat(ml(e.slice(1))));i=l5(i=of(i,[1,0]),s),t.push(i),n=!0}else if(e>1){let a=mp(1,e).concat([0]);t.push(of(r,a)),n=!0}else t.push(r)}let r=this.mergeFunction(t),a=r.rank;if(n){if(null==a){let e=r.shape,t=e.length,n=e[t-1],a=[n].concat(e.slice(0,e.length-1));r=l5(of(l5(r,[-1,n]),[1,0]),a)}else if(a>1){let e=[a-1].concat(mp(0,a-1));r=of(r,e)}}return r}}})}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){let r=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,r)}let n=[];for(let t of e)null!=t&&null!==t[0]&&n.push(t[0]);return 1===(n=fX(n)).length?n.concat(t):[null].concat(t)}computeMask(e,t){return i7(()=>{if(null==t)return null;if(!Array.isArray(t))throw new f_("`mask` should be an Array");if(!Array.isArray(e))throw new f_("`inputs` should be an Array");if(t.length!==e.length)throw new f_(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every(e=>null==e))return null;let n=(t=t.map(e=>null==e?e:u3(e,0)))[0];for(let e=1;e<t.length-1;++e)n=hm(n,t[e]);return n})}}class bx extends bb{constructor(e){super(e)}mergeFunction(e){return i7(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=lr(t,e[n]);return t})}}bx.className="Add",oX.registerClass(bx);class bk extends bb{constructor(e){super(e)}mergeFunction(e){return i7(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=li(t,e[n]);return t})}}bk.className="Multiply",oX.registerClass(bk);class bv extends bb{constructor(e){super(e)}mergeFunction(e){return i7(()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=lr(t,e[n]);return li(1/e.length,t)})}}bv.className="Average",oX.registerClass(bv);class bw extends bb{constructor(e){super(e)}mergeFunction(e){return i7(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=lT(t,e[n]);return t})}}bw.className="Maximum",oX.registerClass(bw);class bI extends bb{constructor(e){super(e)}mergeFunction(e){return i7(()=>{let t=e[0];for(let n=1;n<e.length;++n)t=hE(t,e[n]);return t})}}bI.className="Minimum",oX.registerClass(bI);class bS extends bb{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!(Array.isArray(e)&&Array.isArray(e[0]))||1===e.length)throw new f_("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(let n of e)if(null!=n){t=!1;break}if(t)return;let n=[];for(let t=0;t<e.length;++t){let r=e[t].slice();r.splice(this.axis,1);let a=!1;for(let e of n)if(rX.arraysEqual(e,r)){a=!0;break}a||n.push(r)}if(n.length>1)throw new f_("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return i7(()=>mb(e,this.axis))}computeOutputShape(e){if(!(Array.isArray(e)&&Array.isArray(e[0])))throw new f_("A `Concatenate` layer should be called on a list of inputs.");let t=e[0].slice(),n=this.axis<0?t.length+this.axis:this.axis;for(let r of e.slice(1)){if(null==t[n]||null==r[n]){t[n]=null;break}t[n]+=r[n]}return t}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new f_("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new f_("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new f_(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return i7(()=>{let n=!0;if(t.forEach(e=>{if(null!=e){n=!1;return}}),n)return null;let r=[];for(let n=0;n<e.length;++n)null==t[n]?r.push(iS(hM(e[n]),"bool")):t[n].rank<e[n].rank?r.push(u3(t[n],-1)):r.push(t[n]);let a=l9(r,this.axis);return lM(a,-1,!1)})}getConfig(){let e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function bN(e,t){for(;e<0;)e+=t;return e}bS.className="Concatenate",oX.registerClass(bS);class bT extends bb{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){rX.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let t=e[0],n=e[1];if(t.length>3||n.length>3)throw new fO("Dot layer does not support tensors of 4D or higher rank yet.");let r=this.interpretAxes(t,n);if(t[r[0]]!==n[r[1]])throw new f_(`Dimension incompatibility: ${t[r[0]]} !== ${n[r[1]]}`)}mergeFunction(e){let t;if(2!==e.length)throw new f_(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let n=e[0],r=e[1];return t=Array.isArray(this.axes)?this.axes.map((t,n)=>bN(t,e[n].shape.length)):[bN(this.axes,n.shape.length),bN(this.axes,r.shape.length)],this.normalize&&(n=gT(n,t[0]),r=gT(r,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new fO("batchDot is not implemented for tensors of 4D or higher rank yet");if(rX.assert(e.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`),rX.assert(e.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new fO("batchDot is not implemented for complex64-type Tensors yet.");let r=e.shape.length,a=t.shape.length;null==n&&(n=[r-1,a-2]);let s=n;return i7(()=>{let n,i;if(r>a){n=r-a;let e=[];for(let t=0;t<n;++t)e.push(1);t=l5(t,t.shape.concat(e))}else if(a>r){n=a-r;let t=[];for(let e=0;e<n;++e)t.push(1);e=l5(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=s[0]===s[1]?uQ(li(e,t),s[0]):uQ(li(of(e,[1,0]),t),s[1]);else{let n=s[0]!==e.shape.length-1,r=s[1]===t.shape.length-1;i=iY(e,t,n,r)}if(n>0){let e;e=r>a?r+a-3:r-1;let t=[];for(let r=e;r<e+n;++r)t.push(r);i=pA(i,t)}return 1===i.shape.length&&(i=u3(i,1)),i})}(n,r,t)}interpretAxes(e,t){return Array.isArray(this.axes)?this.axes:[bN(this.axes,e.length),bN(this.axes,t.length)]}computeOutputShape(e){rX.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");let t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new fO("Dot layer does not support tensors of 4D or higher rank yet.");let r=this.interpretAxes(t,n);t.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);let a=t.concat(n);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){let e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}bT.className="Dot",oX.registerClass(bT);class bC extends m7{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return i7(()=>{this.invokeCallHook(e,t);let n=mY(e),r=mT(()=>lr(mv(n.shape,0,this.stddev),n),()=>n,t.training||!1);return r})}}bC.className="GaussianNoise",oX.registerClass(bC);class b$ extends m7{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return i7(()=>{this.invokeCallHook(e,t);let n=mY(e);return this.rate>0&&this.rate<1?mT(()=>{let e=Math.sqrt(this.rate/(1-this.rate));return li(n,mv(n.shape,1,e))},()=>n,t.training||!1):n})}}b$.className="GaussianDropout",oX.registerClass(b$);class bE extends m7{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||mY(e).shape}computeOutputShape(e){return e}getConfig(){let e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return i7(()=>{if(this.rate<1&&this.rate>0){let n=this._getNoiseShape(e);return mT(()=>{let t=mY(e),r=he(pe(n),this.rate);r=iS(r,"float32");let a=((1-this.rate)*(1+3.09091329228798*this.rate))**-.5,s=-(-1.7580993408473766*a)*this.rate,i=lr(li(t,r),li(lr(r,-1),-1.7580993408473766));return lr(li(i,a),s)},()=>mY(e),t.training||!1)}return e})}}function bA(e,t,n,r,a,s=.001){let i;if(2===e.rank)i=ui(e,t,n,r,a,s);else if(3===e.rank)i=uo(e,t,n,r,a,s);else if(4===e.rank)i=ul(e,t,n,r,a,s);else throw new fO(`batchNormalization is not implemented for array of rank ${e.rank} yet`);return i}bE.className="AlphaDropout",oX.registerClass(bE);class bR extends m7{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=mj(e.betaInitializer||"zeros"),this.gammaInitializer=mj(e.gammaInitializer||"ones"),this.movingMeanInitializer=mj(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=mj(e.movingVarianceInitializer||"ones"),this.betaConstraint=gf(e.betaConstraint),this.gammaConstraint=gf(e.gammaConstraint),this.betaRegularizer=yA(e.betaRegularizer),this.gammaRegularizer=yA(e.gammaRegularizer)}build(e){e=mZ(e);let t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new f_(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new m3({ndim:e.length,axes:{[t]:n}})];let r=[n];this.scale&&(this.gamma=this.addWeight("gamma",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return i7(()=>{let n=null!=t.training&&t.training,r=mY(e),a=r.shape,s=a.length,i=mp(0,s),o=this.axis>=0?this.axis:this.axis+s;i.splice(o,1);let l=fz(1,s);l[o]=a[o];let u=i.slice();u.sort();let h=!rX.arraysEqual(u,mp(0,s).slice(0,s-1));if(!n)return(()=>{if(!h)return bA(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon);{let e=l5(this.movingMean.read(),l),t=l5(this.movingVariance.read(),l),n=this.center?l5(this.beta.read(),l):null,a=this.scale?l5(this.gamma.read(),l):null;return bA(r,e,t,n,a,this.epsilon)}})();let[p,d,c]=function(e,t,n,r,a=.001){return rX.arraysEqual(r.slice().sort(),mp(0,e.rank-1))?function(e,t,n,r,a=.001){return i7(()=>{let s=hF(e,r),i=s.mean,o=s.variance,l=bA(e,i,o,n,t,a);return[l,i,o]})}(e,t,n,r,a):function(e,t,n,r,a=.001){return i7(()=>{let s=hF(e,r),i=s.mean,o=s.variance,l=[];for(let t of mp(0,e.rank))-1!==r.indexOf(t)?l.push(1):l.push(e.shape[t]);let u=l5(i,l),h=l5(o,l),p=null==t?null:l5(t,l),d=null==n?null:l5(n,l),c=bA(e,u,h,d,p,a);return[c,i,o]})}(e,t,n,r,a)}(r,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{i7(()=>{let r=e.read(),a=li(lI(r,t),1-n);e.write(lI(r,a))})};return(()=>{f(this.movingMean,d,this.momentum),f(this.movingVariance,c,this.momentum)})(),p})}getConfig(){let e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:fq(this.betaInitializer),gammaInitializer:fq(this.gammaInitializer),movingMeanInitializer:fq(this.movingMeanInitializer),movingVarianceInitializer:fq(this.movingVarianceInitializer),betaRegularizer:fq(this.betaRegularizer),gammaRegularizer:fq(this.gammaRegularizer),betaConstraint:fq(this.betaConstraint),gammaConstraint:fq(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}bR.className="BatchNormalization",oX.registerClass(bR);class bF extends m7{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw Error(`Expected axis to be an integer, but received ${this.axis}`)}else if(Array.isArray(this.axis)){for(let e of this.axis)if(!Number.isInteger(e))throw Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}else throw Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=mj(e.betaInitializer||"zeros"),this.gammaInitializer=mj(e.gammaInitializer||"ones"),this.betaRegularizer=yA(e.betaRegularizer),this.gammaRegularizer=yA(e.gammaRegularizer),this.supportsMasking=!0}build(e){e=mZ(e);let t=e.length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(let e of this.axis)if(e<0||e>=t)throw Error(`Invalid axis: ${e}`);if(this.axis.length!==fX(this.axis).length)throw Error(`Found duplicate axes in: ${this.axis}`);let n=this.axis.map(t=>e[t]);this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,t){let n=mY(e),r=n.shape,a=r.length;return i7(()=>{let{mean:e,variance:t}=hF(n,this.axis,!0),s=fz(1,a);for(let e of this.axis)s[e]=r[e];let i=e=>null!=e&&e.shape.length!==a?l5(e,s):e,o=this.scale?i(this.gamma.read()):null,l=this.center?i(this.beta.read()):null,u=[],h=[];for(let e=0;e<a;++e)-1!==this.axis.indexOf(e)?(u.push(r[e]),h.push(1)):(u.push(1),h.push(r[e]));return e=u6(e,u),t=u6(t,u),null!=o&&(o=u6(o,h)),null!=l&&(l=u6(l,h)),bA(n,e,t,l,o,this.epsilon)})}getConfig(){let e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:fq(this.betaInitializer),gammaInitializer:fq(this.gammaInitializer),betaRegularizer:fq(this.betaRegularizer),gammaRegularizer:fq(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}bF.className="LayerNormalization",oX.registerClass(bF);class bD extends m7{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?mc():e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{let t,n;if(e.padding=e.padding,2!==e.padding.length)throw new f_(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new f_(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new f_(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new m3({ndim:4})]}computeOutputShape(e){let t,n;return(e=mZ(e),"channelsFirst"===this.dataFormat)?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return i7(()=>{var t,n,r;return t=mY(e),n=this.padding,r=this.dataFormat,i7(()=>{if(4!==t.rank)throw new f_(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new f_("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==r&&(r=mc()),"channelsLast"!==r&&"channelsFirst"!==r)throw new f_(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);return hz(t,"channelsFirst"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]])})})}getConfig(){let e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function b_(e,t,n,r,a,s){return i7(()=>{let i;f9(a),mt(s),me(r),null==n&&(n=[1,1]),null==r&&(r="valid"),null==a&&(a=mc()),null==s&&(s="max"),e=yB(e,a);let o="same"===r?"same":"valid";return i="max"===s?hw(e,t,n,o):l8(e,t,n,o),"channelsFirst"===a&&(i=of(i,[0,3,1,2])),i})}function bO(e,t,n,r,a,s){return i7(()=>{let i;f9(a),mt(s),me(r),null==n&&(n=[1,1,1]),null==r&&(r="valid"),null==a&&(a=mc()),null==s&&(s="max"),e=yW(e,a);let o="same"===r?"same":"valid";return i="max"===s?hI(e,t,n,o):l7(e,t,n,o),"channelsFirst"===a&&(i=of(i,[0,4,1,2,3])),i})}bD.className="ZeroPadding2D",oX.registerClass(bD);class bM extends m7{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else if(Array.isArray(e.poolSize)&&1===e.poolSize.length&&"number"==typeof e.poolSize[0])this.poolSize=e.poolSize;else throw new f_(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);if(fJ(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else if(Array.isArray(e.strides)&&1===e.strides.length&&"number"==typeof e.strides[0])this.strides=e.strides;else throw new f_(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);fJ(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,me(this.padding),this.inputSpec=[new m3({ndim:3})]}computeOutputShape(e){e=mZ(e);let t=yz(e[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return i7(()=>{this.invokeCallHook(e,t),e=mf(mY(e),2);let n=this.poolingFunction(mY(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return pA(n,[2])})}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class bL extends bM{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return f9(a),me(r),b_(e,t,n,r,a,"max")}}bL.className="MaxPooling1D",oX.registerClass(bL);class bz extends bM{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return f9(a),me(r),b_(e,t,n,r,a,"avg")}}bz.className="AveragePooling1D",oX.registerClass(bz);class bP extends m7{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new f_(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];fJ(this.poolSize,"poolSize"),fJ(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,f9(this.dataFormat),me(this.padding),this.inputSpec=[new m3({ndim:4})]}computeOutputShape(e){e=mZ(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return(t=yz(t,this.poolSize[0],this.padding,this.strides[0]),n=yz(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat)?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return i7(()=>(this.invokeCallHook(e,t),this.poolingFunction(mY(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class bB extends bP{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return f9(a),me(r),b_(e,t,n,r,a,"max")}}bB.className="MaxPooling2D",oX.registerClass(bB);class bW extends bP{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return f9(a),me(r),b_(e,t,n,r,a,"avg")}}bW.className="AveragePooling2D",oX.registerClass(bW);class bV extends m7{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new f_(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];fJ(this.poolSize,"poolSize"),fJ(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,f9(this.dataFormat),me(this.padding),this.inputSpec=[new m3({ndim:5})]}computeOutputShape(e){e=mZ(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],r="channelsFirst"===this.dataFormat?e[4]:e[3];return(t=yz(t,this.poolSize[0],this.padding,this.strides[0]),n=yz(n,this.poolSize[1],this.padding,this.strides[1]),r=yz(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat)?[e[0],e[1],t,n,r]:[e[0],t,n,r,e[4]]}call(e,t){return i7(()=>(this.invokeCallHook(e,t),this.poolingFunction(mY(e),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){let e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class bU extends bV{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return f9(a),me(r),bO(e,t,n,r,a,"max")}}bU.className="MaxPooling3D",oX.registerClass(bU);class bG extends bV{constructor(e){super(e)}poolingFunction(e,t,n,r,a){return f9(a),me(r),bO(e,t,n,r,a,"avg")}}bG.className="AveragePooling3D",oX.registerClass(bG);class bH extends m7{constructor(e){super(e),this.inputSpec=[new m3({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new fO}}class bq extends bH{constructor(e){super(e||{})}call(e,t){return i7(()=>{let t=mY(e);return hN(t,1)})}}bq.className="GlobalAveragePooling1D",oX.registerClass(bq);class bj extends bH{constructor(e){super(e||{})}call(e,t){return i7(()=>{let t=mY(e);return uZ(t,1)})}}bj.className="GlobalMaxPooling1D",oX.registerClass(bj);class bK extends m7{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,f9(this.dataFormat),this.inputSpec=[new m3({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new fO}getConfig(){let e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class bX extends bK{call(e,t){return i7(()=>{let t=mY(e);return"channelsLast"===this.dataFormat?hN(t,[1,2]):hN(t,[2,3])})}}bX.className="GlobalAveragePooling2D",oX.registerClass(bX);class bY extends bK{call(e,t){return i7(()=>{let t=mY(e);return"channelsLast"===this.dataFormat?uZ(t,[1,2]):uZ(t,[2,3])})}}bY.className="GlobalMaxPooling2D",oX.registerClass(bY);class bZ extends m7{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){let e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){let r=t.layer,a=gN(r,n);delete t.layer;let s={layer:a};return Object.assign(s,t),new e(s)}}class bJ extends bZ{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=mZ(e)).length<3)throw new f_(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];let t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){e=mZ(e);let t=[e[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),r=e[1];return[n[0],r].concat(n.slice(1))}call(e,t){return i7(()=>{e=mY(e);let n=y3((e,n)=>{let r=mY(this.layer.call(e,t));return[r,[]]},e,[],!1,null,null,!1,!0),r=n[1];return r})}}bJ.className="TimeDistributed",oX.registerClass(bJ);class bQ extends bZ{constructor(e){super(e);let t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=gN(n),t.goBackwards=!0!==t.goBackwards;let r={};if(r.className=e.layer.getClassName(),r.config=t,this.backwardLayer=gN(r),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,fY(f8,"BidirectionalMergeMode",this.mergeMode),e.weights)throw new fO("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){let t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,r,a=this.forwardLayer.computeOutputShape(e);return(Array.isArray(a)&&Array.isArray(a[0])||(a=[a]),this.returnState&&(r=a.slice(1)),t=a[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState)?null==this.mergeMode?n.concat(r).concat(r.slice()):[t].concat(r).concat(r.slice()):fW(n)}apply(e,t){let n=null==t?null:t.initialState,r=null==t?null:t.constants;null==t&&(t={});let a=y2(e,n,r,this.numConstants);if(e=a.inputs,n=a.initialState,r=a.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==r)return super.apply(e,t);let s=[],i=[];if(null!=n){let e=n.length;if(e%2>0)throw new f_("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,s.push(...n);let r=n.map(e=>new m3({shape:e.shape}));this.forwardLayer.stateSpec=r.slice(0,e/2),this.backwardLayer.stateSpec=r.slice(e/2),i.push(...r)}if(null!=r)throw new fO("Support for constants in Bidirectional layers is not implemented yet.");let o=s[0]instanceof m4;for(let e of s)if(e instanceof m4!==o)throw new f_("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(!o)return super.apply(e,t);{let n=[e].concat(s),r=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=r;let o=super.apply(n,t);return this.inputSpec=a,o}}call(e,t){return i7(()=>{let n,r,a,s;let i=t.initialState;if(null==i)n=this.forwardLayer.call(e,t),r=this.backwardLayer.call(e,t);else{let a=i.slice(0,i.length/2),s=i.slice(i.length/2);n=this.forwardLayer.call(e,Object.assign(t,{initialState:a})),r=this.backwardLayer.call(e,Object.assign(t,{initialState:s}))}return(this.returnState&&(Array.isArray(n)&&(a=n.slice(1).concat(r.slice(1))),n=n[0],r=r[0]),this.returnSequences&&(r=ps(r,1)),"concat"===this.mergeMode?s=mb([n,r]):"sum"===this.mergeMode?s=lr(n,r):"ave"===this.mergeMode?s=li(.5,lr(n,r)):"mul"===this.mergeMode?s=li(n,r):null==this.mergeMode&&(s=[n,r]),this.returnState)?null==this.mergeMode?s.concat(a):[s].concat(a):s})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){mr(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),mr(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,!this.returnState)return n;{let e=this.forwardLayer.states,t=e.map(e=>null);return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){let e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){let n=gN(t.layer);if(delete t.layer,null!=t.numConstants)throw new fO("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");return t.layer=n,new e(t)}}bQ.className="Bidirectional",oX.registerClass(bQ);class b0 extends m7{constructor(e){super(e),this.scale=e.scale,e.offset?this.offset=e.offset:this.offset=0}getConfig(){let e={scale:this.scale,offset:this.offset},t=super.getConfig();return Object.assign(e,t),e}call(e,t){return i7(()=>("float32"!==(e=mY(e)).dtype&&(e=iS(e,"float32")),lr(li(e,this.scale),this.offset)))}}b0.className="Rescaling",oX.registerClass(b0);let b1=eM;b1.registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(I||(I={})),function(e){var t;(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))[t.LEGACY=0]="LEGACY",t[t.V1=1]="V1",t[t.V2=2]="V2"}(S||(S={}));let b2={};function b3(e,t,n,r,a){let s=t.inputParams[e];if(s&&void 0!==s.inputIndexStart){let e=s.inputIndexStart,i=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?e+1:s.inputIndexEnd;if("tensor"===s.type)return b4(t.inputNames[s.inputIndexStart],n,r,a);if("tensors"===s.type){let s=t.inputNames.slice(e,i);return s.map(e=>b4(e,n,r,a))}let o=b4(t.inputNames.slice(e)[0],n,r,a),l=o.dataSync();return"number"===s.type?l[0]:rX.toNestedArray(o.shape,l)}let i=t.attrParams[e];return i&&i.value}function b4(e,t,n,r){let[a,s]=b8(e);if(null!=r){let e=r.getHashTableHandleByName(a);if(null!=e)return e}let i=n.currentContextIds.find(e=>!!t[b5(a,e)]);return void 0!==i?t[b5(a,i)][s]:void 0}function b6(e,t){let[n,r,a]=b8(e);return[b5(n,t&&t.currentContextId),r,a]}function b5(e,t){return t?`${e}-${t}`:e}function b8(e){let t=e.split(":");if(1===t.length)return[e,0,void 0];let n=t[0],r=3===t.length?t[1]:void 0,a=Number(t[t.length-1]);return[n,a,r]}function b7(e,t,n){let r=b3("pad",e,t,n);if("explicit"===r){r=b3("explicitPaddings",e,t,n);let a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=r[2*e],a[e][1]=r[2*e+1];return a}return r}function b9(e){return e.kept?e:iN(e)}var xe={};R(xe,"json",()=>xt);let xt=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var xn={};R(xn,"json",()=>xr);let xr=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var xa={};R(xa,"json",()=>xs);let xs=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}];var xi={};R(xi,"json",()=>xo);let xo=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}];var xl={};R(xl,"json",()=>xu);let xu=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}];var xh={};R(xh,"json",()=>xp);let xp=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var xd={};R(xd,"json",()=>xc);let xc=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}];var xf={};R(xf,"json",()=>xm);let xm=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}];var xg={};R(xg,"json",()=>xy);let xy=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}];var xb={};R(xb,"json",()=>xx);let xx=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}];var xk={};R(xk,"json",()=>xv);let xv=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}];var xw={};R(xw,"json",()=>xI);let xI=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}];var xS={};R(xS,"json",()=>xN);let xN=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}];var xT={};R(xT,"json",()=>xC);let xC=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}];var x$={};R(x$,"json",()=>xE);let xE=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}];var xA={};R(xA,"json",()=>xR);let xR=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}];var xF={};R(xF,"json",()=>xD);let xD=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}];var x_={};R(x_,"json",()=>xO);let xO=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}];var xM={};R(xM,"json",()=>xL);let xL=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class xz{static get Instance(){return this._instance||(this._instance=new this)}constructor(){let e=[xe,xn,xa,xi,xl,xh,xd,xf,xg,xb,xk,xw,xS,xT,x$,xA,xF,x_,xM],t=[].concat(...e.map(e=>e.json));this.opMappers=t.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e,t={}){let n=e.node,r=[],a=[],s=[],i=n.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):(null==t.input||0===t.input.length)&&s.push(e[t.name]),e),{}),o=[],l=[],u={},h={};null!=t&&(u=this.mapSignatureEntries(t.inputs),h=this.mapSignatureEntries(t.outputs));let p=Object.keys(i);p.forEach(e=>{let t=i[e];t.inputNames.forEach((e,n)=>{let[r,,a]=b6(e),s=i[r];if(null!=s.outputs){let e=s.outputs.indexOf(a);if(-1!==e){let a=`${r}:${e}`;t.inputNames[n]=a}}t.inputs.push(s),s.children.push(t)})}),0===Object.keys(h).length?p.forEach(e=>{let t=i[e];0===t.children.length&&l.push(t)}):Object.keys(h).forEach(e=>{let[t]=b6(e),n=i[t];null!=n&&(n.signatureKey=h[e],l.push(n))}),Object.keys(u).length>0?Object.keys(u).forEach(e=>{let[t]=b6(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))}):o=r;let d={};null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{}));let c={nodes:i,inputs:o,outputs:l,weights:a,placeholders:r,signature:t,functions:d};return s.length>0&&(c.initNodes=s),c}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,n)=>(t[e[n].name]=n,t),{})}mapNode(e){let t=b2[e.op]||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});let n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.slice(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce((t,n)=>{let r;let a=n.type;switch(n.type){case"string":void 0===(r=xB(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=xB(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":void 0===(r=xY(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=xY(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":void 0===(r=xV(e.attr,n.tfName,n.defaultValue||0))&&n.tfDeprecatedName&&(r=xV(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":void 0===(r=xX(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=xX(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":void 0===(r=xW(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=xW(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":void 0===(r=xJ(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=xJ(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":void 0===(r=xK(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=xK(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":void 0===(r=xZ(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=xZ(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":void 0===(r=xH(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=xH(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":void 0===(r=xq(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=xq(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":void 0===(r=xG(e.attr,n.tfName,n.defaultValue))&&n.tfDeprecatedName&&(r=xG(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:r,type:a},t},{})),n}mapFunction(e){let t=e.nodeDef,n=[],r={};null!=t&&(r=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e),{}));let a=[],s=[];e.signature.inputArg.forEach(e=>{let[t]=b6(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:xU(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),r[t]=n});let i=Object.keys(r);i.forEach(e=>{let t=r[e];t.inputNames.forEach((e,n)=>{let[a,,s]=b6(e),i=r[a];if(null!=i.outputs){let e=i.outputs.indexOf(s);if(-1!==e){let r=`${a}:${e}`;t.inputNames[n]=r}}t.inputs.push(i),i.children.push(t)})});let o=e.ret;e.signature.outputArg.forEach(e=>{let[t,n]=b6(o[e.name]),a=r[t];null!=a&&(a.defaultOutput=n,s.push(a))});let l=this.mapArgsToSignature(e);return{nodes:r,inputs:a,outputs:s,weights:n,placeholders:[],signature:l}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function xP(e,t){let n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){let t=eM.global;return void 0!==t.atob?t.atob(e):new sf(e,"base64").toString()}(e);return t?n:n.toLowerCase()}function xB(e,t,n,r=!1){let a=e[t];return null!=a?xP(a.s,r):n}function xW(e,t,n){let r=e[t];return r?r.b:n}function xV(e,t,n){let r=e[t]||{},a=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof a?a:parseInt(a,10)}function xU(e){switch("string"==typeof e&&(e=I[e]),e){case I.DT_FLOAT:case I.DT_HALF:return"float32";case I.DT_INT32:case I.DT_INT64:case I.DT_INT8:case I.DT_UINT8:return"int32";case I.DT_BOOL:return"bool";case I.DT_DOUBLE:return"float32";case I.DT_STRING:return"string";default:return null}}function xG(e,t,n){let r=e[t];return r&&r.func?r.func.name:n}function xH(e,t,n){let r=e[t];return r&&r.type?xU(r.type):n}function xq(e,t,n){let r=e[t];return r&&r.list&&r.list.type?r.list.type.map(e=>xU(e)):n}function xj(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"==typeof e.size?e.size:parseInt(e.size,10)):[]}function xK(e,t,n){let r=e[t];return r&&r.shape?xj(r.shape):n}function xX(e,t,n){let r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(e=>"number"==typeof e?e:parseInt(e,10)):n}function xY(e,t,n,r=!1){let a=e[t];return a&&a.list&&a.list.s?a.list.s.map(e=>xP(e,r)):n}function xZ(e,t,n){let r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(e=>xj(e)):n}function xJ(e,t,n){let r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class xQ{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return b4(e,this.tensorMap,this.context)}getAttr(e,t){let n=this.node.rawAttrs[e];if(null!=n.tensor)return b4(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return xV(this.node.rawAttrs,e,t);if(null!=n.s)return xB(this.node.rawAttrs,e,t);if(null!=n.b)return xW(this.node.rawAttrs,e,t);if(null!=n.shape)return xK(this.node.rawAttrs,e,t);if(null!=n.type)return xH(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return xX(this.node.rawAttrs,e,t);if(null!=n.list.s)return xY(this.node.rawAttrs,e,t);if(null!=n.list.shape)return xZ(this.node.rawAttrs,e,t);if(null!=n.list.b)return xJ(this.node.rawAttrs,e,t);if(null!=n.list.type)return xq(this.node.rawAttrs,e,t)}return t}}var x0={};l(x0,lF);let x1=(e,t,n,r=x0)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(b3("a",e,t,n),b3("b",e,t,n))];case"AddN":return[r.addN(b3("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(b3("a",e,t,n),b3("b",e,t,n))];case"Mul":return[r.mul(b3("a",e,t,n),b3("b",e,t,n))];case"RealDiv":case"Div":return[r.div(b3("a",e,t,n),b3("b",e,t,n))];case"DivNoNan":return[r.divNoNan(b3("a",e,t,n),b3("b",e,t,n))];case"FloorDiv":return[r.floorDiv(b3("a",e,t,n),b3("b",e,t,n))];case"Sub":return[r.sub(b3("a",e,t,n),b3("b",e,t,n))];case"Minimum":return[r.minimum(b3("a",e,t,n),b3("b",e,t,n))];case"Maximum":return[r.maximum(b3("a",e,t,n),b3("b",e,t,n))];case"Pow":return[r.pow(b3("a",e,t,n),b3("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(b3("a",e,t,n),b3("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},x2=(e,t,n,r=x0)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(b3("x",e,t,n))];case"Acos":return[r.acos(b3("x",e,t,n))];case"Acosh":return[r.acosh(b3("x",e,t,n))];case"Asin":return[r.asin(b3("x",e,t,n))];case"Asinh":return[r.asinh(b3("x",e,t,n))];case"Atan":return[r.atan(b3("x",e,t,n))];case"Atan2":return[r.atan2(b3("x",e,t,n),b3("y",e,t,n))];case"Atanh":return[r.atanh(b3("x",e,t,n))];case"Ceil":return[r.ceil(b3("x",e,t,n))];case"Complex":return[r.complex(b3("real",e,t,n),b3("imag",e,t,n))];case"Cos":return[r.cos(b3("x",e,t,n))];case"Cosh":return[r.cosh(b3("x",e,t,n))];case"Elu":return[r.elu(b3("x",e,t,n))];case"Erf":return[r.erf(b3("x",e,t,n))];case"Exp":return[r.exp(b3("x",e,t,n))];case"Expm1":return[r.expm1(b3("x",e,t,n))];case"Floor":return[r.floor(b3("x",e,t,n))];case"Log":return[r.log(b3("x",e,t,n))];case"Log1p":return[r.log1p(b3("x",e,t,n))];case"Imag":return[r.imag(b3("x",e,t,n))];case"Neg":return[r.neg(b3("x",e,t,n))];case"Reciprocal":return[r.reciprocal(b3("x",e,t,n))];case"Real":return[r.real(b3("x",e,t,n))];case"Relu":return[r.relu(b3("x",e,t,n))];case"Round":return[r.round(b3("x",e,t,n))];case"Selu":return[r.selu(b3("x",e,t,n))];case"Sigmoid":return[r.sigmoid(b3("x",e,t,n))];case"Sin":return[r.sin(b3("x",e,t,n))];case"Sign":return[r.sign(b3("x",e,t,n))];case"Sinh":return[r.sinh(b3("x",e,t,n))];case"Softplus":return[r.softplus(b3("x",e,t,n))];case"Sqrt":return[r.sqrt(b3("x",e,t,n))];case"Square":return[r.square(b3("x",e,t,n))];case"Tanh":return[r.tanh(b3("x",e,t,n))];case"Tan":return[r.tan(b3("x",e,t,n))];case"ClipByValue":return[r.clipByValue(b3("x",e,t,n),b3("clipValueMin",e,t,n),b3("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(b3("x",e,t,n))];case"Rsqrt":return[r.rsqrt(b4(e.inputNames[0],t,n))];case"Prod":return[r.prod(b3("x",e,t,n),b3("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu(b3("x",e,t,n),b3("alpha",e,t,n))];case"Prelu":return[r.prelu(b3("x",e,t,n),b3("alpha",e,t,n))];case"IsNan":return[r.isNaN(b4(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function x3(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){rX.assert(e.length===t.length,()=>n+` Shapes ${e} and ${t} must match`);for(let r=0;r<e.length;r++){let a=e[r],s=t[r];rX.assert(a<0||s<0||a===s,()=>n+` Shapes ${e} and ${t} must match`)}}}function x4(e){return!("number"==typeof e||e.some(e=>e<0))}function x6(e,t,n){let r=x5(e,n),a=!x4(r);if(a&&0===t.length)throw Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(a&&t.forEach(e=>{r=x5(e.shape,r)}),!x4(r))throw Error(`Non-fully-defined elementShape: ${r}`);return r}function x5(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw Error(`Incompatible ranks during merge: ${e} vs. ${t}`);let n=[];for(let r=0;r<e.length;++r){let a=e[r],s=t[r];if(a>=0&&s>=0&&a!==s)throw Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=a>=0?a:s}return n}class x8{constructor(e,t,n,r,a,s,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=a,this.dynamicSize=s,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=ly(0),oe(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);let t=this.tensors[e];if(t.cleared)throw Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,t){if(this.closed_)throw Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);let n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0===this.size()&&(null==this.elementShape||0===this.elementShape.length)&&(this.elementShape=t.shape),x3(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,oe(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((e,n)=>this.write(e,t[n]))}gather(e,t){if(t&&t!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return sa([],[0].concat(this.elementShape));let n=this.readMany(e);return x3(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),pR(n,0)}concat(e){if(e&&e!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return sa([],[0].concat(this.elementShape));let t=[];for(let e=0;e<this.size();e++)t.push(e);let n=this.readMany(t);return x3(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),l9(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);let n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,pG(t,0))}split(e,t){if(t.dtype!==this.dtype)throw Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0,r=e.map(e=>n+=e);if(n!==t.shape[0])throw Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);let a=0===n?0:t.size/n,s=[];i7(()=>{t=l5(t,[1,n,a]);for(let n=0;n<e.length;++n){let i=0===n?0:r[n-1],o=[0,i,0],l=[1,e[n],a];s[n]=l5(ut(t,o,l),this.elementShape)}return s});let i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,s)}}class x7{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach(e=>{if(n!==e.dtype)throw Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);x3(t,e.shape,"TensorList shape mismatch: "),oe(e)}),this.idTensor=ly(0),this.maxNumElements=r,oe(this.idTensor)}get id(){return this.idTensor.id}copy(){return new x7([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);x3(e,this.elementShape,"TensorList shape mismatch: ");let r=x6(this.elementShape,this.tensors,e);return i7(()=>{let e=this.tensors.map(e=>l5(e,r));return pR(e,0)})}popBack(e,t){if(t!==this.elementDtype)throw Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw Error("Trying to pop from an empty list.");let n=x6(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,x3(r.shape,e,"TensorList shape mismatch: "),l5(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(x3(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw Error("Trying to push element into a full list.");oe(e),this.tensors.push(e)}resize(e){if(e<0)throw Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);let t=new x7([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw Error(`element at index ${e} is null.`);x3(this.tensors[e].shape,t,"TensorList shape mismatch: ");let r=x6(this.elementShape,this.tensors,t);return l5(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);x3(this.elementShape,t.shape,"TensorList shape mismatch: "),oe(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);x3(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());let r=x6(this.elementShape,this.tensors,n);return 0===e.length?sa([],[0].concat(r)):i7(()=>{let t=e.map(e=>l5(this.tensors[e],r));return pR(t,0)})}concat(e,t){if(e&&e!==this.elementDtype)throw Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);x3(this.elementShape,t,"TensorList shape mismatch: ");let n=x6(this.elementShape,this.tensors,t);return 0===this.size()?sa([],[0].concat(n)):i7(()=>{let e=this.tensors.map(e=>l5(e,n));return l9(e,0)})}}let x9=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{let r=b3("thenBranch",e,t,n),a=b3("elseBranch",e,t,n),s=b3("cond",e,t,n),i=b3("args",e,t,n),o=await s.data();if(o[0])return n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap);return n.functionMap[a].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{let r=b3("body",e,t,n),a=b3("cond",e,t,n),s=b3("args",e,t,n),i=await n.functionMap[a].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap),o=s.map(e=>e.id),l=await i[0].data();i.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()});let u=s;for(;l[0];){let e=u;u=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);let t=u.map(e=>e.id);e.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()});let s=await n.functionMap[a].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await s[0].data(),s.forEach(e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})}return u}case"LoopCond":{let r=b3("pred",e,t,n);return[b9(r)]}case"Switch":{let r=b3("pred",e,t,n),a=b3("data",e,t,n);return a.kept||(a=b9(a)),(await r.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{let r=e.inputNames.find(e=>void 0!==b4(e,t,n));if(r){let e=b4(r,t,n);return[b9(e)]}return}case"Enter":{let r=b3("frameName",e,t,n),a=b3("tensor",e,t,n);return n.enterFrame(r),[b9(a)]}case"Exit":{let r=b3("tensor",e,t,n);return n.exitFrame(),[b9(r)]}case"NextIteration":{let r=b3("tensor",e,t,n);return n.nextIteration(),[b9(r)]}case"TensorArrayV3":{let r=b3("size",e,t,n),a=b3("dtype",e,t,n),s=b3("elementShape",e,t,n),i=b3("dynamicSize",e,t,n),o=b3("clearAfterRead",e,t,n),l=b3("identicalElementShapes",e,t,n),u=b3("name",e,t,n),h=new x8(u,a,r,s,l,i,o);return n.addTensorArray(h),[h.idTensor,ly(1)]}case"TensorArrayWriteV3":{let r=b3("tensorArrayId",e,t,n),a=b3("index",e,t,n),s=b3("tensor",e,t,n),i=n.getTensorArray(r.id);return i.write(a,s),[i.idTensor]}case"TensorArrayReadV3":{let r=b3("tensorArrayId",e,t,n),a=b3("index",e,t,n),s=n.getTensorArray(r.id);return[s.read(a)]}case"TensorArrayGatherV3":{let r=b3("tensorArrayId",e,t,n),a=b3("indices",e,t,n),s=b3("dtype",e,t,n),i=n.getTensorArray(r.id);return[i.gather(a,s)]}case"TensorArrayScatterV3":{let r=b3("tensorArrayId",e,t,n),a=b3("indices",e,t,n),s=b3("tensor",e,t,n),i=n.getTensorArray(r.id);return i.scatter(a,s),[i.idTensor]}case"TensorArrayConcatV3":{let r=b3("tensorArrayId",e,t,n),a=n.getTensorArray(r.id),s=b3("dtype",e,t,n);return[a.concat(s)]}case"TensorArraySplitV3":{let r=b3("tensorArrayId",e,t,n),a=b3("tensor",e,t,n),s=b3("lengths",e,t,n),i=n.getTensorArray(r.id);return i.split(s,a),[i.idTensor]}case"TensorArraySizeV3":{let r=b3("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return[ly(a.size(),"int32")]}case"TensorArrayCloseV3":{let r=b3("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{let r=b3("tensorListId",e,t,n),a=b3("index",e,t,n),s=b3("tensor",e,t,n),i=n.getTensorList(r.id);return i.setItem(a,s),[i.idTensor]}case"TensorListGetItem":{let r=b3("tensorListId",e,t,n),a=b3("index",e,t,n),s=b3("elementShape",e,t,n),i=b3("elementDType",e,t,n),o=n.getTensorList(r.id);return[o.getItem(a,s,i)]}case"TensorListScatterV2":case"TensorListScatter":{let r=b3("indices",e,t,n),a=b3("tensor",e,t,n),s=b3("elementShape",e,t,n),i=b3("numElements",e,t,n),o=function(e,t,n,r){if(t.length!==e.shape[0])throw Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);let a=Math.max(...t);if(null!=r&&-1!==r&&a>=r)throw Error(`Max index must be < array size (${a}  vs. ${r})`);let s=new x7([],n,e.dtype,r),i=pG(e,0);return t.forEach((e,t)=>{s.setItem(e,i[t])}),s}(a,r,s,i);return n.addTensorList(o),[o.idTensor]}case"TensorListReserve":case"EmptyTensorList":{let r;let a=b3("elementShape",e,t,n),s=b3("elementDType",e,t,n);r="TensorListReserve"===e.op?"numElements":"maxNumElements";let i=b3(r,e,t,n),o="TensorListReserve"===e.op?-1:i,l=new x7([],a,s,o);return n.addTensorList(l),[l.idTensor]}case"TensorListGather":{let r=b3("tensorListId",e,t,n),a=b3("indices",e,t,n),s=b3("elementShape",e,t,n),i=b3("elementDType",e,t,n),o=n.getTensorList(r.id);return[o.gather(a,i,s)]}case"TensorListStack":{let r=b3("tensorListId",e,t,n),a=b3("elementShape",e,t,n),s=b3("elementDType",e,t,n),i=b3("numElements",e,t,n),o=n.getTensorList(r.id);return[o.stack(a,s,i)]}case"TensorListFromTensor":{let r=b3("tensor",e,t,n),a=b3("elementShape",e,t,n),s=b3("elementDType",e,t,n),i=function(e,t,n){let r=e.dtype;if(e.shape.length<1)throw Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);let a=e.shape.slice(1);x3(a,t,"TensorList shape mismatch: ");let s=pG(e);return new x7(s,t,r)}(r,a,s);return n.addTensorList(i),[i.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{let r=b3("tensorListId",e,t,n),a=n.getTensorList(r.id),s=b3("dtype",e,t,n),i=b3("elementShape",e,t,n);return[a.concat(s,i)]}case"TensorListPushBack":{let r=b3("tensorListId",e,t,n),a=b3("tensor",e,t,n),s=n.getTensorList(r.id);return s.pushBack(a),[s.idTensor]}case"TensorListPopBack":{let r=b3("tensorListId",e,t,n),a=b3("elementShape",e,t,n),s=b3("elementDType",e,t,n),i=n.getTensorList(r.id);return[i.popBack(a,s)]}case"TensorListSplit":{let r=b3("tensor",e,t,n),a=b3("elementShape",e,t,n),s=b3("lengths",e,t,n),i=function(e,t,n){let r=0,a=t.map(e=>r+=e);if(r!==e.shape[0])throw Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${r}, and tensor's shape is: ${e.shape}`);let s=e.shape.slice(1),i=x5(s,n),o=0===r?0:e.size/r,l=i7(()=>{let n=[];e=l5(e,[1,r,o]);for(let r=0;r<t.length;++r){let s=0===r?0:a[r-1],l=[0,s,0],u=[1,t[r],o];n[r]=l5(ut(e,l,u),i)}return e.dispose(),n}),u=new x7([],n,e.dtype,t.length);for(let e=0;e<l.length;e++)u.setItem(e,l[e]);return u}(r,s,a);return n.addTensorList(i),[i.idTensor]}case"TensorListLength":{let r=b3("tensorListId",e,t,n),a=n.getTensorList(r.id);return[ly(a.size(),"int32")]}case"TensorListResize":{let r=b3("tensorListId",e,t,n),a=b3("size",e,t,n),s=n.getTensorList(r.id),i=s.resize(a);return n.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function ke(e,t,n){let[r,a]=b3("fusedOps",e,t,n),s="biasadd"===r,i="prelu"===a,o=b3("numArgs",e,t,n);if(s){if(i&&2!==o)throw Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&s&&1!==o)throw Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if("fusedbatchnorm"===r)throw Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");let l=b3("strides",e,t,n),u=b7(e,t,n),h=b3("dataFormat",e,t,n).toUpperCase(),p=b3("dilations",e,t,n),[d,c]=b3("args",e,t,n);s||(c=d,d=void 0);let f=b3("leakyreluAlpha",e,t,n);return{stride:l,pad:u,dataFormat:h,dilations:p,biasArg:d,preluArg:c,activationFunc:a,leakyreluAlpha:f}}let kt=(e,t,n,r=x0)=>{switch(e.op){case"Conv1D":{let a=b3("stride",e,t,n),s=b3("pad",e,t,n),i=b3("dataFormat",e,t,n).toUpperCase(),o=b3("dilation",e,t,n);return[r.conv1d(b3("x",e,t,n),b3("filter",e,t,n),a,s,i,o)]}case"Conv2D":{let a=b3("strides",e,t,n),s=b7(e,t,n),i=b3("dataFormat",e,t,n).toUpperCase(),o=b3("dilations",e,t,n);return[r.conv2d(b3("x",e,t,n),b3("filter",e,t,n),[a[1],a[2]],s,i,[o[1],o[2]])]}case"_FusedConv2D":{let{stride:a,pad:s,dataFormat:i,dilations:o,biasArg:l,preluArg:u,activationFunc:h,leakyreluAlpha:p}=ke(e,t,n);return[r.fused.conv2d({x:b3("x",e,t,n),filter:b3("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:i,dilations:[o[1],o[2]],bias:l,activation:h,preluActivationWeights:u,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{let{stride:a,pad:s,dataFormat:i,dilations:o,biasArg:l,preluArg:u,activationFunc:h,leakyreluAlpha:p}=ke(e,t,n);return[r.fused.depthwiseConv2d({x:b3("x",e,t,n),filter:b3("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:i,dilations:[o[1],o[2]],bias:l,activation:h,preluActivationWeights:u,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{let a=b3("outputShape",e,t,n),s=b3("strides",e,t,n),i=b7(e,t,n);return[r.conv2dTranspose(b3("x",e,t,n),b3("filter",e,t,n),a,[s[1],s[2]],i)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{let a=b3("strides",e,t,n),s=b7(e,t,n),i=b3("dilations",e,t,n),o=b3("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(b3("input",e,t,n),b3("filter",e,t,n),[a[1],a[2]],s,o,[i[1],i[2]])]}case"Conv3D":{let a=b3("strides",e,t,n),s=b3("pad",e,t,n),i=b3("dataFormat",e,t,n).toUpperCase(),o=b3("dilations",e,t,n);return[r.conv3d(b3("x",e,t,n),b3("filter",e,t,n),[a[1],a[2],a[3]],s,i,[o[1],o[2],o[3]])]}case"AvgPool":{let a=b3("strides",e,t,n),s=b3("pad",e,t,n),i=b3("kernelSize",e,t,n);return[r.avgPool(b3("x",e,t,n),[i[1],i[2]],[a[1],a[2]],s)]}case"MaxPool":{let a=b3("strides",e,t,n),s=b3("pad",e,t,n),i=b3("kernelSize",e,t,n);return[r.maxPool(b3("x",e,t,n),[i[1],i[2]],[a[1],a[2]],s)]}case"MaxPoolWithArgmax":{let a=b3("strides",e,t,n),s=b3("pad",e,t,n),i=b3("kernelSize",e,t,n),o=b3("includeBatchInIndex",e,t,n),{result:l,indexes:u}=r.maxPoolWithArgmax(b3("x",e,t,n),[i[1],i[2]],[a[1],a[2]],s,o);return[l,u]}case"AvgPool3D":{let a=b3("strides",e,t,n),s=b3("pad",e,t,n),i=b3("kernelSize",e,t,n);return[r.avgPool3d(b3("x",e,t,n),[i[1],i[2],i[3]],[a[1],a[2],a[3]],s)]}case"MaxPool3D":{let a=b3("strides",e,t,n),s=b3("pad",e,t,n),i=b3("kernelSize",e,t,n);return[r.maxPool3d(b3("x",e,t,n),[i[1],i[2],i[3]],[a[1],a[2],a[3]],s)]}case"Dilation2D":{let a=b3("strides",e,t,n),s=b3("pad",e,t,n),i=b3("dilations",e,t,n),o=a[1],l=a[2],u=i[1],h=i[2];return[r.dilation2d(b3("x",e,t,n),b3("filter",e,t,n),[o,l],s,[u,h],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},kn=(e,t,n,r=x0)=>{switch(e.op){case"Fill":{let a=b3("shape",e,t,n),s=b3("dtype",e,t,n),i=b3("value",e,t,n);return[r.fill(a,i,s)]}case"LinSpace":{let a=b3("start",e,t,n),s=b3("stop",e,t,n),i=b3("num",e,t,n);return[r.linspace(a,s,i)]}case"Multinomial":{let a=b3("logits",e,t,n),s=b3("numSamples",e,t,n),i=b3("seed",e,t,n);return[r.multinomial(a,s,i)]}case"OneHot":{let a=b3("indices",e,t,n),s=b3("depth",e,t,n),i=b3("onValue",e,t,n),o=b3("offValue",e,t,n),l=b3("dtype",e,t,n);return[r.oneHot(a,s,i,o,l)]}case"Ones":return[r.ones(b3("shape",e,t,n),b3("dtype",e,t,n))];case"OnesLike":return[r.onesLike(b3("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(b3("shape",e,t,n),b3("dtype",e,t,n),b3("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(b3("shape",e,t,n),b3("minval",e,t,n),b3("maxval",e,t,n),b3("dtype",e,t,n))];case"Range":{let a=b3("start",e,t,n),s=b3("stop",e,t,n),i=b3("step",e,t,n);return[r.range(a,s,i,b3("dtype",e,t,n))]}case"TruncatedNormal":{let a=b3("shape",e,t,n),s=b3("mean",e,t,n),i=b3("stdDev",e,t,n),o=b3("seed",e,t,n);return[r.truncatedNormal(a,s,i,b3("dtype",e,t,n),o)]}case"Zeros":return[r.zeros(b3("shape",e,t,n),b3("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(b3("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function kr(e,t,n){let r=b3("boxes",e,t,n),a=b3("scores",e,t,n),s=b3("maxOutputSize",e,t,n),i=b3("iouThreshold",e,t,n),o=b3("scoreThreshold",e,t,n),l=b3("softNmsSigma",e,t,n);return{boxes:r,scores:a,maxOutputSize:s,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}}let ka=async(e,t,n,r,a=x0)=>{switch(e.op){case"NonMaxSuppressionV5":{let{boxes:r,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=kr(e,t,n),h=await a.image.nonMaxSuppressionWithScoreAsync(r,s,i,o,l,u);return[h.selectedIndices,h.selectedScores]}case"NonMaxSuppressionV4":{let{boxes:r,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=kr(e,t,n),u=b3("padToMaxOutputSize",e,t,n),h=await a.image.nonMaxSuppressionPaddedAsync(r,s,i,o,l,u);return[h.selectedIndices,h.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{let{boxes:r,scores:s,maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=kr(e,t,n);return[await a.image.nonMaxSuppressionAsync(r,s,i,o,l)]}case"Where":{let r=a.cast(b3("condition",e,t,n),"bool"),s=[await a.whereAsync(r)];return r.dispose(),s}case"ListDiff":return a.setdiff1dAsync(b3("x",e,t,n),b3("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}},ks=(e,t,n,r=x0)=>{switch(e.op){case"LowerBound":{let a=b3("sortedSequence",e,t,n),s=b3("values",e,t,n);return[r.lowerBound(a,s)]}case"TopKV2":{let a=b3("x",e,t,n),s=b3("k",e,t,n),i=b3("sorted",e,t,n),o=r.topk(a,s,i);return[o.values,o.indices]}case"UpperBound":{let a=b3("sortedSequence",e,t,n),s=b3("values",e,t,n);return[r.upperBound(a,s)]}case"Unique":{let a=b3("x",e,t,n),s=r.unique(a);return[s.values,s.indices]}case"UniqueV2":{let a=b3("x",e,t,n),s=b3("axis",e,t,n),i=r.unique(a,s);return[i.values,i.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},ki=(e,t,n,r=x0)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":let a=b3("default",e,t,n);return[b4(e.name,t,n)||a];case"Placeholder":return[b4(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{let r=b3("x",e,t,n);return[b9(r)]}case"IdentityN":return b3("x",e,t,n).map(e=>b9(e));case"Snapshot":let s=b3("x",e,t,n);return[b9(s)];case"Shape":return[r.tensor1d(b3("x",e,t,n).shape,"int32")];case"ShapeN":return b3("x",e,t,n).map(e=>r.tensor1d(e.shape));case"Size":return[r.scalar(b3("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(b3("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":let i=b3("x",e,t,n),o=b3("data",e,t,n),l=b3("message",e,t,n),u=b3("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,u));return[i];default:throw TypeError(`Node type ${e.op} is not implemented`)}};class ko{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=ly(0),this.tensorMap=new Map,oe(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return ly(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);let n=await e.data();return this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),i7(()=>{let e=pG(t),r=n.length,a=e.length;rX.assert(r===a,()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${a} elements.`);for(let t=0;t<r;t++){let r=n[t],a=e[t];oe(a),this.tensorMap.set(r,a)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);let n=await e.data();return i7(()=>{let e=[];for(let r=0;r<n.length;r++){let a=n[r],s=this.findWithDefault(a,t);e.push(s)}return pR(e)})}findWithDefault(e,t){let n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}let kl=async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{let a=b3("keyDType",e,t,n),s=b3("valueDType",e,t,n),i=new ko(a,s);return r.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{let a=b3("tableHandle",e,t,n,r),s=b3("keys",e,t,n),i=b3("values",e,t,n),o=r.getHashTableById(a.id);return[await o.import(s,i)]}case"LookupTableFind":case"LookupTableFindV2":{let a=b3("tableHandle",e,t,n,r),s=b3("keys",e,t,n),i=b3("defaultValue",e,t,n),o=r.getHashTableById(a.id);return[await o.find(s,i)]}case"LookupTableSize":case"LookupTableSizeV2":{let a=b3("tableHandle",e,t,n,r),s=r.getHashTableById(a.id);return[s.tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},ku=(e,t,n,r=x0)=>{switch(e.op){case"ResizeBilinear":{let a=b3("images",e,t,n),s=b3("size",e,t,n),i=b3("alignCorners",e,t,n),o=b3("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(a,[s[0],s[1]],i,o)]}case"ResizeNearestNeighbor":{let a=b3("images",e,t,n),s=b3("size",e,t,n),i=b3("alignCorners",e,t,n),o=b3("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(a,[s[0],s[1]],i,o)]}case"CropAndResize":{let a=b3("image",e,t,n),s=b3("boxes",e,t,n),i=b3("boxInd",e,t,n),o=b3("cropSize",e,t,n),l=b3("method",e,t,n),u=b3("extrapolationValue",e,t,n);return[r.image.cropAndResize(a,s,i,o,l,u)]}case"ImageProjectiveTransformV3":{let a=b3("images",e,t,n),s=b3("transforms",e,t,n),i=b3("outputShape",e,t,n),o=b3("fillValue",e,t,n),l=b3("interpolation",e,t,n),u=b3("fillMode",e,t,n);return[r.image.transform(a,s,l.toLowerCase(),u.toLowerCase(),o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},kh=(e,t,n,r=x0)=>{switch(e.op){case"Equal":return[r.equal(b3("a",e,t,n),b3("b",e,t,n))];case"NotEqual":return[r.notEqual(b3("a",e,t,n),b3("b",e,t,n))];case"Greater":return[r.greater(b3("a",e,t,n),b3("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(b3("a",e,t,n),b3("b",e,t,n))];case"Less":return[r.less(b3("a",e,t,n),b3("b",e,t,n))];case"LessEqual":return[r.lessEqual(b3("a",e,t,n),b3("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(b3("a",e,t,n),b3("b",e,t,n))];case"LogicalNot":return[r.logicalNot(b3("a",e,t,n))];case"LogicalOr":return[r.logicalOr(b3("a",e,t,n),b3("b",e,t,n))];case"Select":case"SelectV2":return[r.where(b3("condition",e,t,n),b3("a",e,t,n),b3("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},kp=(e,t,n,r=x0)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(b3("a",e,t,n),b3("b",e,t,n),b3("transposeA",e,t,n),b3("transposeB",e,t,n))];case"Einsum":return[r.einsum(b3("equation",e,t,n),...b3("tensors",e,t,n))];case"Transpose":return[r.transpose(b3("x",e,t,n),b3("perm",e,t,n))];case"_FusedMatMul":let[a,s]=b3("fusedOps",e,t,n),i="prelu"===s,o=b3("numArgs",e,t,n),l=b3("leakyreluAlpha",e,t,n);if("biasadd"===a){if(i&&2!==o)throw Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}let[u,h]=b3("args",e,t,n);return[r.fused.matMul({a:b3("a",e,t,n),b:b3("b",e,t,n),transposeA:b3("transposeA",e,t,n),transposeB:b3("transposeB",e,t,n),bias:u,activation:s,preluActivationWeights:h,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}},kd=(e,t,n,r=x0)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(b3("x",e,t,n),b3("axis",e,t,n),b3("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(b3("x",e,t,n),b3("mean",e,t,n),b3("variance",e,t,n),b3("offset",e,t,n),b3("scale",e,t,n),b3("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(b3("x",e,t,n),b3("radius",e,t,n),b3("bias",e,t,n),b3("alpha",e,t,n),b3("beta",e,t,n))];case"Softmax":return[r.softmax(b3("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(b3("x",e,t,n))];case"SparseToDense":return[r.sparseToDense(b3("sparseIndices",e,t,n),b3("outputShape",e,t,n),b3("sparseValues",e,t,n),b3("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},kc=(e,t,n,r=x0)=>{switch(e.op){case"Max":{let a=b3("axis",e,t,n),s=b3("keepDims",e,t,n);return[r.max(b3("x",e,t,n),a,s)]}case"Mean":{let a=b3("axis",e,t,n),s=b3("keepDims",e,t,n);return[r.mean(b3("x",e,t,n),a,s)]}case"Min":{let a=b3("axis",e,t,n),s=b3("keepDims",e,t,n);return[r.min(b3("x",e,t,n),a,s)]}case"Sum":{let a=b3("axis",e,t,n),s=b3("keepDims",e,t,n);return[r.sum(b3("x",e,t,n),a,s)]}case"All":{let a=b3("axis",e,t,n),s=b3("keepDims",e,t,n);return[r.all(b3("x",e,t,n),a,s)]}case"Any":{let a=b3("axis",e,t,n),s=b3("keepDims",e,t,n);return[r.any(b3("x",e,t,n),a,s)]}case"ArgMax":{let a=b3("axis",e,t,n);return[r.argMax(b3("x",e,t,n),a)]}case"ArgMin":{let a=b3("axis",e,t,n);return[r.argMin(b3("x",e,t,n),a)]}case"Prod":{let a=b3("axis",e,t,n),s=b3("keepDims",e,t,n);return[r.prod(b3("x",e,t,n),a,s)]}case"Cumprod":{let a=b3("axis",e,t,n),s=b3("exclusive",e,t,n),i=b3("reverse",e,t,n);return[r.cumprod(b3("x",e,t,n),a,s,i)]}case"Cumsum":{let a=b3("axis",e,t,n),s=b3("exclusive",e,t,n),i=b3("reverse",e,t,n);return[r.cumsum(b3("x",e,t,n),a,s,i)]}case"Bincount":let a=b3("x",e,t,n),s=b3("weights",e,t,n),i=b3("size",e,t,n);return[r.bincount(a,s,i)];case"DenseBincount":{let a=b3("x",e,t,n),s=b3("weights",e,t,n),i=b3("size",e,t,n),o=b3("binaryOutput",e,t,n);return[r.denseBincount(a,s,i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},kf=(e,t,n,r=x0)=>{switch(e.op){case"ConcatV2":case"Concat":{let a=b3("n",e,t,n),s=b3("axis",e,t,n),i=b3("tensors",e,t,n);return i=i.slice(0,a),[r.concat(i,s)]}case"Gather":{let a=b3("x",e,t,n),s=b3("indices",e,t,n);return[r.gather(a,r.cast(s,"int32"),0)]}case"GatherV2":{let a=b3("axis",e,t,n),s=b3("batchDims",e,t,n),i=b3("x",e,t,n),o=b3("indices",e,t,n);return[r.gather(i,r.cast(o,"int32"),a,s)]}case"Reverse":{let a=b3("dims",e,t,n),s=[];for(let e=0;e<a.length;e++)a[e]&&s.push(e);let i=b3("x",e,t,n);return[r.reverse(i,s)]}case"ReverseV2":{let a=b3("axis",e,t,n),s=b3("x",e,t,n);return[r.reverse(s,a)]}case"Slice":{let a=b3("begin",e,t,n),s=b3("size",e,t,n);return[r.slice(b3("x",e,t,n),a,s)]}case"StridedSlice":{let a=b3("begin",e,t,n),s=b3("end",e,t,n),i=b3("strides",e,t,n),o=b3("beginMask",e,t,n),l=b3("endMask",e,t,n),u=b3("ellipsisMask",e,t,n),h=b3("newAxisMask",e,t,n),p=b3("shrinkAxisMask",e,t,n),d=b3("x",e,t,n);return[r.stridedSlice(d,a,s,i,o,l,u,h,p)]}case"Pack":return i7(()=>{let a=b3("axis",e,t,n),s=b3("tensors",e,t,n),i=s[0].shape,o=r.squeeze(s[0]).shape,l=s.map(e=>{let t=rX.arraysEqual(e.shape,i);if(!t&&!rX.arraysEqual(r.squeeze(e).shape,o))throw Error("the input tensors shape does not match");return t?e:r.reshape(e,i)});return[r.stack(l,a)]});case"Unpack":{let a=b3("axis",e,t,n),s=b3("tensor",e,t,n);return r.unstack(s,a)}case"Tile":{let a=b3("reps",e,t,n);return[r.tile(b3("x",e,t,n),a)]}case"Split":case"SplitV":{let a=b3("axis",e,t,n),s=b3("numOrSizeSplits",e,t,n),i=b3("x",e,t,n);return r.split(i,s,a)}case"ScatterNd":{let a=b3("indices",e,t,n),s=b3("values",e,t,n),i=b3("shape",e,t,n);return[r.scatterND(a,s,i)]}case"GatherNd":{let a=b3("x",e,t,n),s=b3("indices",e,t,n);return[r.gatherND(a,s)]}case"SparseToDense":{let a=b3("sparseIndices",e,t,n),s=b3("outputShape",e,t,n),i=b3("sparseValues",e,t,n),o=b3("defaultValue",e,t,n);return[r.sparseToDense(a,i,s,i.dtype===o.dtype?o:r.cast(o,i.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},km=(e,t,n,r=x0)=>{switch(e.op){case"SparseFillEmptyRows":{let{outputIndices:a,outputValues:s,emptyRowIndicator:i,reverseIndexMap:o}=r.sparse.sparseFillEmptyRows(b3("indices",e,t,n),b3("values",e,t,n),b3("denseShape",e,t,n),b3("defaultValue",e,t,n));return[a,s,i,o]}case"SparseReshape":{let{outputIndices:a,outputShape:s}=r.sparse.sparseReshape(b3("inputIndices",e,t,n),b3("inputShape",e,t,n),b3("newShape",e,t,n));return[a,s]}case"SparseSegmentMean":{let a=r.sparse.sparseSegmentMean(b3("data",e,t,n),b3("indices",e,t,n),b3("segmentIds",e,t,n));return[a]}case"SparseSegmentSum":{let a=r.sparse.sparseSegmentSum(b3("data",e,t,n),b3("indices",e,t,n),b3("segmentIds",e,t,n));return[a]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},kg=(e,t,n,r=x0)=>{switch(e.op){case"FFT":return[r.fft(b3("x",e,t,n))];case"IFFT":return[r.ifft(b3("x",e,t,n))];case"RFFT":return[r.rfft(b3("x",e,t,n))];case"IRFFT":return[r.irfft(b3("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},ky=(e,t,n,r=x0)=>{switch(e.op){case"StringNGrams":{let{nGrams:a,nGramsSplits:s}=r.string.stringNGrams(b3("data",e,t,n),b3("dataSplits",e,t,n),b3("separator",e,t,n),b3("nGramWidths",e,t,n),b3("leftPad",e,t,n),b3("rightPad",e,t,n),b3("padWidth",e,t,n),b3("preserveShortSequences",e,t,n));return[a,s]}case"StringSplit":{let{indices:a,values:s,shape:i}=r.string.stringSplit(b3("input",e,t,n),b3("delimiter",e,t,n),b3("skipEmpty",e,t,n));return[a,s,i]}case"StringToHashBucketFast":{let a=r.string.stringToHashBucketFast(b3("input",e,t,n),b3("numBuckets",e,t,n));return[a]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},kb=(e,t,n,r=x0)=>{switch(e.op){case"Cast":return[r.cast(b3("x",e,t,n),b3("dtype",e,t,n))];case"ExpandDims":{let a=b3("axis",e,t,n);return[r.expandDims(b3("x",e,t,n),a)]}case"Squeeze":{let a=b3("axis",e,t,n);return[r.squeeze(b3("x",e,t,n),a)]}case"Reshape":return[r.reshape(b3("x",e,t,n),b3("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(b3("x",e,t,n),b3("padding",e,t,n),b3("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(b3("x",e,t,n),b3("padding",e,t,n),b3("constantValue",e,t,n))];case"SpaceToBatchND":{let a=b3("blockShape",e,t,n),s=b3("paddings",e,t,n);return[r.spaceToBatchND(b3("x",e,t,n),a,s)]}case"BatchToSpaceND":{let a=b3("blockShape",e,t,n),s=b3("crops",e,t,n);return[r.batchToSpaceND(b3("x",e,t,n),a,s)]}case"DepthToSpace":{let a=b3("blockSize",e,t,n),s=b3("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(b3("x",e,t,n),a,s)]}case"BroadcastTo":return[r.broadcastTo(b3("x",e,t,n),b3("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(b3("s0",e,t,n),b3("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function kx(e,t,n,r,a=i7){let s=((e,t,n)=>{switch(e.category){case"arithmetic":return a(()=>x1(e,t,n));case"basic_math":return a(()=>x2(e,t,n));case"control":return x9(e,t,n);case"convolution":return a(()=>kt(e,t,n));case"creation":return a(()=>kn(e,t,n));case"dynamic":return ka(e,t,n);case"evaluation":return a(()=>ks(e,t,n));case"image":return a(()=>ku(e,t,n));case"graph":return a(()=>ki(e,t,n));case"logical":return a(()=>kh(e,t,n));case"matrices":return a(()=>kp(e,t,n));case"normalization":return a(()=>kd(e,t,n));case"reduction":return a(()=>kc(e,t,n));case"slice_join":return a(()=>kf(e,t,n));case"sparse":return a(()=>km(e,t,n));case"spectral":return a(()=>kg(e,t,n));case"string":return a(()=>ky(e,t,n));case"transformation":return a(()=>kb(e,t,n));case"hash_table":return kl(e,t,n,r);case"custom":let s=b2[e.op];if(s&&s.customExecutor)return s.customExecutor(new xQ(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return rX.isPromise(s)?s.then(e=>[].concat(e)):[].concat(s)}class kk{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){let e=[];for(let t=0;t<this.contexts.length-1;t++){let n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(this.contexts&&this.contexts.length>1)this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift();else throw Error("Cannot exit frame, the context is empty")}nextIteration(){if(this.contexts&&this.contexts.length>0){this.contexts=this.contexts.slice(),this.lastId++;let e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}else throw Error("Cannot increase frame iteration, the context is empty")}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(let t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(let t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function kv(e,t,n,r){let a=new Set,s=[],i=null,o=null,l=new Set,u=Object.keys(e).map(e=>b8(e)[0]),h=[];null!=r&&(h=r.map(e=>b8(e.name)[0]));let p=[...t];for(;p.length>0;){let e=p.pop();if((kN(e)||kI.indexOf(e.op)>=0||kS.indexOf(e.op)>=0)&&null==i&&(o=(i=e).children.map(e=>e.name).filter(e=>a.has(e))),a.add(e.name),null==n[e.name]&&-1===u.indexOf(e.name)&&-1===h.indexOf(e.name)){if(0===e.inputs.length){s.push(e.name);continue}e.inputs.forEach(e=>{l.has(e.name)||(l.add(e.name),p.push(e))})}}return{inputs:e,outputs:t,usedNodes:a,missingInputs:s,dynamicNode:i,syncInputs:o}}let kw=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],kI=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],kS=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function kN(e){return kw.indexOf(e.op)>=0}class kT{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new kT(e.functions[t],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){let t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{let t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}getCompilationKey(e,t){let n=e.map(e=>e.name).sort(),r=t.map(e=>e.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){let n=kv(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:a,syncInputs:s}=n;if(null!=a)throw Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${s}]`);if(r.length>0){let n=t.map(e=>e.name),a=Object.keys(e);throw Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${r}]`)}return function(e,t,n){let{usedNodes:r,inputs:a}=n,s=[],i=Object.keys(a).map(e=>b8(e)[0]).map(t=>e.nodes[t]),o=e.initNodes;i.forEach(e=>{r.has(e.name)&&s.push(e)}),e.weights.forEach(e=>{r.has(e.name)&&s.push(e)}),null!=o&&o.forEach(e=>{r.has(e.name)&&s.push(e)});let l=new Set,u=[];for(;s.length>0;){let e=s.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach(e=>{!l.has(e.name)&&r.has(e.name)&&e.inputs.every(e=>l.has(e.name))&&s.push(e)})}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);let n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);let r=n.map(e=>this.graph.nodes[b8(e)[0]]),a=t.map(e=>b8(e)[0]),s=a.map(e=>this.graph.nodes[e]);this.resetIntermediateTensors(),0===s.length&&(s=this._outputs);let i=this.getCompilationKey(r,s),o=this.compiledMap.get(i);null==o&&(o=this.compile(e,s),this.compiledMap.set(i,o));let l={},u={};return i7(()=>{let n=new kk(this.weightMap,l,u,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{let[n,a]=b8(t),s=[];s[a]=e[t],r[n]=s});let s=this.getFrozenTensorIds(r),i={};for(let e=0;e<o.length;e++){let t=o[e];if(!r[t.name]){let e=kx(t,r,n,this._resourceManager);if(rX.isPromise(e))throw Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,s,a,i)}}return null==this.parent&&n.dispose(s),t.map(e=>b4(e,r,n))})}getFrozenTensorIds(e){let t=[].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id)));return new Set(t)}checkTensorForDisposal(e,t,n,r,a,s,i){"control"!==t.category&&-1===s.indexOf(e)&&(n[e].forEach(e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)}),t.inputs.forEach(e=>{if("control"!==e.category){let s=n[b5(e.name,r.currentContextId)];null!=s&&s.forEach(e=>{if(e&&!e.kept&&!a.has(e.id)){let n=i[e.id];if(1===n){if(this.keepTensorForDebug){let[n,a]=b6(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][a]=e}else e.dispose();delete i[e.id]}else null!=n&&i[e.id]--}})}}))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach(e=>this.intermediateTensors[e].forEach(e=>e.dispose())),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach(e=>{let t=this.tensorsMap[e];t.forEach(e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()})})}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(let e in this.intermediateTensors)this.intermediateTensors[e].forEach(e=>e.dispose()),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,r={},a={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=eM.getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();let s=new kk(this.weightMap,r,a,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,s,t,n);let i=t.map(e=>b4(e,this.tensorsMap,s)),o=i.map(e=>e.id),l=Object.keys(e).map(t=>e[t].id);return this.keepIds=new Set([...o,...l,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&s.dispose(this.keepIds),i}async executeFunctionAsync(e,t,n){let r=e.reduce((e,t,n)=>(e[this.inputs[n].name]=t,e),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){let a=Object.keys(e),s=a.map(e=>this.graph.nodes[b8(e)[0]]),i=n.map(e=>b8(e)[0]),o=i.map(e=>this.graph.nodes[e]);0===o.length&&(o=this._outputs);let{usedNodes:l,missingInputs:u,dynamicNode:h,syncInputs:p}=kv(e,o,this.weightMap,this._initNodes),d=[...s,...this.graph.weights,...this._initNodes||[]].map(e=>({node:e,contexts:t.currentContext})),c=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{let[n,r]=b8(t),a=[];a[r]=e[t],c[n]=a});let f={},m=this.getFrozenTensorIds(c),g={};for(;d.length>0;){let e=this.processStack(s,d,t,c,g,m,i,f,l);await Promise.all(e)}null!=h||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");let y=o.filter(e=>!kN(e)&&!b4(e.name,c,t)).map(e=>e.name);if(y.length>0){let e="";throw null!=h&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),Error(`Cannot compute the outputs [${y}] from the provided inputs [${a}]. Consider providing the following inputs: [${u}]. ${e}`)}return c}processStack(e,t,n,r,a,s,i,o,l){let u=[];for(;t.length>0;){let e=t.pop();n.currentContext=e.contexts;let h="";if("Enter"===e.node.op&&b3("isConstant",e.node,r,n)&&([h]=b6(e.node.name,n)),null==r[e.node.name]){let p=kx(e.node,r,n,this._resourceManager);h||([h]=b6(e.node.name,n));let d=n.currentContext;rX.isPromise(p)?u.push(p.then(u=>(r[h]=u,n.currentContext=d,this.checkTensorForDisposal(h,e.node,r,n,s,i,o),this.processChildNodes(e.node,t,n,r,a,l),u))):(r[h]=p,this.checkTensorForDisposal(h,e.node,r,n,s,i,o),this.processChildNodes(e.node,t,n,r,a,l))}else this.processChildNodes(e.node,t,n,r,a,l)}return u}processChildNodes(e,t,n,r,a,s){e.children.forEach(e=>{let[i]=b6(e.name,n);!a[i]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!b4(e,r,n))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every(e=>!!b4(e,r,n))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{let n=e[t],[r]=b8(t),a=this.graph.nodes[r];if(a.attrParams.shape&&a.attrParams.shape.value){let e=a.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every((t,n)=>-1===e[n]||e[n]===t);rX.assert(t,()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`)}a.attrParams.dtype&&a.attrParams.dtype.value&&rX.assert(n.dtype===a.attrParams.dtype.value,()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(e){let t={};for(let n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){let r=this._signature.inputs[n];t[r.name]=e[n]}else t[n]=e[n];return t}checkInputs(e){let t=Object.keys(e).filter(e=>{let[t]=b8(e);return null==this.graph.nodes[t]});if(t.length>0)throw Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){let t=this._signature.outputs[e];return t.name}return e},{})}checkOutputs(e){e.forEach(e=>{let[t]=b8(e);if(!this.graph.nodes[t])throw Error(`The output '${e}' is not found in the graph`)})}}class kC{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(let e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(let e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class k${constructor(e,t={},n=i$){this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new kC}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){let e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{let t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");let e=this.handler.load();return rX.isPromise(e)?e.then(e=>this.loadSync(e)):this.loadSync(e)}loadSync(e){this.artifacts=e;let t=this.artifacts.modelTopology,n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){let e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;let r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new kT(xz.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){let t=xz.Instance.transformGraph(e.modelInitializer);this.initializer=new kT(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){let t=this.io.getSaveHandlers(e);if(0===t.length)throw Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){let n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){let e=n instanceof az?[n]:n,t={};return e.forEach((e,n)=>t[this.structuredOutputKeys[n]]=e),t}return n}normalizeInputs(e){if(!(e instanceof az)&&!Array.isArray(e))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce((t,n,r)=>(t[n]=e[r],t),{})}normalizeOutputs(e){return Array.isArray(e=e||this.outputNodes)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);let n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);let n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,n)=>(t[n]=[e[n]],t),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function kE(e,t={},n=i$){var r;if(null==e)throw Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&((r=e).endsWith("/")||(r+="/"),e=`${r}model.json?tfjs-format=file`);let a=new k$(e,t,n);return await a.load(),a}function kA(e){return null===e?null:kR(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function kR(e){let t=!1;if(eM.get("IS_BROWSER"))t=e instanceof TextDecoder;else{let{StringDecoder:n}=_("foUwZ");t=e instanceof n}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof az)&&!(e instanceof Promise)&&!t)}function kF(e){return e instanceof az?{value:e.clone(),recurse:!1}:kR(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class kD{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw RangeError("Can't create ring buffer of capacity < 1.");this.data=Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(let t of e)this.push(t)}pop(){if(this.isEmpty())throw RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);let e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw RangeError("Ring buffer is empty.");let e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw RangeError("Ring buffer is empty.");let t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class k_ extends kD{constructor(){super(k_.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){let e=2*this.capacity,t=Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}k_.INITIAL_CAPACITY=32;class kO{async toArray(){let e=[],t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){let e=this.prefetch(100),t=[],n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)n=e((t=await this.next()).value)}handleErrors(e){return new kG(this,e)}filter(e){return new kV(this,e)}map(e){return new kU(this,e)}mapAsync(e){return new kH(this,e)}serialMapAsync(e){return new kH(this,e).serial()}flatmap(e){return new kj(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile(e=>!0===e)}rowMajorBatch(e,t=!0){return new kW(this,e,t)}columnMajorBatch(e,t=!0,n=kA){let r=this.rowMajorBatch(e,t);return r.map(e=>(function(e,t=kA){return function e(t,n,r=new Set){let a=t[0];if(r.has(a))throw Error("Circular references are not supported.");let s=n(t);if(s.recurse&&null!==s.value)throw Error("A deep zip function may not return both a value and recurse=true.");if(!s.recurse)return s.value;if(kR(a)){let s=Array.isArray(a)?[]:{};for(let i in r.add(a),a){let a=t.map(e=>e[i]),o=e(a,n,r);s[i]=o}return r.delete(a),s}throw Error(`Can't recurse into non-iterable type: ${a}`)}(e,t)})(e,n))}concatenate(e,t){var n;return new kK((n=[this,e],new kM(n)),t)}take(e){return e<0||null==e?this:new kB(this,e)}skip(e){return e<0||null==e?this:new kP(this,e)}prefetch(e){return new kX(this,e)}shuffle(e,t){return new kY(this,e,t)}serial(){return new kz(this)}}class kM extends kO{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};let e=this.items[this.trav];return this.trav++,{value:function e(t,n,r=new Map,a=new Set){if(null==t)return null;if("function"==typeof Blob&&t instanceof Blob)return t.slice();if(a.has(t))throw Error("Circular references are not supported.");if(r.has(t))return r.get(t);let s=n(t);if(s.recurse&&null!==s.value)throw Error("A deep map function may not return both a value and recurse=true.");if(!s.recurse)return r.set(t,s.value),s.value;if(kR(t)){let s=Array.isArray(t)?[]:{};for(let i in a.add(t),t){let o=t[i],l=e(o,n,r,a);s[i]=l}return a.delete(t),t.__proto__&&(s.__proto__=t.__proto__),s}throw Error(`Can't recurse into non-iterable type: ${t}`)}(e,kF),done:!1}}}class kL extends kO{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class kz extends kO{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){return this.upstream.next()}}class kP extends kO{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){let e=await this.upstream.next();if(e.done)return e;i9(e.value)}return this.upstream.next()}}class kB extends kO{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class kW extends kO{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){let e=[];for(;e.length<this.batchSize;){let t=await this.upstream.next();if(t.done){if(this.enableSmallLastBatch&&e.length>0)return{value:e,done:!1};return{value:null,done:!0}}e.push(t.value)}return{value:e,done:!1}}}class kV extends kO{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;){let e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;i9(e.value)}}}class kU extends kO{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){let e=await this.upstream.next();if(e.done)return{value:null,done:!0};let t=aW.getTensorsInContainer(e.value),n=this.transform(e.value),r=aW.getTensorsInContainer(n);for(let e of t)aW.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class kG extends kO{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class kH extends kO{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){let e=await this.upstream.next();if(e.done)return{value:null,done:!0};let t=aW.getTensorsInContainer(e.value),n=await this.transform(e.value),r=aW.getTensorsInContainer(n);for(let e of t)aW.isTensorInList(e,r)||e.dispose();return{value:n,done:!1}}}class kq extends kO{constructor(){super(),this.outputQueue=new k_,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class kj extends kq{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){let e=await this.upstream.next();if(e.done)return!1;let t=aW.getTensorsInContainer(e.value),n=this.transform(e.value),r=aW.getTensorsInContainer(n);for(let e of(this.outputQueue.pushAll(n),t))aW.isTensorInList(e,r)||e.dispose();return!0}}class kK extends kO{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){let e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}let t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}!function(e){e[e.FAIL=0]="FAIL",e[e.SHORTEST=1]="SHORTEST",e[e.LONGEST=2]="LONGEST"}(N||(N={}));class kX extends kO{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new kD(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){let e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class kY extends kX{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=hY.alea(n||rX.now().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then(()=>this.serialNext()),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){let e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class kZ{constructor(){this.size=null}batch(e,t=!0){let n=this;return rX.assert(e>0,()=>`batchSize needs to be positive, but it is
      ${e}`),kJ(async()=>(await n.iterator()).columnMajorBatch(e,t,kQ),this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e))}concatenate(e){let t=this;return kJ(async()=>(await t.iterator()).concatenate(await e.iterator()),this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null)}filter(e){let t=this;return kJ(async()=>(await t.iterator()).filter(t=>i7(()=>e(t))),this.size===1/0?1/0:null)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){let t=this;return kJ(async()=>(await t.iterator()).map(t=>i7(()=>e(t))),this.size)}mapAsync(e){let t=this;return kJ(async()=>(await t.iterator()).mapAsync(e),this.size)}prefetch(e){if(null==e)throw RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");let t=this;return kJ(async()=>(await t.iterator()).prefetch(e),this.size)}repeat(e){let t=this;return kJ(async()=>{var n,r;let a=(n=async()=>({value:await t.iterator(),done:!1}),new kL(n));return r=a.take(e),new kK(r,void 0)},null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null)}skip(e){let t=this;return kJ(async()=>(await t.iterator()).skip(e),null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null)}shuffle(e,t,n=!0){if(null==e||e<0){if(null==this.size)throw RangeError("`Dataset.shuffle()` requires bufferSize to be specified.");throw RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`)}let r=this,a=hY.alea(t||rX.now().toString());return kJ(async()=>{let t=a.int32();return n&&(t+=a.int32()),(await r.iterator()).shuffle(e,t.toString())},this.size)}take(e){let t=this;return kJ(async()=>(await t.iterator()).take(e),null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null)}async toArray(){if(this.size===1/0)throw Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function kJ(e,t=null){return new class extends kZ{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function kQ(e){var t;if(null===e)return null;let n=e[0];if(null==n||null===(t=n)||"object"!=typeof t&&"function"!=typeof t||Array.isArray(n)||"object"==typeof n&&n instanceof az||rX.isTypedArray(n)){let t=function(e){if(0===e.length)throw Error("Can't make a batch of zero elements.");return e[0]instanceof az?pR(e):sa(e)}(e);return{value:t,recurse:!1}}return{value:null,recurse:!0}}function k0(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&rX.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}kZ.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");let k1=fm.whereImpl;class k2 extends M{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new O(this,aQ)}nextDataId(){return k2.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,eM.get("IS_NODE")&&ch.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));let r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&rX.isString(n[0])){let a=n.map(e=>rX.encodeString(e));r=this.write(a,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){let t=this.data.get(e);return t.refCount}return 0}incRef(e){let t=this.data.get(e);t.refCount++}decRef(e){if(this.data.has(e)){let t=this.data.get(e);t.refCount--}}move(e,t,n,r,a){this.data.set(e,{values:t,dtype:r,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){let{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){let e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return ch.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{let n=t.map(e=>rX.decodeString(e));return iI(e.shape,e.dtype,n)}catch(e){throw Error("Failed to decode encoded string bytes into utf-8")}return iI(e.shape,e.dtype,t)}makeOutput(e,t,n){return aQ.makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;let{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){let t=rX.now();e();let n=rX.now()-t;return{kernelMs:n}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){k0([e],"where");let t=this.readSync(e.dataId);return k1(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function k3(e,t,n){return({inputs:r,attrs:a,backend:s})=>{let{x:i}=r;if(k0(i,e),"string"===i.dtype||"string"===n)throw Error("unaryKernelFunc does not support string input/output");let o=s.data.get(i.dataId).values,l=rX.sizeFromShape(i.shape),u=n||i.dtype,h=rX.getArrayFromDType(u,l);for(let e=0;e<l;++e)h[e]=t(o[e],a);return s.makeTensorInfo(i.shape,u,h)}}function k4(e,t,n){return({inputs:r,attrs:a,backend:s})=>{let{x:i}=r;if(k0(i,e),"string"===i.dtype||"string"===n)throw Error("unaryKernelFunc does not support string input/output");let o=s.data.get(i.dataId).values,l=n||i.dtype,u=t(o,l,a);return s.makeTensorInfo(i.shape,l,u)}}k2.nextDataId=0,ol("cpu",()=>new k2,1);let k6=k3(tP,e=>e>=0?e:Math.exp(e)-1);function k5(e){let{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}function k8(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:s}=r;k0([a],"leakyRelu");let i=rX.sizeFromShape(a.shape),o=n.data.get(a.dataId).values,l=rX.getTypedArrayFromDType("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?s*o[e]:o[e];return n.makeTensorInfo(a.shape,"float32",l)}function k7(e){return(t,n,r,a,s)=>{let i=ch.assertAndGetBroadcastShape(t,n),o=i.length,l=rX.computeStrides(i),u=rX.sizeFromShape(i),h=rX.getTypedArrayFromDType(s,u),p=t.length,d=n.length,c=rX.computeStrides(t),f=rX.computeStrides(n),m=ch.getBroadcastDims(t,i),g=ch.getBroadcastDims(n,i);if(m.length+g.length===0)for(let t=0;t<h.length;++t)h[t]=e(r[t%r.length],a[t%a.length]);else for(let t=0;t<h.length;++t){let n=rX.indexToLoc(t,o,l),s=n.slice(-p);m.forEach(e=>s[e]=0);let i=rX.locToIndex(s,p,c),u=n.slice(-d);g.forEach(e=>u[e]=0);let y=rX.locToIndex(u,d,f);h[t]=e(r[i],a[y])}return[h,i]}}let k9=k7((e,t)=>e<0?t*e:e);function ve(e){let{inputs:t,backend:n}=e,{x:r,alpha:a}=t;k0([r,a],"prelu");let s=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,[o,l]=k9(r.shape,a.shape,s,i,"float32");return n.makeTensorInfo(l,"float32",o)}let vt=k3(nG,e=>Math.max(0,e)),vn=k3(nY,e=>Math.min(Math.max(0,e),6));function vr(e){return(t,n,r)=>{let a=rX.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)a[n]=e(t[n],r);return a}}let va=vr(e=>1/(1+Math.exp(-e))),vs=k3(n7,e=>1/(1+Math.exp(-e)));function vi(e,t,n,r,a){if("linear"===n)return k5({inputs:{x:t},backend:e});if("relu"===n)return vt({inputs:{x:t},backend:e});if("elu"===n)return k6({inputs:{x:t},backend:e});if("relu6"===n)return vn({inputs:{x:t},backend:e});if("prelu"===n)return ve({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return k8({inputs:{x:t},backend:e,attrs:{alpha:a}});if("sigmoid"===n)return vs({inputs:{x:t},backend:e});throw Error(`Activation ${n} has not been implemented for the CPU backend.`)}function vo(e){let{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,o=n.makeTensorInfo(r.shape,"complex64"),l=n.data.get(o.dataId);return l.complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",s),imag:n.makeTensorInfo(a.shape,"float32",i)},o}function vl(e,t,n="float32"){if("complex64"===n){let n=vl(e,t,"float32"),r=vl(e,t,"float32");return vo({inputs:{real:n,imag:r},backend:e})}let r=rX.makeZerosTypedArray(rX.sizeFromShape(t),n);return e.makeTensorInfo(t,n,r)}function vu(e){let{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.real,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}function vh(e,t,n,r){if("int32"===r){let n=Int32Array.from(e);return[t,"int32",n]}if("bool"===r){let r=rX.toTypedArray([0],n),[a,s]=k7((e,t)=>e!==t?1:0)(t,[],e,r,"bool");return[s,"bool",a]}throw Error(`Error in Cast: failed to cast ${n} to ${r}`)}function vp(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dtype:s}=r;if("complex64"===s){if("complex64"===a.dtype)return k5({inputs:{x:a},backend:n});let e=vl(n,a.shape,a.dtype),t=vp({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),r=vo({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===a.dtype){let e=vu({inputs:{input:a},backend:n}),t=vp({inputs:{x:e},backend:n,attrs:{dtype:s}});return n.disposeIntermediateTensorInfo(e),t}if(!rX.hasEncodingLoss(a.dtype,s)){let e=k5({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:s}}let i=n.data.get(a.dataId).values,[o,l,u]=vh(i,a.shape,a.dtype,s);return n.makeTensorInfo(o,l,u)}function vd(e,t,n,r){return null==n?({inputs:n,backend:a})=>{let{a:s,b:i}=n;k0([s,i],e);let o=a.data.get(s.dataId).values,l=a.data.get(i.dataId).values,u="string"===s.dtype?ch.fromUint8ToStringArray(o):o,h="string"===s.dtype?ch.fromUint8ToStringArray(l):l,p=r||s.dtype,[d,c]=t(s.shape,i.shape,u,h,p);return a.makeTensorInfo(c,p,d)}:({inputs:e,backend:a})=>{let{a:s,b:i}=e;if("complex64"===s.dtype||"complex64"===i.dtype){let e=vp({inputs:{x:s},backend:a,attrs:{dtype:"complex64"}}),t=a.data.get(e.dataId),r=t.complexTensorInfos.real,o=t.complexTensorInfos.imag,l=a.data.get(r.dataId).values,u=a.data.get(o.dataId).values,h=vp({inputs:{x:i},backend:a,attrs:{dtype:"complex64"}}),p=a.data.get(h.dataId),d=p.complexTensorInfos.real,c=p.complexTensorInfos.imag,f=a.data.get(d.dataId).values,m=a.data.get(c.dataId).values,[g,y,b]=n(s.shape,i.shape,l,u,f,m),x=a.makeTensorInfo(b,"float32",g),k=a.makeTensorInfo(b,"float32",y),v=vo({inputs:{real:x,imag:k},backend:a});return a.disposeIntermediateTensorInfo(e),a.disposeIntermediateTensorInfo(h),a.disposeIntermediateTensorInfo(x),a.disposeIntermediateTensorInfo(k),v}{let e=a.data.get(s.dataId).values,n=a.data.get(i.dataId).values,o=r||s.dtype,[l,u]=t(s.shape,i.shape,e,n,o);return a.makeTensorInfo(u,o,l)}}}function vc(e){return(t,n,r,a,s,i)=>{let o=ch.assertAndGetBroadcastShape(t,n),l=rX.sizeFromShape(o),u=o.length,h=rX.computeStrides(o),p=rX.getTypedArrayFromDType("float32",l),d=rX.getTypedArrayFromDType("float32",l),c=ch.getBroadcastDims(t,o),f=ch.getBroadcastDims(n,o),m=ch.mergeRealAndImagArrays(r,a),g=ch.mergeRealAndImagArrays(s,i),y=t.length,b=rX.computeStrides(t),x=n.length,k=rX.computeStrides(n);if(c.length+f.length===0)for(let t=0;t<p.length;t++){let n=t%m.length,r=t%g.length,a=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);p[t]=a.real,d[t]=a.imag}else for(let t=0;t<p.length;t++){let n=rX.indexToLoc(t,u,h),r=n.slice(-y);c.forEach(e=>r[e]=0);let a=rX.locToIndex(r,y,b),s=n.slice(-x);f.forEach(e=>s[e]=0);let i=rX.locToIndex(s,x,k),o=e(m[2*a],m[2*a+1],g[2*i],g[2*i+1]);p[t]=o.real,d[t]=o.imag}return[p,d,o]}}let vf=k7((e,t)=>e+t),vm=vc((e,t,n,r)=>({real:e+n,imag:t+r})),vg=vd(e1,vf,vm);function vy(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:s}=r,i=rX.sizeFromShape(a.shape),o=rX.inferFromImplicitShape(s,i),l=rX.sizeFromShape(o);rX.assert(i===l,()=>`The new shape (${o}) has ${l} elements and the old shape (${a.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),n.incRef(a.dataId);let u=n.data.get(a.dataId);if(null!=u.complexTensorInfos){let e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:a.dataId,shape:o,dtype:a.dtype}}function vb(e){let{inputs:t,backend:n,attrs:r}=e,{a:a,b:s}=t,{transposeA:i,transposeB:o}=r;k0([a,s],"matMul");let l=a.shape.length,u=s.shape.length,h=i?a.shape[l-2]:a.shape[l-1],p=o?s.shape[u-1]:s.shape[u-2],d=i?a.shape[l-1]:a.shape[l-2],c=o?s.shape[u-2]:s.shape[u-1],f=a.shape.slice(0,-2),m=s.shape.slice(0,-2),g=rX.sizeFromShape(f),y=rX.sizeFromShape(m),b=og.assertAndGetBroadcastShape(a.shape.slice(0,-2),s.shape.slice(0,-2)),x=b.concat([d,c]);rX.assert(h===p,()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${a.shape} and ${s.shape} and transposeA=${i} and transposeB=${o} must match.`);let k=i?[g,h,d]:[g,d,h],v=o?[y,c,p]:[y,p,c],w=vy({inputs:{x:a},backend:n,attrs:{shape:k}}),I=vy({inputs:{x:s},backend:n,attrs:{shape:v}}),S=i?w.shape[1]:w.shape[2],N=i?w.shape[2]:w.shape[1],T=o?I.shape[1]:I.shape[2],C=Math.max(g,y),$=n.data.get(w.dataId).values,E=n.data.get(I.dataId).values,A=rX.computeStrides(w.shape),R=rX.computeStrides(I.shape),[F,D,_]=i?[A[0],1,A[1]]:[A[0],A[1],1],[O,M,L]=o?[1,R[1],R[0]]:[R[1],1,R[0]],z=N*T,P=iI([C,N,T],w.dtype),B=P.values,W=n.blockSize;for(let e=0;e<C;e++)for(let t=0;t<N;t+=W)for(let n=0;n<T;n+=W)for(let r=0;r<S;r+=W){let a=Math.min(t+W,N),s=Math.min(n+W,T),i=Math.min(r+W,S);for(let o=t;o<a;o++)for(let t=n;t<s;t++){let n=0;for(let a=r;a<i;a++){let r=Math.min(e,g-1)*F,s=Math.min(e,y-1)*L,i=$[r+o*D+a*_],l=E[a*O+t*M+s];n+=i*l}B[e*z+(o*T+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(I),n.makeTensorInfo(x,P.dtype,P.values)}function vx(e){let t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}let vk=k3(eQ,e=>Math.acos(e)),vv=k3(e0,e=>Math.acosh(e));function vw(e,t,n,r,a){let s=t.length,i=rX.sizeFromShape(t),o=rX.computeStrides(t),l=rX.computeStrides(a),u=rX.getTypedArrayFromDType(n,rX.sizeFromShape(a));for(let t=0;t<i;++t){let n=rX.indexToLoc(t,s,o),a=Array(n.length);for(let e=0;e<a.length;e++)a[e]=n[r[e]];let i=rX.locToIndex(a,s,l);u[i]=e[t]}return u}function vI(e){let{inputs:t,attrs:n,backend:r}=e,{x:a}=t,{perm:s}=n;k0(a,"transpose");let i=a.shape.length,o=Array(i);for(let e=0;e<o.length;e++)o[e]=a.shape[s[e]];let l=r.data.get(a.dataId).values,u=vw(l,a.shape,a.dtype,s,o),h=r.write(u,o,a.dtype);return{dataId:h,shape:o,dtype:a.dtype}}let vS=k3(e8,e=>Math.asin(e)),vN=k3(e7,e=>Math.asinh(e)),vT=k3(e9,e=>Math.atan(e)),vC=k7((e,t)=>Math.atan2(e,t)),v$=vd(tt,vC),vE=k3(te,e=>Math.atanh(e));function vA(e,t,n,r,a,s){let i=a.strideHeight,o=a.strideWidth,l=a.dilationHeight,u=a.dilationWidth,h=a.effectiveFilterHeight,p=a.effectiveFilterWidth,d=a.padInfo.top,c=a.padInfo.left,f="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=iI(a.outShape,n),g=m.values,y=a.outShape[1]*a.outShape[2]*a.outShape[3],b=a.outShape[2]*a.outShape[3],x=a.outShape[3];for(let t=0;t<a.batchSize;++t){let n=t*y,m=t*r[0];for(let t=0;t<a.inChannels;++t)for(let y=0;y<a.outHeight;++y){let k=y*i-d,v=Math.max(0,k),w=Math.min(a.inHeight,h+k),I=n+y*b;for(let n=0;n<a.outWidth;++n){let i=n*o-c,h=Math.max(0,i),d=Math.min(a.inWidth,p+i),y=f,b=0,k=0;for(let n=v;n<w;n+=l){let a=m+n*r[1];for(let n=h;n<d;n+=u){let i=a+n*r[2],o=e[i+t];"max"===s&&o>y?y=o:"avg"===s&&(b+=o,k++)}if(isNaN(y))break}let S=I+n*x+t;g[S]="avg"===s?b/k:y}}}return m}function vR(e,t,n,r,a=!1,s=!1){let i=iI(r.outShape,"int32"),o=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterHeight,d=r.effectiveFilterWidth,c=r.padInfo.top,f=r.padInfo.left,m=iI(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){let g=n*o-c,y=g;for(;y<0;)y+=u;let b=Math.min(r.inHeight,p+g);for(let o=0;o<r.outWidth;++o){let p=o*l-f,c=p;for(;c<0;)c+=h;let x=Math.min(r.inWidth,d+p),k=Number.NEGATIVE_INFINITY,v=-1;for(let n=y;n<b;n+=u){let i=n-g;for(let o=c;o<x;o+=h){let l=o-p,u=m.get(e,n,o,t);u>k&&(k=u,v=a?s?((e*r.inHeight+n)*r.inWidth+o)*r.inChannels+t:(n*r.inWidth+o)*r.inChannels+t:i*d+l)}}i.set(v,e,n,o,t)}}return i}function vF(e,t,n,r,a,s){let i=a.strideDepth,o=a.strideHeight,l=a.strideWidth,u=a.dilationDepth,h=a.dilationHeight,p=a.dilationWidth,d=a.effectiveFilterDepth,c=a.effectiveFilterHeight,f=a.effectiveFilterWidth,m=a.padInfo.front,g=a.padInfo.top,y=a.padInfo.left,b="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=iI(a.outShape,n),k=x.values,v=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],w=a.outShape[2]*a.outShape[3]*a.outShape[4],I=a.outShape[3]*a.outShape[4],S=a.outShape[4];for(let t=0;t<a.batchSize;++t){let n=t*v,x=t*r[0];for(let t=0;t<a.inChannels;++t)for(let v=0;v<a.outDepth;++v){let N=v*i-m,T=N;for(;T<0;)T+=u;let C=Math.min(a.inDepth,d+N),$=n+v*w;for(let n=0;n<a.outHeight;++n){let i=n*o-g,d=i;for(;d<0;)d+=h;let m=Math.min(a.inHeight,c+i),v=$+n*I;for(let n=0;n<a.outWidth;++n){let i=n*l-y,o=i;for(;o<0;)o+=p;let c=Math.min(a.inWidth,f+i),g=v+n*S,w=b,I=0,N=0;for(let n=T;n<C;n+=u){let a=x+n*r[1];for(let n=d;n<m;n+=h){let i=a+n*r[2];for(let n=o;n<c;n+=p){let a=i+n*r[3],o=e[a+t];if("max"===s&&o>w?w=o:"avg"===s&&(I+=o,N++),isNaN(w))break}if(isNaN(w))break}if(isNaN(w))break}let $=g+t;k[$]="avg"===s?I/N:w}}}}return x}function vD(e,t,n,r,a){let s=oF.isSliceContinous(r,t,n),i=rX.sizeFromShape(n),o=rX.computeStrides(r);if(s){let n=oF.computeFlatOffset(t,o);return"string"===a?e.slice(n,n+i):e.subarray(n,n+i)}let l="string"===a?ch.fromUint8ToStringArray(e):e,u=iI(r,a,l),h=iI(n,a);for(let e=0;e<h.size;++e){let n=h.indexToLoc(e),r=n.map((e,n)=>e+t[n]);h.set(u.get(...r),...n)}return"string"===a?ch.fromStringArrayToUint8(h.values):h.values}function v_(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,size:i}=r;k0(a,"slice");let[o,l]=oF.parseSliceParams(a,s,i);oF.assertParamsValid(a,o,l);let u=n.data.get(a.dataId).values,h=vD(u,o,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,h)}function vO(e,t,n,r,a){let s=rX.sizeFromShape(r),i=rX.makeZerosTypedArray(a,n);for(let n=0;n<e.length;n++){let r=e[n];if(r<0)throw Error("Input x must be non-negative!");r>=a||(s>0?i[r]+=t[n]:i[r]+=1)}return i}function vM(e,t,n,r=!1){let a=e.shape[0],s=e.shape[1],i=iI([a,n],t.dtype);for(let o=0;o<a;o++)for(let a=0;a<s;a++){let s=e.get(o,a);if(s<0)throw Error("Input x must be non-negative!");s>=n||(r?i.set(1,o,s):t.size>0?i.set(i.get(o,s)+t.get(o,a),o,s):i.set(i.get(o,s)+1,o,s))}return i}let vL=vr(e=>Math.ceil(e)),vz=k4(td,vL),vP=k3(tc,(e,t)=>e>t.clipValueMax?t.clipValueMax:e<t.clipValueMin?t.clipValueMin:e);function vB(e,t,n,r){let a=rX.getArrayFromDType(n,rX.sizeFromShape(t));if(r&&"string"!==n){let t=0;e.forEach(e=>{let n=rX.sizeFromShape(e.shape);a.set(e.vals,t),t+=n})}else{let r=0;e.forEach(e=>{let s="string"===n?ch.fromUint8ToStringArray(e.vals):e.vals,i=0;for(let n=0;n<e.shape[0];++n){let o=n*t[1]+r;for(let t=0;t<e.shape[1];++t)a[o+t]=s[i++]}r+=e.shape[1]})}return a}function vW(e){let{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.imag,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}function vV(e){let{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,s=rX.parseAxisParam(a,t[0].shape)[0],i=t.map(e=>e.shape);ch.assertParamsConsistent(i,s);let o=ch.computeOutShape(t.map(e=>e.shape),s);if(0===rX.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);let l=t.filter(e=>rX.sizeFromShape(e.shape)>0);if(1===l.length)return k5({inputs:{x:l[0]},backend:n});if("complex64"===l[0].dtype){let e=l.map(e=>vu({inputs:{input:e},backend:n})),t=l.map(e=>vW({inputs:{input:e},backend:n})),r=vV({inputs:e,backend:n,attrs:{axis:s}}),a=vV({inputs:t,backend:n,attrs:{axis:s}}),i=vo({inputs:{real:r,imag:a},backend:n});return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),t.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),i}let u=l.map(e=>{let t=rX.sizeFromShape(e.shape.slice(s));return vy({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),h=u.map(e=>({vals:n.data.get(e.dataId).values,shape:e.shape}));o=ch.computeOutShape(u.map(e=>e.shape),1);let p=1===u[0].shape[0],d=vB(h,o,t[0].dtype,p),c=ch.computeOutShape(l.map(e=>e.shape),s),f=n.makeTensorInfo(c,t[0].dtype,d);return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}function vU(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:h}=r;k0([a,s],"conv2d");let p=ch.convertConv2DDataFormat(l),d=ch.computeConv2DInfo(a.shape,s.shape,i,u,o,h,!1,p),c=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,y=d.padInfo.left,b=d.padInfo.top,x="channelsLast"===d.dataFormat,k=new aO(d.outShape,a.dtype),v=rX.computeStrides(a.shape),w=rX.computeStrides(s.shape),I=v[0],S=x?v[1]:v[2],N=x?v[2]:1,T=x?1:v[1],C=k.strides[0],$=x?k.strides[1]:k.strides[2],E=x?k.strides[2]:1,A=x?1:k.strides[1],R=n.data.get(a.dataId).values,F=n.data.get(s.dataId).values,D=k.values;for(let e=0;e<d.batchSize;++e){let t=e*I,n=e*C;for(let e=0;e<d.outHeight;++e){let r=n+e*$,a=e*d.strideHeight-b;for(let e=0;e<c;++e){let n=a+e*m;if(n<0||n>=d.inHeight)continue;let s=e*w[0],i=t+n*S;for(let e=0;e<d.outWidth;++e){let t=r+e*E,n=e*d.strideWidth-y;for(let e=0;e<f;++e){let r=n+e*g;if(r<0||r>=d.inWidth)continue;let a=s+e*w[1],o=i+r*N,l=a;for(let e=0;e<d.inChannels;++e){let n=R[o+e*T];for(let e=0;e<d.outChannels;++e)D[t+e*A]+=n*F[l+e];l+=d.outChannels}}}}}}return n.makeTensorInfo(k.shape,k.dtype,D)}let vG=k3(tI,e=>Math.cos(e)),vH=k3(tS,e=>Math.cosh(e));function vq(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=r;k0([a,s],"depthwiseConv2DNative");let h=rX.computeStrides(a.shape),p=rX.computeStrides(s.shape),d=l;null==d&&(d=[1,1]),rX.assert(ch.eitherStridesOrDilationsAreOne(i,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`);let c=ch.computeConv2DInfo(a.shape,s.shape,i,d,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=c,x=b.left,k=b.top,v=c.outChannels/c.inChannels,w=new aO(c.outShape,a.dtype),I=n.data.get(a.dataId).values,S=n.data.get(s.dataId).values,N=w.values;for(let e=0;e<c.batchSize;++e){let t=e*h[0],n=e*w.strides[0];for(let e=0;e<c.outHeight;++e){let r=n+e*w.strides[1],a=e*c.strideHeight-k;for(let e=0;e<f;++e){let n=a+e*g;if(n<0||n>=c.inHeight)continue;let s=e*p[0],i=t+n*h[1];for(let e=0;e<c.outWidth;++e){let t=r+e*w.strides[2],n=e*c.strideWidth-x;for(let e=0;e<m;++e){let r=n+e*y;if(r<0||r>=c.inWidth)continue;let a=s+e*p[1],o=i+r*c.inChannels,l=t,u=a;for(let e=0;e<c.inChannels;++e){let t=I[o+e];for(let e=0;e<v;++e)N[l+e]+=t*S[u+e];l+=v,u+=v}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}let vj=k7((e,t)=>e*t),vK=vc((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n})),vX=vd(nN,vj,vK);function vY(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{axis:i,keepDims:o}=a;k0(s,"sum"),t="bool"===s.dtype?vp({inputs:{x:s},backend:r,attrs:{dtype:"int32"}}):k5({inputs:{x:s},backend:r});let l=t.shape.length,u=rX.parseAxisParam(i,t.shape),h=ch.getAxesPermutation(u,l),p=u,d=t;null!=h&&(d=vI({inputs:{x:t},backend:r,attrs:{perm:h}}),p=ch.getInnerMostAxes(p.length,l)),ch.assertAxesAreInnerMostDims("sum",p,d.shape.length);let[c,f]=ch.computeOutAndReduceShapes(d.shape,p),m=ch.upcastType(d.dtype,"int32"),g=vl(r,c,m),y=rX.sizeFromShape(f),b=r.data.get(g.dataId).values,x=r.data.get(d.dataId).values;for(let e=0;e<b.length;++e){let t=e*y,n=0;for(let e=0;e<y;++e)n+=x[t+e];b[e]=n}if(o){let e=ch.expandShapeToKeepDim(g.shape,u),t=g;g=vy({inputs:{x:g},backend:r,attrs:{shape:e}}),r.disposeIntermediateTensorInfo(t)}return r.disposeIntermediateTensorInfo(t),null!=h&&r.disposeIntermediateTensorInfo(d),g}let vZ=k7((e,t)=>e===t?1:0),vJ=vd(tV,vZ,null,"bool"),vQ=ch.ERF_P,v0=ch.ERF_A1,v1=ch.ERF_A2,v2=ch.ERF_A3,v3=ch.ERF_A4,v4=ch.ERF_A5,v6=k3(tW,e=>{let t=Math.sign(e),n=Math.abs(e),r=1/(1+vQ*n);return t*(1-((((v4*r+v3)*r+v2)*r+v1)*r+v0)*r*Math.exp(-n*n))}),v5=vr(e=>Math.exp(e)),v8=k4(tU,v5,"float32");function v7(e){let{inputs:t,backend:n,attrs:r}=e,{input:a}=t,{dim:s}=r,i=a.shape.length,o=a.shape.slice(),l=s;return s<0&&(rX.assert(-(i+1)<=s,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+s+1),o.splice(l,0,1),vy({inputs:{x:a},backend:n,attrs:{shape:o}})}let v9=vr(e=>Math.expm1(e)),we=k4(tH,v9),wt=k7((e,t)=>e/t),wn=vd(tL,wt),wr={kernelName:tL,backendName:"cpu",kernelFunc:wn},wa=k7((e,t)=>e-t),ws=vc((e,t,n,r)=>({real:e-n,imag:t-r})),wi=vd(rg,wa,ws);function wo(e,t,n){let r=e.shape,a=r[0],s=r[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[a,s],h=rX.sizeFromShape(u),p=rX.getTypedArrayFromDType("float32",h),d=rX.getTypedArrayFromDType("float32",h);for(let e=0;e<a;e++){let r=v_({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,s]}}),a=v_({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,s]}}),i=vo({inputs:{real:r,imag:a},backend:n}),{real:u,imag:h}=function(e,t,n){let r=rX.sizeFromShape(e.shape),a=n.data.get(e.dataId),s=n.data.get(a.complexTensorInfos.real.dataId).values,i=n.data.get(a.complexTensorInfos.imag.dataId).values;if((r&r-1)==0){let a=function e(t,n,r,a,s){if(1===r)return{real:t,imag:n};let i=ch.mergeRealAndImagArrays(t,n),o=r/2,l=ch.complexWithEvenIndex(i),u=l.real,h=l.imag,p=[u.length],d=s.makeTensorInfo(p,"float32",u),c=s.makeTensorInfo(p,"float32",h),f=vo({inputs:{real:d,imag:c},backend:s}),m=ch.complexWithOddIndex(i),g=m.real,y=m.imag,b=[g.length],x=s.makeTensorInfo(b,"float32",g),k=s.makeTensorInfo(b,"float32",y),v=vo({inputs:{real:x,imag:k},backend:s}),w=e(u,h,o,a,s),I=w.real,S=w.imag,N=[I.length],T=s.makeTensorInfo(N,"float32",I),C=s.makeTensorInfo(N,"float32",S),$=vo({inputs:{real:T,imag:C},backend:s}),E=e(g,y,o,a,s),A=E.real,R=E.imag,F=[A.length],D=s.makeTensorInfo(F,"float32",A),_=s.makeTensorInfo(F,"float32",R),O=vo({inputs:{real:D,imag:_},backend:s}),M=ch.exponents(r,a),L=[M.real.length],z=s.makeTensorInfo(L,"float32",M.real),P=s.makeTensorInfo(L,"float32",M.imag),B=vo({inputs:{real:z,imag:P},backend:s}),W=vX({inputs:{a:B,b:O},backend:s}),V=vg({inputs:{a:$,b:W},backend:s}),U=wi({inputs:{a:$,b:W},backend:s}),G=vu({inputs:{input:V},backend:s}),H=vu({inputs:{input:U},backend:s}),q=vW({inputs:{input:V},backend:s}),j=vW({inputs:{input:U},backend:s}),K=vV({inputs:[G,H],backend:s,attrs:{axis:0}}),X=vV({inputs:[q,j],backend:s,attrs:{axis:0}}),Y=s.data.get(K.dataId).values,Z=s.data.get(X.dataId).values;return s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(c),s.disposeIntermediateTensorInfo(f),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(k),s.disposeIntermediateTensorInfo(v),s.disposeIntermediateTensorInfo(T),s.disposeIntermediateTensorInfo(C),s.disposeIntermediateTensorInfo($),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(O),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(K),s.disposeIntermediateTensorInfo(X),{real:Y,imag:Z}}(s,i,r,t,n),o=[e.shape[0],e.shape[1]];if(t){let e=n.makeTensorInfo(o,"float32",a.real),t=n.makeTensorInfo(o,"float32",a.imag),s=n.makeTensorInfo([],"float32",rX.createScalarValue(r,"float32")),i=k5({inputs:{x:s},backend:n}),l=wr.kernelFunc({inputs:{a:e,b:s},backend:n}),u=wr.kernelFunc({inputs:{a:t,b:i},backend:n}),h=n.data.get(l.dataId).values,p=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:h,imag:p}}return a}{let e=ch.mergeRealAndImagArrays(s,i),n=function(e,t,n){let r=new Float32Array(2*t);for(let a=0;a<t;a++){let s=0,i=0;for(let r=0;r<t;r++){let o=ch.exponent(a*r,t,n),l=ch.getComplexWithIndex(e,r);s+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(s/=t,i/=t),ch.assignToTypedArray(r,s,i,a)}return r}(e,r,t);return ch.splitRealAndImagArrays(n)}}(i,t,n),c=ch.mergeRealAndImagArrays(u,h);for(let t=0;t<s;t++){let n=ch.getComplexWithIndex(c,t);p[e*s+t]=n.real,d[e*s+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i)}let c=n.makeTensorInfo(u,"float32",p),f=n.makeTensorInfo(u,"float32",d),m=vo({inputs:{real:c,imag:f},backend:n});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(f),m}function wl(e){let{backend:t,attrs:n}=e,{shape:r,value:a,dtype:s}=n,i=s||rX.inferDtype(a),o=rX.getArrayFromDType(i,rX.sizeFromShape(r));return function(e,t,n){e.fill(t)}(o,a,0),t.makeTensorInfo(r,i,o)}let wu=vr(e=>Math.floor(e)),wh=k4(tX,wu),wp=k7((e,t)=>Math.floor(e/t)),wd=vd(tY,wp,null,"int32");function wc(e,t,n,r,a,s,i,o,l){let u=iI([r,s],n);for(let n=0;n<r;n++){let r=[],h=0;for(let t=0;t<a;t++){let s=e[n*a+t];h+=s*i[t],r.push(s)}if(h<0||h>=l/s)throw Error(`Invalid indices: ${r} does not index into ${o}`);for(let e=0;e<s;e++)u.values[n*s+e]=t.get(...t.indexToLoc(h*s+e))}return u}function wf(e,t,n){let r=iI(n,e.dtype);for(let n=0;n<r.size;++n){let a=r.indexToLoc(n),s=a.slice(),i=s[0],o=s[2],l=t.locToIndex([i,o]);s[2]=t.values[l];let u=e.locToIndex(s);0<=u&&u<e.values.length&&(r.values[n]=e.values[u])}return r}let wm=k7((e,t)=>e>t?1:0),wg=vd(t0,wm,null,"bool"),wy=k7((e,t)=>e>=t?1:0),wb=vd(t1,wy,null,"bool"),wx=k3(t6,e=>Number.isFinite(e)?1:0,"bool"),wk=k3(t5,e=>Math.abs(e)===1/0?1:0,"bool"),wv=k3(t8,e=>Number.isNaN(e)?1:0,"bool"),ww=k7((e,t)=>e<t?1:0),wI=vd(t9,ww,null,"bool"),wS=k7((e,t)=>e<=t?1:0),wN=vd(ne,wS,null,"bool");function wT(e,t,n){let r=(t-e)/(n-1),a=rX.makeZerosTypedArray(n,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+r;return a}let wC=vr(e=>Math.log(e)),w$=k4(nn,wC),wE=k3(nr,e=>Math.log1p(e)),wA=k7((e,t)=>e&&t),wR=vd(na,wA,null,"bool"),wF=k3(ns,e=>e?0:1,"bool"),wD=k7((e,t)=>e||t),w_=vd(ni,wD,null,"bool");function wO(e,t,n,r){let a=rX.getTypedArrayFromDType(r,rX.sizeFromShape(n));for(let n=0;n<a.length;++n){let r=n*t,s=e[r];for(let n=0;n<t;++n){let t=e[r+n];(Number.isNaN(t)||t>s)&&(s=t)}a[n]=s}return a}function wM(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reductionIndices:s,keepDims:i}=r,o=a.shape,l=o.length,u=rX.parseAxisParam(s,o),h=u,p=ch.getAxesPermutation(h,l),d=n.data.get(a.dataId).values;if(null!=p){let e=Array(l);for(let t=0;t<e.length;t++)e[t]=o[p[t]];d=vw(d,o,a.dtype,p,e),h=ch.getInnerMostAxes(h.length,l),o=e}k0(a,"max"),ch.assertAxesAreInnerMostDims("max",h,l);let[c,f]=ch.computeOutAndReduceShapes(o,h),m=rX.sizeFromShape(f),g=wO(d,m,c,a.dtype),y=n.write(g,c,a.dtype),b=c;if(i){let e=ch.expandShapeToKeepDim(c,u);b=e}return{dataId:y,shape:b,dtype:a.dtype}}let wL=k7((e,t)=>Math.max(e,t)),wz=vd(nc,wL),wP=k7((e,t)=>Math.min(e,t)),wB=vd(nv,wP),wW=k7((e,t)=>{let n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}),wV=vd(nI,wW);function wU(e){let{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:s}=r,i=a.shape.length,o=s;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);let l=rX.parseAxisParam([o],a.shape),u=wM({inputs:{x:a},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),h=ch.expandShapeToKeepDim(u.shape,l),p=vy({inputs:{x:u},backend:n,attrs:{shape:h}}),d=wi({inputs:{a:a,b:p},backend:n}),c=v8({inputs:{x:d},backend:n}),f=vY({inputs:{x:c},backend:n,attrs:{axis:l,keepDims:!1}}),m=vy({inputs:{x:f},backend:n,attrs:{shape:h}}),g=wn({inputs:{a:c,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}function wG(e,t,n){let r=rX.createScalarValue(-1,n);return vj([],t,r,e,n)}let wH=fm.nonMaxSuppressionV3Impl,wq=fm.nonMaxSuppressionV4Impl,wj=fm.nonMaxSuppressionV5Impl,wK=k7((e,t)=>e!==t?1:0),wX=vd(nC,wK,null,"bool");function wY(e){let{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw Error("zerosLike is not supported for string tensors");if("complex64"!==r.dtype)return wl({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}});{let e=vu({inputs:{input:r},backend:n}),t=wY({inputs:{x:e},backend:n}),a=vW({inputs:{input:r},backend:n}),s=wY({inputs:{x:a},backend:n}),i=vo({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),i}}function wZ(e){let{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return v7({inputs:{input:t[0]},backend:n,attrs:{dim:a}});let s=t[0].shape,i=t[0].dtype;t.forEach(e=>{rX.assertShapesMatch(s,e.shape,"All tensors passed to stack must have matching shapes"),rX.assert(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});let o=[],l=t.map(e=>{let t=v7({inputs:{input:e},backend:n,attrs:{dim:a}});return o.push(t),t}),u=vV({inputs:l,backend:n,attrs:{axis:a}});return o.forEach(e=>n.disposeIntermediateTensorInfo(e)),u}let wJ={kernelName:n_,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,constantValue:i}=r;k0(a,"pad");let o=s.map((e,t)=>e[0]+a.shape[t]+e[1]),l=s.map(e=>e[0]),u=n.data.get(a.dataId).values,h=rX.sizeFromShape(a.shape),p=a.shape.length,d=rX.computeStrides(a.shape),c=rX.sizeFromShape(o),f=o.length,m=rX.computeStrides(o),g=rX.getTypedArrayFromDType(a.dtype,c);0!==i&&g.fill(i);for(let e=0;e<h;e++){let t=rX.indexToLoc(e,p,d),n=t.map((e,t)=>e+l[t]),r=rX.locToIndex(n,f,m);g[r]=u[e]}let y=n.write(g,o,a.dtype);return{dataId:y,shape:o,dtype:a.dtype}}},wQ=k7((e,t)=>Math.pow(e,t)),w0=vd(nM,wQ);function w1(e,t,n,r){let[a,s]=ch.computeOutAndReduceShapes(e,r),i=aU(t,"int32"),o=rX.makeZerosTypedArray(rX.sizeFromShape(a),i),l=rX.sizeFromShape(s);for(let e=0;e<o.length;++e){let t=e*l,r=1;for(let e=0;e<l;++e)r*=n[t+e];o[e]=r}return{outVals:o,outShape:a,outDtype:i}}function w2(e,t){let n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function w3(e,t,n,r,a,s,i,o){if(0===e.length)throw Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw Error("Split tensors must not be scalars");let l=t[0][0]-1;if(!function(e,t,n){e.forEach((e,r)=>{if(e<0||e>=n){let a=rX.indexToLoc(r,t.length,rX.computeStrides(t)).join(",");throw Error(`indices[${a}] = ${e} is not in [0, ${n})`)}})}(s,i,l),0===r.length)throw Error("params.rank must be nonzero");let u=r[0],{outSplits:h,valueSlices:p,numValues:d}=function(e,t,n,r){let a=[],s=0,i=t.length-1+n.length,o=Array(i).fill(null).map(()=>[0]);!function(e,t){for(let n=0;n<e.length;++n){let r=e[n],a=n===e.length-1?t:e[n+1].length;if(0===r.length)throw Error("Ragged splits may not be empty");if(r[0]<0)throw Error("Ragged splits must be non-negative");if(r[r.length-1]>a)throw Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw Error("Ragged splits must be sorted in ascending order")}}(n,r);let l=1;for(let e=0;e<t.length-1;++e){l*=t[e];let n=t[e+1];for(let t=1;t<l+1;++t)o[e].push(t*n)}for(let r=0;r<e.length;++r){let i=e[r],l=e[r]+1;for(let e=0;e<n.length;++e){let r=n[e],a=e+t.length-1;if(a>=0){let e=o[a],t=e[e.length-1]-r[i];for(let e=i;e<l;++e)o[a].push(r[e+1]+t)}i=r[i],l=r[l]}l!==i&&(a.push([i,l]),s+=l-i)}return{outSplits:o,valueSlices:a,numValues:s}}(s,i,e,u),c=function(e){let t=[];for(let n=0;n<e.length;++n){let r=e[n].length,a=rX.getArrayFromDType("int32",r);t.push(a),e[n].forEach((e,t)=>a[t]=e)}return t}(h),f=function(e,t,n,r,a){let s=t.slice();s[0]=a;let i=rX.getArrayFromDType(n,rX.sizeFromShape(s)),o=e.length,l=0===o?0:o/t[0];return!function(e,t,n,r,a,s){let i=w2(t,2)[1],o=w2(s,2)[1],l=0;for(let t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<r;++t)a[l*o+t]=e[n*i+t];++l}}(e,t,r,l,i,s),[i,s]}(n,r,a,p,d);return[c,f[0],f[1]]}var w4=ch.RowPartitionType;class w6{constructor(e,t,n,r,a,s,i,o,l,u){this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=a,this.defaultValue=s,this.defaultValueShape=i,this.rowPartitionValues=o,this.rowPartitionValuesShapes=l,this.rowPartitionTypes=ch.getRowPartitionTypesHelper(u),this.raggedRank=ch.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===w4.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===w4.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){let t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case w4.VALUE_ROWIDS:return w6.getMaxWidthValueRowID(t);case w4.ROW_SPLITS:return w6.getMaxWidthRowSplit(t);default:throw Error(`Cannot handle partition type ${w4[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){let t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){let t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){let t=e.length;if(0===t)return 0;let n=0,r=e[0],a=0;for(let s=1;s<t;++s){let t=e[s];t!==r&&(r=t,a=Math.max(s-n,a),n=s)}return Math.max(t-n,a)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return w8(e,n)}calculateOutputSize(e){let t=this.valuesShape,n=this.defaultValueShape;ch.validateDefaultValueShape(n,t);let r=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=ch.combineRaggedTensorToTensorShapes(this.raggedRank,r,t);a[0]<0&&(a[0]=e);for(let e=1;e<=this.raggedRank;++e)a[e]<0&&(a[e]=this.getMaxWidth(e));return a}calculateFirstParentOutputIndex(e,t,n){let r=Math.min(e,n),a=[],s=0;for(let e=0;e<r;++e,s+=t)a.push(s);for(let t=r;t<e;++t)a.push(-1);return rX.assert(a.length===e,()=>"Final length of result must be equal to firstDimension."),a}calculateOutputIndexRowSplit(e,t,n,r){let a=e.length,s=[];for(let i=0;i<a-1;++i){let a=e[i+1]-e[i],o=Math.min(r,a),l=t[i];-1===l&&(o=0);for(let e=0;e<o;++e)s.push(l),l+=n;for(let e=0;e<a-o;++e)s.push(-1)}if(a>0&&s.length!==e[a-1])throw Error("Invalid row split size.");return s}calculateOutputIndexValueRowID(e,t,n,r){let a=e.length,s=[];if(0===a)return[];let i=0,o=e[0];if(o>=t.length)throw Error(`Got currentValueRowId=${o}, which is not less than ${t.length}`);let l=t[o];s.push(l);for(let u=1;u<a;++u){let a=e[u];if(a===o)l>=0&&(++i<r?l+=n:l=-1);else{if(i=0,o=a,a>=t.length)throw Error(`Got nextValueRowId=${a} which is not less than ${t.length}`);l=t[a]}s.push(l)}if(s.length!==e.length)throw Error("Invalid row ids.");return s}calculateOutputIndex(e,t,n,r){let a=this.getRowPartitionTensor(e),s=this.getRowPartitionTypeByDimension(e);switch(s){case w4.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,t,n,r);case w4.ROW_SPLITS:if(a.length-1>t.length)throw Error(`Row partition size is greater than output size: ${a.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(a,t,n,r);default:throw Error(`Unsupported partition type: ${w4[s]}`)}}getFirstDimensionSize(){let e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw Error("No row_partition_types given.");let t=this.rowPartitionTypes[0];switch(t){case w4.FIRST_DIM_SIZE:return e[0];case w4.VALUE_ROWIDS:throw Error("Cannot handle VALUE_ROWIDS in first dimension.");case w4.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw Error(`Cannot handle type ${w4[t]}`)}}compute(){let e=this.rowPartitionValues[0];if(e.length<=0)throw Error("Invalid first partition input. Tensor requires at least one element.");let t=this.getFirstDimensionSize(),n=this.calculateOutputSize(t),r=Array(this.raggedRank+1);r[r.length-1]=1;for(let e=r.length-2;e>=0;--e)r[e]=r[e+1]*n[e+1];let a=w8(n,!1),s=rX.getArrayFromDType(this.valuesDType,rX.sizeFromShape(a)),i=r[0]*n[0];if(i>0){let e=this.calculateFirstParentOutputIndex(t,r[0],n[0]);for(let t=1;t<=this.raggedRank;++t){let a=this.calculateOutputIndex(t-1,e,r[t],n[t]);e=a}this.setOutput(this.raggedRank,e,s,a)}return[a,s]}setOutput(e,t,n,r){if(0===n.length)return;let a=this.values,s=r.slice();s=s.slice(e+1);let i=rX.sizeFromShape(s),o=t.length,l=this.defaultValue;if(l.length!==i&&1!==l.length){let e=this.defaultValueShape;i7(()=>{let t=l5(l,e),n=up(t,s);l=n.dataSync()})}let u=0,h=0,p=0;for(let e=0;e<=o;++e){let r=e<o?t[e]:-1;if(r===p){++p;continue}if(h<p){let e=a.subarray(u*i),t=n.subarray(h*i),r=(p-h)*i;w5(t,e,r)}if(e>=o){let e=n.length;r=Math.floor(e/i)}if(r>p){if(1===this.defaultValue.length)n.subarray(p*i,r*i).fill(this.defaultValue[0]),p=r;else for(;r>p;){let e=n.slice(p*i);w5(e,l,i),++p}}r<0?(u=e+1,h=p):(u=e,p=(h=p)+1)}}}function w5(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function w8(e,t){let n=[];for(let r of e){if(r<0){if(!t)throw Error(`Dimension ${r} must be >= 0`);if(r<-1)throw Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}function w7(e,t,n,r,a,s,i,o,l,u){return new w6(e,t,n,r,a,s,i,o,l,u).compute()}function w9(e,t,n,r){let a=e===t,s=e<t&&n<0,i=t<e&&n>1;if(a||s||i)return rX.makeZerosTypedArray(0,r);let o=Math.abs(Math.ceil((t-e)/n)),l=rX.makeZerosTypedArray(o,r);t<e&&1===n&&(n=-1),l[0]=e;for(let e=1;e<l.length;e++)l[e]=l[e-1]+n;return l}let Ie=k3(nU,e=>1/e),It=k3(nJ,e=>{let t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}),In=vr(e=>1/Math.sqrt(e)),Ir=k4(nQ,In);function Ia(e,t,n,r,a,s,i,o,l,u){let h=[r/a,a],p=e.values,d=t.values;if(0===r)return iI(n,t.dtype);let c=iI(h,t.dtype);"string"==typeof l?c.values.fill(l):"number"==typeof l?c.values.fill(l):"boolean"==typeof l&&c.values.fill(+l);for(let e=0;e<s;e++){let s=[],l=0;for(let t=0;t<i;t++){let n=p[e*i+t];s.push(n),l+=n*o[t]}if(l<0||l>=r/a)throw Error(`Invalid indices: ${s} does not index into ${n}`);for(let n=0;n<a;n++)u?c.values[l*a+n]+=d[e*a+n]:c.values[l*a+n]=0===t.rank?d[0]:d[e*a+n]}return c}let Is=ch.SELU_SCALEALPHA,Ii=ch.SELU_SCALE,Io=k3(n3,e=>e>=0?Ii*e:Is*(Math.exp(e)-1)),Il=k3(n8,e=>e<0?-1:e>0?1:0),Iu=k3(n6,e=>Math.sin(e)),Ih=k3(n5,e=>Math.sinh(e)),Ip=Math.log(11920928955078125e-23)+2,Id=k3(n9,e=>{let t=Math.exp(e);return e<Ip?t:e>-Ip?e:Math.log(1+t)});function Ic(e,t,n,r,a,s,i){let o=t[0],l=s[0],u=Array(l),h=Array(o),p=t[1];if(0===l){if(0!==o)throw Error(ch.getSparseFillEmptyRowsIndicesDenseShapeMismatch(o));let e=rX.getArrayFromDType(n,0),t=rX.getArrayFromDType(a,0);return[e,[0,p],t,u,h]}let d=!0,c=0,f=Array(l).fill(0);for(let t=0;t<o;++t){let n=e[t*p];if(n<0)throw Error(ch.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=l)throw Error(ch.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,l));++f[n],d=d&&n>=c,c=n}let m=!0;for(let e=0;e<l;++e){let t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&d){for(let e=0;e<o;++e)h[e]=e;return[e,[o,p],r,u,h]}{let t=f[l-1],s=rX.getArrayFromDType(n,t*p),d=rX.getArrayFromDType(a,t),c=Array(l).fill(0);for(let t=0;t<o;++t){let n=e[t*p],a=c[n],i=(0===n?0:f[n-1])+a;c[n]++;for(let n=0;n<p;++n)s[i*p+n]=e[t*p+n];d[i]=r[t],h[t]=i}for(let e=0;e<l;++e){let t=c[e];if(0===t){let t=0===e?0:f[e-1];s[t*p+0]=e;for(let e=1;e<p;++e)s[t*p+e]=0;d[t]=i}}return[s,[t,p],d,u,h]}}function If(e,t,n,r,a){let s=rX.sizeFromShape(r),i=t[0],o=a.length,l=[],u=1,h=-1;for(let e=0;e<o;++e){let t=a[e];if(-1===t){if(-1!==h)throw Error(ch.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(h,e));h=e,l.push(1)}else{if(t<0)throw Error(ch.getSparseReshapeNegativeOutputDimErrorMessage(e,t));u*=t,l.push(t)}}if(-1!==h){if(u<=0)throw Error(ch.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());let e=Math.trunc(s/u);if(u*e!==s)throw Error(ch.getSparseReshapeInputOutputMultipleErrorMessage(r,l));l[h]=e}let p=rX.sizeFromShape(l);if(p!==s)throw Error(ch.getSparseReshapeInputOutputMismatchErrorMessage(r,l));let d=r.length,c=[];if(d>0){c[d-1]=1;for(let e=d-2;e>=0;--e)c[e]=c[e+1]*r[e+1]}let f=[];if(o>0){f[o-1]=1;for(let e=o-2;e>=0;--e)f[e]=f[e+1]*l[e+1]}let m=rX.getArrayFromDType(n,i*o);for(let t=0;t<i;++t){let n=0;for(let r=0;r<d;++r)n+=e[t*d+r]*c[r];for(let e=0;e<o;++e)m[t*o+e]=Math.trunc(n/f[e]),n%=f[e]}return[m,[i,o],l]}function Im(e,t,n,r,a,s=!1,i=0){let o=r.length,l=[t[0],e.length/t[0]],u=l[1],h=o>0?a[o-1]+1:0;if(h<0)throw Error(ch.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let p=t.slice();p[0]=h;let d=p.reduce((e,t)=>e*t,1),c=rX.getArrayFromDType(n,d);if(0===o)return h>0&&c.fill(i),[c,p];if(h<=0)throw Error(ch.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let f=0,m=1,g=0,y=a[0];for(;;){let t=0;if(m<o){if(y===(t=a[m])){++m;continue}if(y>=t)throw Error(ch.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(y<0||y>=h)throw Error(ch.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(y,h));y>g&&c.fill(i,g*u,y*u);for(let t=f;t<m;++t){let n=r[t];if(n<0||n>=l[0])throw Error(ch.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,r[t],l[0]));for(let t=0;t<u;t++)c[y*u+t]+=e[n*u+t]}if(s)for(let e=0;e<u;e++)c[y*u+e]/=m-f;if(f=m,++m,g=y+1,y=t,m>o)break}return g<h&&c.fill(i,g*u,h*u),[c,p]}let Ig=vr(e=>Math.sqrt(e)),Iy=k3(re,e=>Math.sqrt(e)),Ib=k7((e,t)=>{let n=e-t;return n*n}),Ix=vd(rh,Ib),Ik=k3(r$,(e,t)=>isNaN(e)?NaN:e>0?1:t.alpha);function Iv(e,t,n,r){let a=iI(e,t.dtype);for(let e=0;e<a.size;e++){let s=a.indexToLoc(e),i=Array(s.length);for(let e=0;e<i.length;e++)i[e]=s[e]*n[e]+r[e];a.set(t.get(...i),...s)}return a}class Iw{constructor(e,t,n,r,a,s){this.separator=rX.encodeString(e),this.nGramWidths=t,this.leftPad=rX.encodeString(n),this.rightPad=rX.encodeString(r),this.padWidth=a,this.preserveShort=s}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){let n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,a,s){for(let i=0;i<a;++i){let o;let l=this.getPadWidth(s),u=Math.max(0,l-i),h=Math.max(0,l-(a-(i+1))),p=s-(u+h),d=t+(u>0?0:i-l);o=0+u*this.leftPad.length;for(let t=0;t<p;++t)o+=e[d+t].length;o+=h*this.rightPad.length;let c=u+h+p-1;o+=c*this.separator.length,n[r+i]=new Uint8Array(o);let f=n[r+i],m=0,g=e=>e.forEach(e=>f[m++]=e);for(let e=0;e<u;++e)g(this.leftPad),g(this.separator);for(let t=0;t<p-1;++t)g(e[d+t]),g(this.separator);if(p>0){g(e[d+p-1]);for(let e=0;e<h;++e)g(this.separator),g(this.rightPad)}else{for(let e=0;e<h-1;++e)g(this.rightPad),g(this.separator);g(this.rightPad)}}}compute(e,t){let n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw Error(`First split value must be 0, got ${e}`);for(let a=1;a<r;++a){let r=t[a]>=e;if(!(r=r&&t[a]<=n))throw Error(`Invalid split value ${t[a]}, must be in [${e}, ${n}]`);e=t[a]}if(e!==n)throw Error(`Last split value must be data size. Expected ${n}, got ${e}`)}let a=r-1,s=rX.getArrayFromDType("int32",r);if(0===n||0===r){let e=Array(n);for(let e=0;e<=a;++e)s[e]=0;return[e,s]}s[0]=0;for(let e=1;e<=a;++e){let n=t[e]-t[e-1],r=0;this.nGramWidths.forEach(e=>{r+=this.getNumNGrams(n,e)}),this.preserveShort&&n>0&&0===r&&(r=1),s[e]=s[e-1]+r}let i=Array(s[a]);for(let n=0;n<a;++n){let r=t[n],a=s[n];if(this.nGramWidths.forEach(s=>{let o=t[n+1]-t[n],l=this.getNumNGrams(o,s);this.createNGrams(e,r,i,a,l,s),a+=l}),this.preserveShort&&a===s[n]){let s=t[n+1]-t[n];if(0===s)continue;let o=s+2*this.padWidth;this.createNGrams(e,r,i,a,1,o)}}return[i,s]}}function II(e,t,n,r,a,s,i,o){return new Iw(n,r,a,s,i,o).compute(e,t)}function IS(e,t,n){let r=e.length,a=[],s=0,i=0,o=Array(r);for(let l=0;l<r;++l){let r=a.length;!function(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){let a=t[0],s=e.indexOf(a);for(;-1!==s;){let t=e.subarray(0,s);n&&0===t.length||r.push(t),s=(e=e.subarray(s+1)).indexOf(a)}n&&0===e.length||r.push(e);return}let a=0;for(let s=0;s<e.length+1;s++)if(s===e.length||-1!==t.indexOf(e[s])){let t=e.subarray(a,s);n&&0===t.length||r.push(t),a=s+1}}(e[l],t,n,a);let u=a.length-r;o[l]=u,s+=u,i=Math.max(i,u)}let l=rX.getArrayFromDType("int32",2*s),u=Array(s),h=[r,i],p=0;for(let e=0;e<r;++e)for(let t=0;t<o[e];++t)l[2*p]=e,l[2*p+1]=t,u[p]=a[p],++p;return[l,u,h]}function IN(e,t){let n=rX.getArrayFromDType("int32",e.length);for(let r=0;r<e.length;++r)n[r]=rX.fingerPrint64(e[r]).modulo(t).getLowBitsUnsigned();return n}let IT=k3(ry,e=>Math.tan(e)),IC=k3(rb,e=>Math.tanh(e));function I$(e,t){let n=Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];let r=iI(n,e.dtype);for(let t=0;t<r.values.length;++t){let n=r.indexToLoc(t),a=Array(e.rank);for(let t=0;t<a.length;t++)a[t]=n[t]%e.shape[t];let s=e.locToIndex(a);r.values[t]=e.values[s]}return r}let IE=(e,t)=>{let n=t.value-e.value;return 0===n?e.index-t.index:n};function IA(e,t,n,r,a){let s=t[t.length-1],[i,o]=[e.length/s,s],l=rX.getTypedArrayFromDType(n,i*r),u=rX.getTypedArrayFromDType("int32",i*r);for(let t=0;t<i;t++){let n=t*o,s=e.subarray(n,n+o),i=Array(s.length);s.forEach((e,t)=>i[t]={value:e,index:t}),r<i.length&&(function e(t,n,r=0,a=t.length-1){for(;a>r;){if(a-r>600){let s=a-r+1,i=n-r+1,o=Math.log(s),l=.5*Math.exp(2*o/3),u=.5*Math.sqrt(o*l*(s-l)/s)*Math.sign(i-s/2),h=Math.max(r,Math.floor(n-i*l/s+u)),p=Math.min(a,Math.floor(n+(s-i)*l/s+u));e(t,n,h,p)}let s=t[n],i=r,o=a;for(rX.swap(t,r,n),IE(t[a],s)>0&&rX.swap(t,r,a);i<o;){for(rX.swap(t,i,o),i++,o--;0>IE(t[i],s);)i+=1;for(;IE(t[o],s)>0;)o-=1}0===IE(t[r],s)?rX.swap(t,r,o):(o+=1,rX.swap(t,o,a)),o<=n&&(r=o+1),n<=o&&(a=o-1)}}(i,r),i=i.slice(0,r)),a&&i.sort(IE);let h=t*r,p=l.subarray(h,h+r),d=u.subarray(h,h+r);for(let e=0;e<r;e++)p[e]=i[e].value,d[e]=i[e].index}let h=t.slice();return h[h.length-1]=r,[iI(h,n,l),iI(h,"int32",u)]}function IR(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0){if(t<=1)n=0;else{let e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}}else if(n>t-1){if(t<=1)n=0;else{let e=2*t;(n-=e*Math.trunc(n/e))>=t&&(n=e-n-1)}}return rX.clamp(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0){if(t<=1)n=0;else{let e=t-1;n+=t*(Math.trunc(-n/e)+1)}}else if(n>t-1){if(t<=1)n=0;else{let e=t-1;n-=t*Math.trunc(n/e)}}return rX.clamp(0,n,t-1)}(e,t);case"nearest":return rX.clamp(0,e,t-1);default:return e}}function IF(e,t,n,r,a,s,i,o,l,u,h){return 0<=o&&o<t&&0<=l&&l<n?e[i*r+o*a+l*s+u]:h}function ID(e,t,n,r){let a=rX.parseAxisParam(t,n)[0],s=[1,n[0],1];for(let e=0;e<a;e++)s[0]*=n[e];s[1]=n[a];for(let e=a+1;e<n.length;e++)s[2]*=n[e];let i={},o=new Int32Array(n[a]),l=new aO(s,r,e),u=[],h=1===s[0]&&1===s[2];for(let t=0;t<n[a];t++){let n;if(h)n=e[t].toString();else{let e=[];for(let n=0;n<s[0];n++)for(let r=0;r<s[2];r++)e.push(l.get(n,t,r));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{let e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}let p=s.slice();p[1]=Object.keys(i).length;let d=new aO(p,r);u.forEach((e,t)=>{for(let n=0;n<s[0];n++)for(let r=0;r<s[2];r++)d.set(l.get(n,e,r),n,t,r)});let c=n.slice();return c[a]=p[1],{outputValues:d.values,outputShape:c,indices:o}}let I_=[{kernelName:rR,backendName:"cpu",kernelFunc:function(e){let t,n,r;let{inputs:a,backend:s,attrs:i}=e,{a:o,b:l,bias:u,preluActivationWeights:h}=a,{transposeA:p,transposeB:d,activation:c,leakyreluAlpha:f}=i,m=[],g=vb({inputs:{a:o,b:l},attrs:{transposeA:p,transposeB:d},backend:s});for(let e of(t=g,u&&(n=vg({inputs:{a:t,b:u},backend:s}),m.push(t),t=n),c&&(r=vi(s,t,c,h,f),m.push(t),t=r),m))s.disposeIntermediateTensorInfo(e);return t}},{kernelName:eJ,backendName:"cpu",kernelFunc:e=>{let{x:t}=e.inputs,n=e.backend;k0(t,"abs");let r=new Float32Array(rX.sizeFromShape(t.shape)),a=n.data.get(t.dataId).values;return r=vx(a),n.makeOutput(r,t.shape,t.dtype)}},{kernelName:eQ,backendName:"cpu",kernelFunc:vk},{kernelName:e0,backendName:"cpu",kernelFunc:vv},{kernelName:e1,backendName:"cpu",kernelFunc:vg},{kernelName:e2,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e;k0(t,"addN");let r=t.map(e=>n.data.get(e.dataId).values),a=iI(t[0].shape,t[0].dtype),s=a.values;for(let e=0;e<t.length;e++){let t=r[e];for(let e=0;e<s.length;e++)s[e]+=t[e]}return n.makeTensorInfo(a.shape,a.dtype,a.values)}},{kernelName:e3,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r;k0(a,"all");let o=rX.parseAxisParam(s,a.shape),l=o,u=ch.getAxesPermutation(l,a.shape.length),h=a;null!=u&&(h=vI({inputs:{x:a},backend:n,attrs:{perm:u}}),l=ch.getInnerMostAxes(l.length,a.shape.length)),ch.assertAxesAreInnerMostDims("all",l,h.shape.length);let[p,d]=ch.computeOutAndReduceShapes(h.shape,l),c=rX.sizeFromShape(d),f=rX.makeZerosTypedArray(rX.sizeFromShape(p),h.dtype),m=n.data.get(h.dataId).values;for(let e=0;e<f.length;++e){let t=e*c,n=m[t];for(let e=0;e<c;++e){let r=m[t+e];n=n&&r}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(h);let g=n.makeTensorInfo(p,h.dtype,f);if(i){let e=ch.expandShapeToKeepDim(p,o),t=vy({inputs:{x:g},backend:n,attrs:{shape:e}});return n.disposeIntermediateTensorInfo(g),t}return g}},{kernelName:e4,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r;k0(a,"any");let o=rX.parseAxisParam(s,a.shape),l=o,u=ch.getAxesPermutation(l,a.shape.length),h=a;null!=u&&(h=vI({inputs:{x:a},backend:n,attrs:{perm:u}}),l=ch.getInnerMostAxes(l.length,a.shape.length)),ch.assertAxesAreInnerMostDims("any",l,h.shape.length);let[p,d]=ch.computeOutAndReduceShapes(h.shape,l),c=rX.sizeFromShape(d),f=rX.makeZerosTypedArray(rX.sizeFromShape(p),h.dtype),m=n.data.get(h.dataId).values;for(let e=0;e<f.length;++e){let t=e*c,n=m[t];for(let e=0;e<c;++e){let r=m[t+e];n=n||r}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(h);let g=n.makeTensorInfo(p,h.dtype,f);if(i){let e=ch.expandShapeToKeepDim(p,o),t=vy({inputs:{x:g},backend:n,attrs:{shape:e}});return n.disposeIntermediateTensorInfo(g),t}return g}},{kernelName:e6,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r;k0(a,"argMax");let i=rX.parseAxisParam(s,a.shape),o=ch.getAxesPermutation(i,a.shape.length),l=a,u=[];null!=o&&(u.push(l=vI({inputs:{x:a},backend:n,attrs:{perm:o}})),i=ch.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],ch.assertAxesAreInnerMostDims("argMax",i,l.shape.length);let[h,p]=ch.computeOutAndReduceShapes(l.shape,i),d=rX.sizeFromShape(h),c=rX.makeZerosTypedArray(d,"int32"),f=rX.sizeFromShape(p),m=n.data.get(l.dataId).values;for(let e=0;e<c.length;++e){let t=e*f,n=m[t],r=0;for(let e=0;e<f;++e){let a=m[t+e];a>n&&(n=a,r=e)}c[e]=r}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",c)}},{kernelName:e5,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r;k0(a,"argMin");let i=rX.parseAxisParam(s,a.shape),o=ch.getAxesPermutation(i,a.shape.length),l=a,u=[];null!=o&&(u.push(l=vI({inputs:{x:a},backend:n,attrs:{perm:o}})),i=ch.getInnerMostAxes(i.length,l.shape.length)),i=[i[0]],ch.assertAxesAreInnerMostDims("argMin",i,l.shape.length);let[h,p]=ch.computeOutAndReduceShapes(l.shape,i),d=rX.sizeFromShape(h),c=rX.makeZerosTypedArray(d,"int32"),f=rX.sizeFromShape(p),m=n.data.get(l.dataId).values;for(let e=0;e<c.length;++e){let t=e*f,n=m[t],r=0;for(let e=0;e<f;++e){let a=m[t+e];a<n&&(n=a,r=e)}c[e]=r}return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",c)}},{kernelName:e8,backendName:"cpu",kernelFunc:vS},{kernelName:e7,backendName:"cpu",kernelFunc:vN},{kernelName:e9,backendName:"cpu",kernelFunc:vT},{kernelName:tt,backendName:"cpu",kernelFunc:v$},{kernelName:te,backendName:"cpu",kernelFunc:vE},{kernelName:tn,backendName:"cpu",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s}=n;k0(s,"avgPool");let{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=a;rX.assert(ch.eitherStridesOrDilationsAreOne(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);let h=ch.computePool2DInfo(s.shape,i,o,1,l,u);if(1===h.filterWidth&&1===h.filterHeight&&rX.arraysEqual(h.inShape,h.outShape))t=k5({inputs:{x:s},backend:r});else{let e=r.data.get(s.dataId).values,n=rX.computeStrides(s.shape),a=vA(e,s.shape,s.dtype,n,h,"avg");t=r.makeTensorInfo(h.outShape,s.dtype,a.values)}return t}},{kernelName:ta,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=r;k0(a,"avgPool3d");let h=ch.computePool3DInfo(a.shape,s,i,1,o,l,u),p=n.data.get(a.dataId).values,d=vF(p,a.shape,a.dtype,rX.computeStrides(a.shape),h,"avg");return n.makeTensorInfo(d.shape,"float32",d.values)}},{kernelName:ts,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=r;k0([a,s],"avgPool3DGrad");let h=ch.computePool3DInfo(s.shape,i,o,1,l,u),p=h.strideDepth,d=h.strideHeight,c=h.strideWidth,f=h.filterDepth,m=h.filterHeight,g=h.filterWidth,y=h.dilationDepth,b=h.dilationHeight,x=h.dilationWidth,k=h.effectiveFilterDepth,v=h.effectiveFilterHeight,w=h.effectiveFilterWidth,I=k-1-h.padInfo.front,S=w-1-h.padInfo.left,N=v-1-h.padInfo.top,T=iI(s.shape,"float32"),C=1/(f*m*g),$=n.bufferSync(a);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let r=0;r<h.inHeight;++r)for(let a=0;a<h.inWidth;++a){let s=n-I,i=r-N,o=a-S,l=0;for(let n=0;n<k;n+=y){let r=(s+n)/p;if(!(r<0)&&!(r>=h.outDepth)&&Math.floor(r)===r)for(let n=0;n<v;n+=b){let a=(i+n)/d;if(!(a<0)&&!(a>=h.outHeight)&&Math.floor(a)===a)for(let n=0;n<w;n+=x){let s=(o+n)/c;if(s<0||s>=h.outWidth||Math.floor(s)!==s)continue;let i=$.get(e,r,a,s,t);l+=i}}}T.set(l*C,e,n,r,a,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}},{kernelName:tr,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t;k0([a,s],"avgPoolGrad");let{filterSize:i,strides:o,pad:l}=r,u=ch.computePool2DInfo(s.shape,i,o,1,l),h=u.strideHeight,p=u.strideWidth,d=u.filterHeight,c=u.filterWidth,f=u.dilationHeight,m=u.dilationWidth,g=u.effectiveFilterHeight,y=u.effectiveFilterWidth,b=y-1-u.padInfo.left,x=g-1-u.padInfo.top,k=iI(s.shape,"float32"),v=1/(d*c),w=n.data.get(a.dataId).values,I=iI(a.shape,"float32",w);for(let e=0;e<u.batchSize;++e)for(let t=0;t<u.inChannels;++t)for(let n=0;n<u.inHeight;++n)for(let r=0;r<u.inWidth;++r){let a=n-x,s=r-b,i=0;for(let n=0;n<g;n+=f){let r=(a+n)/h;if(!(r<0)&&!(r>=u.outHeight)&&Math.floor(r)===r)for(let n=0;n<y;n+=m){let a=(s+n)/p;if(a<0||a>=u.outWidth||Math.floor(a)!==a)continue;let o=I.get(e,r,a,t);i+=o}}k.set(i*v,e,n,r,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},{kernelName:ti,backendName:"cpu",kernelFunc:vb},{kernelName:tZ,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,scale:s,offset:i,mean:o,variance:l}=t;rX.assert(o.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),rX.assert(null==i||o.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),rX.assert(null==s||o.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),k0([a,o,l,s,i],"batchNorm");let{varianceEpsilon:u}=r;null==u&&(u=.001);let h=n.data.get(a.dataId).values,p=n.data.get(o.dataId).values,d=n.data.get(l.dataId).values,c=s?n.data.get(s.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(h.length),g=f.length,y=c.length,b=d.length,x=p.length,k=0,v=0,w=0,I=0;for(let e=0;e<h.length;++e)m[e]=f[k++]+(h[e]-p[v++])*c[w++]/Math.sqrt(d[I++]+u),k>=g&&(k=0),v>=x&&(v=0),w>=y&&(w=0),I>=b&&(I=0);return n.makeTensorInfo(a.shape,a.dtype,m)}},{kernelName:to,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,crops:i}=r;k0([a],"batchToSpaceND");let o=s.reduce((e,t)=>e*t),l=ch.getReshaped(a.shape,s,o),u=ch.getPermuted(l.length,s.length),h=ch.getReshapedPermuted(a.shape,s,o),p=ch.getSliceBeginCoords(i,s.length),d=ch.getSliceSize(h,i,s.length),c=vy({inputs:{x:a},backend:n,attrs:{shape:l}}),f=vI({inputs:{x:c},backend:n,attrs:{perm:u}}),m=vy({inputs:{x:f},backend:n,attrs:{shape:h}}),g=v_({inputs:{x:m},backend:n,attrs:{begin:p,size:d}});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}},{kernelName:tl,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:i}=r,o=n.data.get(a.dataId).values,l=n.data.get(s.dataId).values,u=vO(o,l,s.dtype,s.shape,i);return n.makeTensorInfo([i],s.dtype,u)}},{kernelName:th,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{s0:r,s1:a}=t,s=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,o=ch.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},{kernelName:tp,backendName:"cpu",kernelFunc:vp},{kernelName:td,backendName:"cpu",kernelFunc:vz},{kernelName:tc,backendName:"cpu",kernelFunc:vP},{kernelName:tf,backendName:"cpu",kernelFunc:vo},{kernelName:tm,backendName:"cpu",kernelFunc:e=>{let{x:t}=e.inputs,n=e.backend,r=new Float32Array(rX.sizeFromShape(t.shape)),a=n.data.get(t.dataId),s=a.complexTensorInfos.real,i=a.complexTensorInfos.imag,o=n.data.get(s.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){let t=o[e],n=l[e];r[e]=Math.hypot(t,n)}return n.makeOutput(r,t.shape,"float32")}},{kernelName:tg,backendName:"cpu",kernelFunc:vV},{kernelName:ty,backendName:"cpu",kernelFunc:vU},{kernelName:tb,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:h}=r;k0([a,s],"conv2dBackpropFilter");let p=ch.convertConv2DDataFormat(l),d=ch.computeConv2DInfo(a.shape,h,i,1,o,u,!1,p),{strideHeight:c,strideWidth:f,filterHeight:m,filterWidth:g}=d,y="channelsLast"===d.dataFormat,b=new aO(d.filterShape,"float32"),x=d.padInfo.left,k=d.padInfo.top,v=n.data.get(a.dataId).values,w=n.data.get(s.dataId).values,I=new aO(a.shape,a.dtype,v),S=new aO(s.shape,s.dtype,w);for(let e=0;e<m;++e){let t=Math.max(0,Math.ceil((k-e)/c)),n=Math.min(d.outHeight,(d.inHeight+k-e)/c);for(let r=0;r<g;++r){let a=Math.max(0,Math.ceil((x-r)/f)),s=Math.min(d.outWidth,(d.inWidth+x-r)/f);for(let i=0;i<d.inChannels;++i)for(let o=0;o<d.outChannels;++o){let l=0;for(let u=0;u<d.batchSize;++u)for(let h=t;h<n;++h){let t=e+h*c-k;for(let e=a;e<s;++e){let n=r+e*f-x;y?l+=I.get(u,t,n,i)*S.get(u,h,e,o):l+=I.get(u,i,t,n)*S.get(u,o,h,e)}}b.set(l,e,r,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},{kernelName:tx,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:h}=r;k0([a,s],"conv2dBackpropInput");let p=rX.computeStrides(s.shape),d=rX.computeStrides(a.shape),c=ch.convertConv2DDataFormat(u),f=ch.computeConv2DInfo(i,s.shape,o,1,l,h,!1,c),m=new aO(f.inShape,"float32"),g=m.values,y=n.data.get(a.dataId).values,b=n.data.get(s.dataId).values,[x,k,v]=p,{batchSize:w,filterHeight:I,filterWidth:S,inChannels:N,inHeight:T,inWidth:C,outChannels:$,outHeight:E,outWidth:A,strideHeight:R,strideWidth:F}=f;c=f.dataFormat;let D=I-1-f.padInfo.top,_=S-1-f.padInfo.left,O="channelsLast"===c,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,P=O?1:m.strides[1],B=d[0],W=O?d[1]:d[2],V=O?d[2]:1,U=O?1:d[1];for(let e=0;e<w;++e)for(let t=0;t<N;++t)for(let n=0;n<T;++n){let r=n-D,a=Math.max(0,Math.ceil(r/R)),s=Math.min(E,(I+r)/R);for(let i=0;i<C;++i){let o=i-_,l=Math.max(0,Math.ceil(o/F)),u=Math.min(A,(S+o)/F),h=0;for(let n=a;n<s;++n){let a=n*R-r;for(let r=l;r<u;++r){let s=r*F-o,i=B*e+W*n+V*r,l=x*(I-1-a)+k*(S-1-s)+v*t;for(let e=0;e<$;++e){let t=y[i+U*e],n=b[l+e];h+=t*n}}}let p=M*e+L*n+z*i+P*t;g[p]=h}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},{kernelName:tk,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:i,pad:o,dilations:l}=r;k0([a,s],"conv3d");let u=ch.computeConv3DInfo(a.shape,s.shape,i,l,o),{filterDepth:h,filterHeight:p,filterWidth:d,dilationDepth:c,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,k=new aO(u.outShape,a.dtype),v=n.data.get(a.dataId).values,w=n.data.get(s.dataId).values,I=k.values,S=rX.computeStrides(a.shape),N=rX.computeStrides(s.shape);for(let e=0;e<u.batchSize;++e){let t=e*S[0],n=e*k.strides[0];for(let e=0;e<u.outDepth;++e){let r=n+e*k.strides[1],a=e*u.strideDepth-y;for(let e=0;e<h;++e){let n=a+e*c;if(n<0||n>=u.inDepth)continue;let s=e*N[0],i=t+n*S[1];for(let e=0;e<u.outHeight;++e){let t=r+e*k.strides[2],n=e*u.strideHeight-x;for(let e=0;e<p;++e){let r=n+e*f;if(r<0||r>=u.inHeight)continue;let a=s+e*N[1],o=i+r*S[2];for(let e=0;e<u.outWidth;++e){let n=t+e*u.outChannels,r=e*u.strideWidth-b;for(let e=0;e<d;++e){let t=r+e*m;if(t<0||t>=u.inWidth)continue;let s=a+e*N[2],i=o+t*u.inChannels,l=s;for(let e=0;e<u.inChannels;++e){let t=v[i+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*w[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},{kernelName:tv,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,pad:o,filterShape:l}=r;k0([a,s],"conv3dBackpropFilterV2");let u=rX.computeStrides(a.shape),h=rX.computeStrides(s.shape),p=ch.computeConv3DInfo(a.shape,l,i,1,o),d=p.strideDepth,c=p.strideHeight,f=p.strideWidth,m=p.filterDepth,g=p.filterHeight,y=p.filterWidth,b=new aO(p.filterShape,"float32"),x=b.values,[k,v,w,I]=b.strides,S=n.data.get(s.dataId).values,[N,T,C,$]=h,E=n.data.get(a.dataId).values,[A,R,F,D]=u,_=p.padInfo.front,O=p.padInfo.left,M=p.padInfo.top;for(let e=0;e<m;++e){let t=Math.max(0,Math.ceil((_-e)/d)),n=Math.min(p.outDepth,(p.inDepth+_-e)/d),r=e*k;for(let a=0;a<g;++a){let s=Math.max(0,Math.ceil((M-a)/c)),i=Math.min(p.outHeight,(p.inHeight+M-a)/c),o=a*v+r;for(let r=0;r<y;++r){let l=Math.max(0,Math.ceil((O-r)/f)),u=Math.min(p.outWidth,(p.inWidth+O-r)/f),h=r*w+o;for(let o=0;o<p.inChannels;++o){let m=o*I+h;for(let h=0;h<p.outChannels;++h){let g=0;for(let m=0;m<p.batchSize;++m){let p=m*A,y=m*N;for(let m=t;m<n;++m){let t=e+m*d-_,n=t*R+p,b=m*T+y;for(let e=s;e<i;++e){let t=a+e*c-M,s=t*F+n,i=e*C+b;for(let e=l;e<u;++e){let t=r+e*f-O,n=t*D+s,a=e*$+i;g+=E[n+o]*S[a+h]}}}}x[m+h]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},{kernelName:tw,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{pad:i,strides:o,inputShape:l}=r;k0([a],"conv3dBackpropInputV2");let u=rX.computeStrides(a.shape),h=rX.computeStrides(s.shape),p=ch.computeConv3DInfo(l,s.shape,o,1,i),d=new aO(p.inShape,"float32"),c=d.values,[f,m,g,y]=d.strides,b=n.data.get(a.dataId).values,[x,k,v,w]=u,I=n.data.get(s.dataId).values,[S,N,T,C]=h,{batchSize:$,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:F,inDepth:D,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:P,strideDepth:B,strideHeight:W,strideWidth:V}=p,U=E-1-p.padInfo.front,G=A-1-p.padInfo.top,H=R-1-p.padInfo.left;for(let e=0;e<$;++e)for(let t=0;t<F;++t)for(let n=0;n<D;++n){let r=n-U,a=Math.max(0,Math.ceil(r/B)),s=Math.min(L,(E+r)/B);for(let i=0;i<_;++i){let o=i-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(z,(A+o)/W);for(let h=0;h<O;++h){let p=h-H,d=Math.max(0,Math.ceil(p/V)),$=Math.min(P,(R+p)/V),F=0;for(let n=a;n<s;++n){let a=n*B-r;for(let r=l;r<u;++r){let s=r*W-o;for(let i=d;i<$;++i){let o=i*V-p,l=x*e+k*n+v*r+w*i,u=S*(E-1-a)+N*(A-1-s)+T*(R-1-o)+C*t;for(let e=0;e<M;++e){let t=b[l+e],n=I[u+e];F+=t*n}}}}c[f*e+m*n+g*i+y*h+t]=F}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},{kernelName:tI,backendName:"cpu",kernelFunc:vG},{kernelName:tS,backendName:"cpu",kernelFunc:vH},{kernelName:tC,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:s,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=r,[h,p,d,c]=a.shape,f=s.shape[0],[m,g]=o,y=iI([f,m,g,c],"float32"),b=n.data.get(s.dataId).values,x=n.data.get(i.dataId).values,k=n.data.get(a.dataId).values,v=rX.computeStrides(a.shape),w=rX.computeStrides(y.shape);for(let e=0;e<f;e++){let t=4*e,n=b[t],r=b[t+1],a=b[t+2],s=b[t+3],i=x[e];if(i>=h)continue;let o=m>1?(a-n)*(p-1)/(m-1):0,f=g>1?(s-r)*(d-1)/(g-1):0;for(let t=0;t<m;t++){let h=m>1?n*(p-1)+t*o:.5*(n+a)*(p-1);if(h<0||h>p-1){for(let n=0;n<g;n++)for(let r=0;r<c;r++){let a=r+n*w[2]+t*w[1]+e*w[0];y.values[a]=u}continue}if("bilinear"===l){let n=Math.floor(h),a=Math.ceil(h),o=h-n;for(let l=0;l<g;l++){let h=g>1?r*(d-1)+l*f:.5*(r+s)*(d-1);if(h<0||h>d-1){for(let n=0;n<c;n++){let r=n+l*w[2]+t*w[1]+e*w[0];y.values[r]=u}continue}let p=Math.floor(h),m=Math.ceil(h),b=h-p;for(let r=0;r<c;r++){let s=r+p*v[2]+n*v[1]+i*v[0],u=k[s];s=r+m*v[2]+n*v[1]+i*v[0];let h=k[s];s=r+p*v[2]+a*v[1]+i*v[0];let d=k[s];s=r+m*v[2]+a*v[1]+i*v[0];let c=k[s],f=u+(h-u)*b,g=d+(c-d)*b;s=r+l*w[2]+t*w[1]+e*w[0],y.values[s]=f+(g-f)*o}}}else for(let n=0;n<g;++n){let a=g>1?r*(d-1)+n*f:.5*(r+s)*(d-1);if(a<0||a>d-1){for(let r=0;r<c;r++){let a=r+n*w[2]+t*w[1]+e*w[0];y.values[a]=u}continue}let o=Math.round(a),l=Math.round(h);for(let r=0;r<c;r++){let a=r+o*v[2]+l*v[1]+i*v[0],s=r+n*w[2]+t*w[1]+e*w[0];y.values[s]=k[a]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},{kernelName:tN,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:i,reverse:o}=r;k0(a,"cumprod");let l=ch.getAxesPermutation([s],a.shape.length),u=a;null!=l&&(u=vI({inputs:{x:a},backend:n,attrs:{perm:l}}));let h=ch.getInnerMostAxes(1,a.shape.length)[0];if(h!==u.shape.length-1)throw Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${h}`);let p=aU(u.dtype,"int32"),d=rX.makeOnesTypedArray(rX.sizeFromShape(u.shape),p),c=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<c.length;e+=f)for(let t=0;t<f;t++){let n=m(e,t);if(0===t)d[n]=i?1:c[n];else{let r=m(e,t-1);d[n]=i?c[r]*d[r]:c[n]*d[r]}}let g=n.makeTensorInfo(u.shape,p,d);if(null!=l){let e=ch.getUndoAxesPermutation(l),t=vI({inputs:{x:g},backend:n,attrs:{perm:e}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),t}return g}},{kernelName:tT,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:i,reverse:o}=r;k0(a,"cumsum");let l=ch.getAxesPermutation([s],a.shape.length),u=a;null!=l&&(u=vI({inputs:{x:a},backend:n,attrs:{perm:l}}));let h=ch.getInnerMostAxes(1,a.shape.length)[0];if(h!==u.shape.length-1)throw Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${h}`);let p=aU(u.dtype,"int32"),d=rX.makeZerosTypedArray(rX.sizeFromShape(u.shape),p),c=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<c.length;e+=f)for(let t=0;t<f;t++){let n=m(e,t);if(0===t)d[n]=i?0:c[n];else{let r=m(e,t-1);d[n]=i?c[r]+d[r]:c[n]+d[r]}}let g=n.makeTensorInfo(u.shape,p,d);if(null!=l){let e=ch.getUndoAxesPermutation(l),t=vI({inputs:{x:g},backend:n,attrs:{perm:e}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),t}return g}},{kernelName:t$,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:i,binaryOutput:o}=r;if(1===a.shape.length){let e=n.data.get(a.dataId).values,t=n.data.get(s.dataId).values,r=vO(e,t,s.dtype,s.shape,i);return n.makeTensorInfo([i],s.dtype,r)}if(2===a.shape.length){let e=n.bufferSync(a),t=n.bufferSync(s),r=vM(e,t,i,o);return n.makeTensorInfo(r.shape,s.dtype,r.values)}throw Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},{kernelName:tE,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:s,dataFormat:i}=r;rX.assert("NHWC"===i,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);let o=a.shape[0],l=a.shape[1],u=a.shape[2],h=a.shape[3],p=l*s,d=u*s,c=h/(s*s),f=n.data.get(a.dataId).values,m=new Float32Array(o*p*d*c),g=0;for(let e=0;e<o;++e)for(let t=0;t<p;++t){let n=Math.floor(t/s),r=t%s;for(let t=0;t<d;++t){let a=Math.floor(t/s),i=t%s,o=(r*s+i)*c;for(let t=0;t<c;++t){let r=t+o,s=r+h*(a+u*(n+l*e));m[g++]=f[s]}}}return n.makeTensorInfo([o,p,d,c],a.dtype,m)}},{kernelName:tA,backendName:"cpu",kernelFunc:vq},{kernelName:tR,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:h}=r;k0([a,s],"depthwiseConv2dNativeBackpropFilter");let p=ch.computeConv2DInfo(a.shape,h,i,o,l,u,!0),{strideHeight:d,strideWidth:c,filterHeight:f,filterWidth:m}=p,g=new aO(p.filterShape,"float32"),y=p.padInfo.left,b=p.padInfo.top,x=p.outChannels/p.inChannels,k=n.data.get(a.dataId).values,v=new aO(a.shape,a.dtype,k),w=n.data.get(s.dataId).values,I=new aO(s.shape,s.dtype,w);for(let e=0;e<f;++e){let t=Math.max(0,Math.ceil((b-e)/d)),n=Math.min(p.outHeight,(p.inHeight+b-e)/d);for(let r=0;r<m;++r){let a=Math.max(0,Math.ceil((y-r)/c)),s=Math.min(p.outWidth,(p.inWidth+y-r)/c);for(let i=0;i<p.outChannels;++i){let o=Math.trunc(i/x),l=i%x,u=0;for(let l=0;l<p.batchSize;++l)for(let h=t;h<n;++h){let t=e+h*d-b;for(let e=a;e<s;++e){let n=r+e*c-y;u+=v.get(l,t,n,o)*I.get(l,h,e,i)}}g.set(u,e,r,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},{kernelName:tF,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:h}=r;k0([a,s],"depthwiseConv2DNativeBackpropInput");let p=rX.computeStrides(a.shape),d=rX.computeStrides(s.shape),c=ch.computeConv2DInfo(h,s.shape,i,o,l,u,!0),f=new aO(c.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(a.dataId).values,[k,v,w]=p,I=n.data.get(s.dataId).values,[S,N,T]=d,{batchSize:C,filterHeight:$,filterWidth:E,inChannels:A,inHeight:R,inWidth:F,outChannels:D,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=c,z=$-1-c.padInfo.top,P=E-1-c.padInfo.left,B=D/A;for(let e=0;e<C;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){let r=n-z,a=Math.max(0,Math.ceil(r/M)),s=Math.min(_,($+r)/M);for(let i=0;i<F;++i){let o=i-P,l=Math.max(0,Math.ceil(o/L)),u=Math.min(O,(E+o)/L),h=0;for(let n=a;n<s;++n){let a=n*M-r;for(let r=l;r<u;++r){let s=r*L-o,i=k*e+v*n+w*r,l=S*($-1-a)+N*(E-1-s)+T*t;for(let e=0;e<B;++e){let n=t*B+e,r=x[i+n],a=I[l+e];h+=r*a}}}m[g*e+y*n+b*i+t]=h}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},{kernelName:tD,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:r}=t,a=rX.sizeFromShape(r.shape),s=n.data.get(r.dataId).values,i=iI([a,a],r.dtype),o=i.values;for(let e=0;e<s.length;e++)o[e*a+e]=s[e];let l=[...r.shape,...r.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},{kernelName:t_,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:r,filter:a}=e,{strides:s,pad:i,dilations:o}=n,l=t.data.get(r.dataId).values,u=r.shape.length,h=t.data.get(a.dataId).values,p=a.shape.length,{batchSize:d,inHeight:c,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:k,filterHeight:v,filterWidth:w,dilationHeight:I,dilationWidth:S,outShape:N}=ch.computeDilation2DInfo(r.shape,a.shape,s,i,"NHWC",o),T=rX.sizeFromShape(N),C=N.length,$=rX.getArrayFromDType(r.dtype,T);for(let e=0;e<d;++e)for(let t=0;t<g;++t){let n=t*x-b.top;for(let s=0;s<y;++s){let i=s*k-b.left;for(let o=0;o<m;++o){let d=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){let s=n+t*I;if(s>=0&&s<c)for(let n=0;n<w;++n){let c=i+n*S;if(c>=0&&c<f){let i=rX.locToIndex([e,s,c,o],u,rX.computeStrides(r.shape)),f=rX.locToIndex([t,n,o],p,rX.computeStrides(a.shape)),m=l[i]+h[f];m>d&&(d=m)}}}let m=rX.locToIndex([e,t,s,o],C,rX.computeStrides(N));$[m]=d}}}let E=t.write(rX.toTypedArray($,r.dtype),N,r.dtype);return{dataId:E,shape:N,dtype:r.dtype}}},{kernelName:tM,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:r,filter:a,dy:s}=e,{strides:i,pad:o,dilations:l}=n,u=rX.toNestedArray(r.shape,t.data.get(r.dataId).values),h=rX.toNestedArray(a.shape,t.data.get(a.dataId).values),{batchSize:p,inHeight:d,inWidth:c,inChannels:f,outHeight:m,outWidth:g,padInfo:y,strideHeight:b,strideWidth:x,filterHeight:k,filterWidth:v,dilationHeight:w,dilationWidth:I,outShape:S}=ch.computeDilation2DInfo(r.shape,a.shape,i,o,"NHWC",l);rX.assert(s.rank===S.length,()=>`Error in ${tM}, dy must have the same rank as output ${S.length}, but got ${s.rank}`);let N=rX.toNestedArray(S,t.data.get(s.dataId).values),T=rX.makeZerosNestedTypedArray(a.shape,a.dtype);for(let e=0;e<p;++e)for(let t=0;t<m;++t){let n=t*b-y.top;for(let r=0;r<g;++r){let a=r*x-y.left;for(let s=0;s<f;++s){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<k;++t){let r=n+t*w;if(r>=0&&r<d)for(let n=0;n<v;++n){let p=a+n*I;if(p>=0&&p<c){let a=u[e][r][p][s]+h[t][n][s];a>i&&(i=a,o=t,l=n)}}}T[o][l][s]+=N[e][t][r][s]}}}let C=t.write(rX.toTypedArray(T,r.dtype),a.shape,a.dtype);return{dataId:C,shape:a.shape,dtype:a.dtype}}},{kernelName:tO,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:r,filter:a,dy:s}=e,{strides:i,pad:o,dilations:l}=n,u=rX.toNestedArray(r.shape,t.data.get(r.dataId).values),h=rX.toNestedArray(a.shape,t.data.get(a.dataId).values),{batchSize:p,inHeight:d,inWidth:c,inChannels:f,outHeight:m,outWidth:g,padInfo:y,strideHeight:b,strideWidth:x,filterHeight:k,filterWidth:v,dilationHeight:w,dilationWidth:I,outShape:S}=ch.computeDilation2DInfo(r.shape,a.shape,i,o,"NHWC",l);rX.assert(s.rank===S.length,()=>`Error in ${tO}, dy must have the same rank as output ${S.length}, but got ${s.rank}`);let N=rX.toNestedArray(S,t.data.get(s.dataId).values),T=rX.makeZerosNestedTypedArray(r.shape,r.dtype);for(let e=0;e<p;++e)for(let t=0;t<m;++t){let n=t*b-y.top;for(let r=0;r<g;++r){let a=r*x-y.left;for(let s=0;s<f;++s){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=a<0?0:a;for(let t=0;t<k;++t){let r=n+t*w;if(r>=0&&r<d)for(let n=0;n<v;++n){let p=a+n*I;if(p>=0&&p<c){let a=u[e][r][p][s]+h[t][n][s];a>i&&(i=a,o=r,l=p)}}}T[e][o][l][s]+=N[e][t][r][s]}}}let C=t.write(rX.toTypedArray(T,r.dtype),r.shape,r.dtype);return{dataId:C,shape:r.shape,dtype:r.dtype}}},{kernelName:tz,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{equation:a}=r,{allDims:s,summedDims:i,idDims:o}=ch.decodeEinsumEquation(a,t.length);ch.checkEinsumDimSizes(s.length,o,t);let{path:l,steps:u}=ch.getEinsumComputePath(i,o),h=u.length,p=null,d=s.length,c=[];for(let e=0;e<h;++e){for(let r of u[e]){let e;let{permutationIndices:a,expandDims:s}=ch.getEinsumPermutation(d,o[r]);ch.isIdentityPermutation(a)?e=t[r]:(e=vI({inputs:{x:t[r]},backend:n,attrs:{perm:a}}),c.push(e));let i=e.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);rX.arraysEqual(e.shape,i)||(e=vy({inputs:{x:e},backend:n,attrs:{shape:i}}),c.push(e)),null===p?p=e:(p=vX({inputs:{a:e,b:p},backend:n}),c.push(p))}e<h-1&&(l[e]>=0&&(p=vY({inputs:{x:p},backend:n,attrs:{axis:l[e]-(s.length-d),keepDims:!1}}),c.push(p)),d--)}for(let e of c)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},{kernelName:tP,backendName:"cpu",kernelFunc:k6},{kernelName:tB,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{dy:r,y:a}=t;k0([r,a],"eluGrad");let s=new Float32Array(rX.sizeFromShape(a.shape)),i=n.data.get(a.dataId).values,o=n.data.get(r.dataId).values;for(let e=0;e<i.length;++e){let t=i[e];t>=1?s[e]=o[e]:s[e]=o[e]*(t+1)}return n.makeTensorInfo(a.shape,"float32",s)}},{kernelName:tV,backendName:"cpu",kernelFunc:vJ},{kernelName:tW,backendName:"cpu",kernelFunc:v6},{kernelName:tU,backendName:"cpu",kernelFunc:v8},{kernelName:tG,backendName:"cpu",kernelFunc:v7},{kernelName:tH,backendName:"cpu",kernelFunc:we},{kernelName:tq,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:r}=t,a=rX.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],i=a/s,o=vy({inputs:{x:r},backend:n,attrs:{shape:[i,s]}}),l=wo(o,!1,n),u=vy({inputs:{x:l},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}},{kernelName:tj,backendName:"cpu",kernelFunc:wl},{kernelName:tK,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{image:r}=e,a=rX.getTypedArrayFromDType(r.dtype,rX.sizeFromShape(r.shape)),[s,i,o,l]=r.shape,u=n.data.get(r.dataId).values;for(let e=0;e<s;e++){let t=e*o*i*l;for(let e=0;e<i;e++){let n=e*(o*l);for(let e=0;e<o;e++){let r=e*l;for(let s=0;s<l;s++){let i=Math.round(o-e-1),h=t+n+r+s,p=u[h];if(i>=0&&i<o){let e=i*l,r=t+n+e+s;p=u[r]}a[h]=p}}}}let h=n.write(a,r.shape,r.dtype);return{dataId:h,shape:r.shape,dtype:r.dtype}}},{kernelName:tX,backendName:"cpu",kernelFunc:wh},{kernelName:tY,backendName:"cpu",kernelFunc:wd},{kernelName:rF,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:h,dilations:p,dimRoundingMode:d,activation:c,leakyreluAlpha:f}=r,m=vU({inputs:{x:a,filter:s},backend:n,attrs:{strides:l,pad:u,dataFormat:h,dilations:p,dimRoundingMode:d}});if(i){let e=m;if("NCHW"===h&&1===i.shape.length&&1!==i.shape[0]){let e=vy({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=vg({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=vg({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(c){let e=m;if("NCHW"===h&&"prelu"===c&&1===o.shape.length&&1!==o.shape[0]){let e=vy({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=vi(n,m,c,e,f),n.disposeIntermediateTensorInfo(e)}else m=vi(n,m,c,o,f);n.disposeIntermediateTensorInfo(e)}return m}},{kernelName:rD,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:h,dilations:p,dimRoundingMode:d,activation:c,leakyreluAlpha:f}=r,m=vq({inputs:{x:a,filter:s},backend:n,attrs:{strides:l,pad:u,dataFormat:h,dilations:p,dimRoundingMode:d}});if(i){let e=m;m=vg({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(c){let e=m;m=vi(n,m,c,o,f),n.disposeIntermediateTensorInfo(e)}return m}},{kernelName:tQ,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{params:r,indices:a}=t,s=rX.sizeFromShape(r.shape),i=a.shape,o=i[i.length-1],[l,u,h,p]=ch.prepareAndValidate(r,a);if(0===u)return n.makeTensorInfo(l,r.dtype,[]);let d=n.data.get(a.dataId).values,c=n.bufferSync(r),f=wc(d,c,r.dtype,u,o,h,p,r.shape,s);return n.makeTensorInfo(l,r.dtype,f.values)}},{kernelName:tJ,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,indices:s}=t,{axis:i,batchDims:o}=r;k0([a,s],"gatherV2");let l=rX.parseAxisParam(i,a.shape)[0],u=n.data.get(s.dataId).values,h=a.shape[l];for(let e=0;e<u.length;++e){let t=u[e];rX.assert(t<=h-1&&t>=0,()=>`GatherV2: the index value ${t} is not in [0, ${h-1}]`)}let p=o;null==o&&(p=0);let d=rX.sizeFromShape(s.shape),c=ch.segment_util.collectGatherOpShapeInfo(a,s,l,p),f=vy({inputs:{x:a},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),m=vy({inputs:{x:s},backend:n,attrs:{shape:[c.batchSize,d/c.batchSize]}}),g=[c.batchSize,c.outerSize,d/c.batchSize,c.sliceSize],y=n.bufferSync(m),b=n.bufferSync(f),x=wf(b,y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(c.outputShape,x.dtype,x.values)}},{kernelName:t0,backendName:"cpu",kernelFunc:wg},{kernelName:t1,backendName:"cpu",kernelFunc:wb},{kernelName:t2,backendName:"cpu",kernelFunc:k5},{kernelName:t3,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:r}=t,a=rX.sizeFromShape(r.shape),s=r.shape[r.shape.length-1],i=a/s,o=vy({inputs:{x:r},backend:n,attrs:{shape:[i,s]}}),l=wo(o,!0,n),u=vy({inputs:{x:l},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(l),u}},{kernelName:t4,backendName:"cpu",kernelFunc:vW},{kernelName:t6,backendName:"cpu",kernelFunc:wx},{kernelName:t5,backendName:"cpu",kernelFunc:wk},{kernelName:t8,backendName:"cpu",kernelFunc:wv},{kernelName:t7,backendName:"cpu",kernelFunc:k8},{kernelName:t9,backendName:"cpu",kernelFunc:wI},{kernelName:ne,backendName:"cpu",kernelFunc:wN},{kernelName:nt,backendName:"cpu",kernelFunc:function(e){let{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,i=wT(r,a,s);return t.makeTensorInfo([i.length],"float32",i)}},{kernelName:nn,backendName:"cpu",kernelFunc:w$},{kernelName:nr,backendName:"cpu",kernelFunc:wE},{kernelName:na,backendName:"cpu",kernelFunc:wR},{kernelName:ns,backendName:"cpu",kernelFunc:wF},{kernelName:ni,backendName:"cpu",kernelFunc:w_},{kernelName:nh,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{depthRadius:s,bias:i,alpha:o,beta:l}=r;k0(a,"LRN");let u=a.shape[3],h=u-1,p=n.data.get(a.dataId).values,d=rX.sizeFromShape(a.shape),c=new Float32Array(d);for(let e=0;e<d;e++){let t=function(e){let t=e%u,n=e-t+Math.max(0,t-s),r=e-t+Math.min(t+s,h),a=0;for(;n<=r;n++){let e=p[n];a+=e*e}return a}(e),n=p[e]*Math.pow(i+o*t,-l);c[e]=n}return n.makeTensorInfo(a.shape,a.dtype,c)}},{kernelName:np,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,y:s,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:h}=r;k0(i,"LRNGrad");let p=rX.sizeFromShape(i.shape),d=i.shape[3],c=n.data.get(i.dataId).values,f=n.data.get(a.dataId).values,m=n.data.get(s.dataId).values,g=new Float32Array(p);for(let e=0;e<p;e++){let t=e%d,n=e-t+Math.max(0,t-o),r=e-t+Math.min(d,t+o+1),a=0;for(let e=n;e<r;e++)a+=Math.pow(f[e],2);a=u*a+l;for(let t=n;t<r;t++){let n=-2*u*h*f[t]*m[e]/a;e===t&&(n+=Math.pow(a,-h)),n*=c[e],g[t]+=n}}return n.makeTensorInfo(i.shape,a.dtype,g)}},{kernelName:nd,backendName:"cpu",kernelFunc:wM},{kernelName:nc,backendName:"cpu",kernelFunc:wz},{kernelName:nf,backendName:"cpu",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s}=n;k0(s,"maxPool");let{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=a;rX.assert(ch.eitherStridesOrDilationsAreOne(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);let h=ch.computePool2DInfo(s.shape,i,o,1,l,u);if(1===h.filterWidth&&1===h.filterHeight&&rX.arraysEqual(h.inShape,h.outShape))t=k5({inputs:{x:s},backend:r});else{let e=r.data.get(s.dataId).values,n=rX.computeStrides(s.shape),a=vA(e,s.shape,s.dtype,n,h,"max");t=r.makeTensorInfo(h.outShape,s.dtype,a.values)}return t}},{kernelName:ng,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=r;k0(a,"maxPool3d");let h=ch.computePool3DInfo(a.shape,s,i,1,o,l,u),p=n.data.get(a.dataId).values,d=vF(p,a.shape,a.dtype,rX.computeStrides(a.shape),h,"max");return n.makeTensorInfo(d.shape,"float32",d.values)}},{kernelName:ny,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=r;k0([a,s],"maxPool3DGrad");let h=ch.computePool3DInfo(s.shape,i,o,1,l,u),p=n.bufferSync(s),d=function(e,t){let n=iI(t.outShape,"int32"),r=t.strideDepth,a=t.strideHeight,s=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,h=t.effectiveFilterHeight,p=t.effectiveFilterWidth,d=t.padInfo.front,c=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){let b=y*r-d,x=b;for(;x<0;)x+=i;let k=Math.min(t.inDepth,u+b);for(let r=0;r<t.outHeight;++r){let u=r*a-c,d=u;for(;d<0;)d+=o;let v=Math.min(t.inHeight,h+u);for(let a=0;a<t.outWidth;++a){let c=a*s-f,w=c;for(;w<0;)w+=l;let I=Math.min(t.inWidth,p+c),S=Number.NEGATIVE_INFINITY,N=-1;for(let t=x;t<k;t+=i){let n=t-b;for(let r=d;r<v;r+=o){let a=r-u;for(let s=w;s<I;s+=l){let i=s-c,o=e.get(m,t,r,s,g);o>=S&&(S=o,N=n*h*p+a*h+i)}}}n.set(N,m,y,r,a,g)}}}return n}(p,h),c=h.strideDepth,f=h.strideHeight,m=h.strideWidth,g=h.dilationDepth,y=h.dilationHeight,b=h.dilationWidth,x=h.effectiveFilterDepth,k=h.effectiveFilterHeight,v=h.effectiveFilterWidth,w=x-1-h.padInfo.front,I=v-1-h.padInfo.left,S=k-1-h.padInfo.top,N=iI(s.shape,"float32"),T=n.bufferSync(a);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let r=0;r<h.inHeight;++r)for(let a=0;a<h.inWidth;++a){let s=n-w,i=r-S,o=a-I,l=0;for(let n=0;n<x;n+=g){let r=(s+n)/c;if(!(r<0)&&!(r>=h.outDepth)&&Math.floor(r)===r)for(let a=0;a<k;a+=y){let s=(i+a)/f;if(!(s<0)&&!(s>=h.outHeight)&&Math.floor(s)===s)for(let i=0;i<v;i+=b){let u=(o+i)/m;if(u<0||u>=h.outWidth||Math.floor(u)!==u)continue;let p=x*k*v-1-d.get(e,r,s,u,t),c=n*k*v+a*v+i,f=p===c?1:0;if(0===f)continue;let g=T.get(e,r,s,u,t);l+=g*f}}}N.set(l,e,n,r,a,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},{kernelName:nm,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s,output:i}=t;k0([s,i],"maxPoolGrad");let{filterSize:o,strides:l,pad:u,dimRoundingMode:h}=r,p=ch.computePool2DInfo(s.shape,o,l,1,u,h),d=n.data.get(s.dataId).values,c=iI(p.outShape,s.dtype,vR(d,s.shape,s.dtype,p).values),f=p.strideHeight,m=p.strideWidth,g=p.dilationHeight,y=p.dilationWidth,b=p.effectiveFilterHeight,x=p.effectiveFilterWidth,k=x-1-p.padInfo.left,v=b-1-p.padInfo.top,w=iI(s.shape,"float32"),I=n.data.get(a.dataId).values,S=iI(a.shape,"float32",I);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let r=0;r<p.inWidth;++r){let a=n-v,s=r-k,i=0;for(let n=0;n<b;n+=g){let r=(a+n)/f;if(!(r<0)&&!(r>=p.outHeight)&&Math.floor(r)===r)for(let a=0;a<x;a+=y){let o=(s+a)/m;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;let l=b*x-1-c.get(e,r,o,t),u=n*x+a,h=l===u?1:0;if(0===h)continue;let d=S.get(e,r,o,t);i+=d*h}}w.set(i,e,n,r,t)}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},{kernelName:nb,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{x:r}=e,{filterSize:a,strides:s,pad:i,includeBatchInIndex:o}=t;k0(r,"MaxPoolWithArgmax");let l=n.data.get(r.dataId).values,u=ch.computePool2DInfo(r.shape,a,s,[1,1],i),[h,p]=function(e,t,n,r,a){let s=rX.computeStrides(t),i=vA(e,t,n,s,a,"max"),o=vR(e,t,n,a,!0,r);return[i.values,o.values]}(l,r.shape,r.dtype,o,u),d=n.write(h,u.outShape,r.dtype),c=n.write(p,u.outShape,r.dtype);return[{dataId:d,shape:u.outShape,dtype:r.dtype},{dataId:c,shape:u.outShape,dtype:"int32"}]}},{kernelName:nx,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r,o=rX.parseAxisParam(s,a.shape),l=ch.computeOutAndReduceShapes(a.shape,o),u=l[1],h=rX.sizeFromShape(u),p=[],d=n.makeTensorInfo([],"float32",new Float32Array([h]));p.push(d);let c=vp({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});p.push(c);let f=wn({inputs:{a:c,b:d},backend:n});p.push(f);let m=vY({inputs:{x:f},backend:n,attrs:{axis:s,keepDims:i}});return p.forEach(e=>n.disposeIntermediateTensorInfo(e)),m}},{kernelName:nk,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r;k0(a,"min");let o=rX.parseAxisParam(s,a.shape),l=o,u=ch.getAxesPermutation(l,a.shape.length),h=a;null!=u&&(h=vI({inputs:{x:a},backend:n,attrs:{perm:u}}),l=ch.getInnerMostAxes(l.length,a.shape.length)),ch.assertAxesAreInnerMostDims("min",l,h.shape.length);let[p,d]=ch.computeOutAndReduceShapes(h.shape,l),c=rX.sizeFromShape(d),f=rX.makeZerosTypedArray(rX.sizeFromShape(p),h.dtype),m=n.data.get(h.dataId).values;for(let e=0;e<f.length;++e){let t=e*c,n=m[t];for(let e=0;e<c;++e){let r=m[t+e];(Number.isNaN(r)||r<n)&&(n=r)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(h);let g=n.makeTensorInfo(p,h.dtype,f);if(i){let e=ch.expandShapeToKeepDim(p,o),t=vy({inputs:{x:g},backend:n,attrs:{shape:e}});return n.disposeIntermediateTensorInfo(g),t}return g}},{kernelName:nv,backendName:"cpu",kernelFunc:wB},{kernelName:nw,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,mode:i}=r;k0(a,"mirrorPad");let o=s.map((e,t)=>e[0]+a.shape[t]+e[1]),l=s.map(e=>e[0]),u=s.map((e,t)=>e[0]+a.shape[t]),h="reflect"===i?0:1,p=n.data.get(a.dataId).values,d=a.shape.length,c=rX.computeStrides(a.shape),f=rX.sizeFromShape(o),m=o.length,g=rX.computeStrides(o),y=rX.getTypedArrayFromDType(a.dtype,f);for(let e=0;e<f;e++){let t=rX.indexToLoc(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-h:t[e]>=u[e]&&(t[e]=(u[e]-1)*2-t[e]+h);t=t.map((e,t)=>e-l[t]);let n=rX.locToIndex(t,d,c);y[e]=p[n]}let b=n.write(y,o,a.dtype);return{dataId:b,shape:o,dtype:a.dtype}}},{kernelName:nI,backendName:"cpu",kernelFunc:wV},{kernelName:nS,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{numSamples:s,seed:i,normalized:o}=r;k0(a,"multinomial");let l=o?a:wU({inputs:{logits:a},backend:n,attrs:{dim:-1}}),u=l.shape[0],h=l.shape[1],p=n.data.get(l.dataId).values,d=[u,s],c=rX.makeZerosTypedArray(rX.sizeFromShape(d),"int32");for(let e=0;e<u;++e){let t=e*h,n=new Float32Array(h-1);n[0]=p[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+p[t+e];let r=hY.alea(i.toString()),a=e*s;for(let e=0;e<s;++e){let t=r();c[a+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){c[a+e]=r;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(d,"int32",c)}},{kernelName:nN,backendName:"cpu",kernelFunc:vX},{kernelName:nT,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:r}=t;k0(r,"neg");let a=n.data.get(r.dataId).values,[s,i]=wG(a,r.shape,r.dtype);return n.makeTensorInfo(i,r.dtype,s)}},{kernelName:n$,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=r;k0(a,"NonMaxSuppression");let u=n.data.get(a.dataId).values,h=n.data.get(s.dataId).values,{selectedIndices:p}=wH(u,h,i,o,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},{kernelName:nE,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=r;k0(a,"NonMaxSuppressionPadded");let h=n.data.get(a.dataId).values,p=n.data.get(s.dataId).values,{selectedIndices:d,validOutputs:c}=wq(h,p,i,o,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([c]))]}},{kernelName:nA,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=r;k0(a,"NonMaxSuppressionWithScore");let h=n.data.get(a.dataId).values,p=n.data.get(s.dataId).values,{selectedIndices:d,selectedScores:c}=wj(h,p,i,o,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([c.length],"float32",new Float32Array(c))]}},{kernelName:nC,backendName:"cpu",kernelFunc:wX},{kernelName:nF,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{dtype:s,depth:i,onValue:o,offValue:l}=r;k0(a,"oneHot");let u=rX.sizeFromShape(a.shape),h=new Float32Array(u*i);h.fill(l);let p=n.data.get(a.dataId).values;for(let e=0;e<u;++e)p[e]>=0&&p[e]<i&&(h[e*i+p[e]]=o);return n.makeTensorInfo([...a.shape,i],s,h)}},{kernelName:nR,backendName:"cpu",kernelFunc:function e(t){let{inputs:n,backend:r}=t,{x:a}=n;if("string"===a.dtype)throw Error("onesLike is not supported for string tensors");if("complex64"!==a.dtype)return wl({backend:r,attrs:{shape:a.shape,value:1,dtype:a.dtype}});{let t=vu({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r}),s=vW({inputs:{input:a},backend:r}),i=wY({inputs:{x:s},backend:r}),o=vo({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(i),o}}},{kernelName:nD,backendName:"cpu",kernelFunc:wZ},wJ,{kernelName:nM,backendName:"cpu",kernelFunc:w0},{kernelName:nL,backendName:"cpu",kernelFunc:ve},{kernelName:nz,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r;k0(a,"prod");let o=a.shape.length,l=rX.parseAxisParam(s,a.shape),u=ch.getAxesPermutation(l,o),h=l,p=a,d=[];null!=u&&(d.push(p=vI({inputs:{x:a},backend:n,attrs:{perm:u}})),h=ch.getInnerMostAxes(h.length,o));let c=n.data.get(p.dataId).values,{outVals:f,outShape:m,outDtype:g}=w1(p.shape,p.dtype,c,h),y=m;return i&&(y=ch.expandShapeToKeepDim(m,l)),d.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(y,g,f)}},{kernelName:nP,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:a,paramsDenseValues:s,indices:i}=t,{outputRaggedRank:o}=r,l=a.map(e=>n.data.get(e.dataId).values),u=a.map(e=>e.shape),h=n.data.get(s.dataId).values,p=n.data.get(i.dataId).values,[d,c,f]=w3(l,u,h,s.shape,s.dtype,p,i.shape,o),m=d.map(e=>n.makeTensorInfo([e.length],"int32",e)),g=n.makeTensorInfo(f,s.dtype,c);return m.concat([g])}},{kernelName:nB,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{shape:a,values:s,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=r,u=n.data.get(a.dataId).values,h=n.data.get(s.dataId).values,p=n.data.get(i.dataId).values,d=o.map(e=>n.data.get(e.dataId).values),c=o.map(e=>e.shape),[f,m]=w7(u,a.shape,h,s.shape,s.dtype,p,i.shape,d,c,l);return n.makeTensorInfo(f,s.dtype,m)}},{kernelName:nW,backendName:"cpu",kernelFunc:function(e){let{backend:t,attrs:n}=e,{start:r,stop:a,dtype:s,step:i}=n,o=w9(r,a,i,s);return t.makeTensorInfo([o.length],s,o)}},{kernelName:nV,backendName:"cpu",kernelFunc:vu},wr,{kernelName:nU,backendName:"cpu",kernelFunc:Ie},{kernelName:nG,backendName:"cpu",kernelFunc:vt},{kernelName:nY,backendName:"cpu",kernelFunc:vn},{kernelName:nH,backendName:"cpu",kernelFunc:vy},{kernelName:nK,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:i,size:o}=r;k0(a,"resizeBilinear");let l=rX.computeStrides(a.shape),[u,h]=o,[p,d,c,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(rX.sizeFromShape([p,u,h,f])),y=[s&&u>1?d-1:d,s&&h>1?c-1:c],b=[s&&u>1?u-1:u,s&&h>1?h-1:h],x=0,k=y[0]/b[0],v=y[1]/b[1];for(let e=0;e<p;e++)for(let t=0;t<u;t++){let n;n=i?k*(t+.5)-.5:k*t;let r=Math.max(0,Math.floor(n)),a=n-r,s=Math.min(d-1,Math.ceil(n)),o=e*l[0]+r*l[1],u=e*l[0]+s*l[1];for(let e=0;e<h;e++){let t;t=i?v*(e+.5)-.5:v*e;let n=Math.max(0,Math.floor(t)),r=t-n,s=Math.min(c-1,Math.ceil(t)),h=o+n*l[2],p=u+n*l[2],d=o+s*l[2],y=u+s*l[2];for(let e=0;e<f;e++){let t=m[h+e],n=m[p+e],s=m[d+e],i=m[y+e],o=t+(s-t)*r,l=n+(i-n)*r,u=o+(l-o)*a;g[x++]=u}}}return n.makeTensorInfo([p,u,h,f],"float32",g)}},{kernelName:nX,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:i}=r;k0([s,a],"resizeBilinearGrad");let o=rX.computeStrides(a.shape),[l,u,h,p]=a.shape,[,d,c]=s.shape,f=new Float32Array(l*u*h*p),m=[i&&d>1?u-1:u,i&&c>1?h-1:h],g=[i&&d>1?d-1:d,i&&c>1?c-1:c],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(s.dataId).values,k=0;for(let e=0;e<l;e++){let t=e*o[0];for(let e=0;e<d;e++){let n=e*y,r=Math.floor(n),a=Math.min(Math.ceil(n),u-1),s=t+r*o[1],i=t+a*o[1],l=n-r,d=1-l;for(let e=0;e<c;e++){let t=e*b,n=Math.floor(t),r=Math.min(Math.ceil(t),h-1),a=t-n,u=1-a,c=s+n*o[2],m=s+r*o[2],g=i+n*o[2],y=i+r*o[2],v=d*u,w=d*a,I=l*u,S=l*a;for(let e=0;e<p;e++){let t=x[k++];f[c+e]+=t*v,f[m+e]+=t*w,f[g+e]+=t*I,f[y+e]+=t*S}}}}return n.makeTensorInfo([l,h,u,p],"float32",f)}},{kernelName:nq,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:i,size:o}=r;k0(a,"resizeNearestNeighbor");let l=rX.computeStrides(a.shape),[u,h]=o,[p,d,c,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(p*u*h*f),y=[s&&u>1?d-1:d,s&&h>1?c-1:c],b=[s&&u>1?u-1:u,s&&h>1?h-1:h],x=y[0]/b[0],k=y[1]/b[1],v=0;for(let e=0;e<p;e++){let t=e*l[0];for(let e=0;e<u;e++){let n=i?x*(e+.5):x*e,r=Math.min(d-1,s?Math.round(n):Math.floor(n));i&&(r=Math.max(0,r));let a=t+r*l[1];for(let e=0;e<h;e++){let t=i?k*(e+.5):k*e,n=Math.min(c-1,s?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));let r=a+n*l[2];for(let e=0;e<f;e++){let t=m[r+e];g[v++]=t}}}}return n.makeTensorInfo([p,u,h,f],a.dtype,g)}},{kernelName:nj,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:i}=r;k0([s,a],"resizeNearestNeighborGrad");let o=rX.computeStrides(a.shape),l=rX.computeStrides(s.shape),[u,h,p,d]=a.shape,[,c,f]=s.shape,m=new Float32Array(u*h*p*d),g=n.data.get(s.dataId).values,y=[i&&c>1?h-1:h,i&&f>1?p-1:p],b=[i&&c>1?c-1:c,i&&f>1?f-1:f],x=y[0]/b[0],k=y[1]/b[1],v=1/x,w=1/k,I=2*Math.ceil(v)+2,S=2*Math.ceil(w)+2;for(let e=0;e<u;e++){let t=e*o[0];for(let e=0;e<h;e++){let n=t+e*o[1],r=Math.floor(e*v),a=Math.floor(r-I/2);for(let r=0;r<p;r++){let s=n+r*o[2],u=Math.floor(r*w),y=Math.floor(u-S/2);for(let n=0;n<d;n++){let o=0;for(let s=0;s<I;s++){let u=s+a;if(u<0||u>=c)continue;let d=t+u*l[1],m=u*x,b=Math.min(h-1,i?Math.round(m):Math.floor(m));if(e===b)for(let e=0;e<S;e++){let t=e+y;if(t<0||t>=f)continue;let a=d+t*l[2],s=t*k,u=Math.min(p-1,i?Math.round(s):Math.floor(s));r===u&&(o+=g[a+n])}}m[s+n]=o}}}}return n.makeTensorInfo(a.shape,a.dtype,m)}},{kernelName:nZ,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:s}=r;k0(a,"reverse");let i=a.shape.length,o=rX.parseAxisParam(s,a.shape);if(0===i)return k5({inputs:{x:a},backend:n});let l=new aO(a.shape,a.dtype),u=n.bufferSync(a);for(let e=0;e<l.size;e++){let t=l.indexToLoc(e),n=t.slice();o.forEach(e=>n[e]=a.shape[e]-1-n[e]),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},{kernelName:rA,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{image:r}=e,{radians:a,fillValue:s,center:i}=t,o=rX.getTypedArrayFromDType(r.dtype,rX.sizeFromShape(r.shape)),[l,u,h,p]=r.shape,[d,c]=ch.getImageCenter(i,u,h),f=Math.sin(a),m=Math.cos(a),g=n.data.get(r.dataId).values;for(let e=0;e<l;e++){let t=e*h*u*p;for(let e=0;e<u;e++){let n=e*(h*p);for(let r=0;r<h;r++){let a=r*p;for(let i=0;i<p;i++){let y=[l,e,r,i],b=y[2],x=y[1],k=(b-d)*m-(x-c)*f,v=(b-d)*f+(x-c)*m;k=Math.round(k+d),v=Math.round(v+c);let w=s;if("number"!=typeof s&&(w=3===i?255:s[i]),k>=0&&k<h&&v>=0&&v<u){let e=v*(h*p),n=k*p,r=t+e+n+i;w=g[r]}let I=t+n+a+i;o[I]=w}}}}let y=n.write(o,r.shape,r.dtype);return{dataId:y,shape:r.shape,dtype:r.dtype}}},{kernelName:nJ,backendName:"cpu",kernelFunc:It},{kernelName:nQ,backendName:"cpu",kernelFunc:Ir},{kernelName:n0,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{indices:a,updates:s}=t,{shape:i}=r,{sliceRank:o,numUpdates:l,sliceSize:u,strides:h,outputSize:p}=ch.calculateShapes(s,a,i),d=n.bufferSync(a),c=n.bufferSync(s),f=Ia(d,c,i,p,u,l,o,h,0,!0);return n.makeTensorInfo(i,f.dtype,f.values)}},{kernelName:n1,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{sortedSequence:a,values:s}=t,{side:i}=r,o=n.data.get(a.dataId).values,l=n.data.get(s.dataId).values,u=function(e,t,n,r,a,s){let i=rX.getArrayFromDType("int32",n*a);for(let o=0;o<n;++o){let n=e.slice(o*r,(o+1)*r),l=o*a;for(let e=0;e<a;++e)i[l+e]="left"===s?function(e,t){let n=0,r=e.length,a=0;for(;n<r;)e[a=Math.floor((n+r)/2)]<t?n=a+1:r=a;return r}(n,t[e+l]):function(e,t){let n=0,r=e.length,a=0;for(;n<r;)e[a=Math.floor((n+r)/2)]<=t?n=a+1:r=a;return r}(n,t[e+l])}return i}(o,l,a.shape[0],a.shape[1],s.shape[1],i);return n.makeTensorInfo(s.shape,"int32",u)}},{kernelName:n2,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{condition:r,t:a,e:s}=t;k0([r,a,s],"select");let i=r.shape.length,o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,h=aU(a.dtype,s.dtype),p=rX.makeZerosTypedArray(rX.sizeFromShape(a.shape),h),d=0,c=0===i||i>1||1===a.shape.length?1:rX.sizeFromShape(a.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<c;t++)1===o[e]?p[d++]=l[e]:p[d++]=u[e];return n.makeTensorInfo(a.shape,h,p)}},{kernelName:n3,backendName:"cpu",kernelFunc:Io},{kernelName:n7,backendName:"cpu",kernelFunc:vs},{kernelName:n8,backendName:"cpu",kernelFunc:Il},{kernelName:n6,backendName:"cpu",kernelFunc:Iu},{kernelName:n5,backendName:"cpu",kernelFunc:Ih},{kernelName:n4,backendName:"cpu",kernelFunc:v_},{kernelName:ra,backendName:"cpu",kernelFunc:wU},{kernelName:n9,backendName:"cpu",kernelFunc:Id},{kernelName:rn,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,paddings:i}=r;k0([a],"spaceToBatchND");let o=rX.sizeFromShape(s),l=[[0,0]];l.push(...i);for(let e=1+s.length;e<a.shape.length;++e)l.push([0,0]);let u=wJ.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),h=ch.getReshaped(u.shape,s,o,!1),p=ch.getPermuted(h.length,s.length,!1),d=ch.getReshapedPermuted(u.shape,s,o,!1),c=vy({inputs:{x:u},backend:n,attrs:{shape:h}}),f=vI({inputs:{x:c},backend:n,attrs:{perm:p}}),m=vy({inputs:{x:f},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(f),m}},{kernelName:rs,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{indices:r,values:a,denseShape:s,defaultValue:i}=t;if(1!==s.shape.length)throw Error(`Dense shape must be a vector, saw:
        ${s.shape}`);if(2!==r.shape.length)throw Error(`Indices must be a matrix, saw:
        ${r.shape}`);if(1!==a.shape.length)throw Error(`Values must be a vector, saw:
        ${a.shape}`);if(0!==i.shape.length)throw Error(`Default value must be a scalar, saw:
        ${i.shape}`);let o=n.data.get(r.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,h=n.data.get(i.dataId).values[0],[p,d,c,f,m]=Ic(o,r.shape,r.dtype,l,a.dtype,u,h);return[n.makeTensorInfo(d,r.dtype,p),n.makeTensorInfo([d[0]],a.dtype,c),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}},{kernelName:ri,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{inputIndices:r,inputShape:a,newShape:s}=t;if(2!==r.shape.length)throw Error(`Input indices should be a matrix but received shape
        ${r.shape}`);if(1!==a.shape.length)throw Error(`Input shape should be a vector but received shape
        ${a.shape}`);if(1!==s.shape.length)throw Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(n.data.get(a.dataId).values),o=n.data.get(r.dataId).values,l=Array.from(n.data.get(s.dataId).values),[u,h,p]=If(o,r.shape,r.dtype,i,l);return[n.makeTensorInfo(h,r.dtype,u),n.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}},{kernelName:ro,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
          ${a.shape}`);if(1!==s.shape.length)throw Error(`Segment ids should be a vector but received shape
          ${s.shape}`);if(a.shape[0]!==s.shape[0])throw Error("segmentIds and indices should have same size.");let i=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,l=n.data.get(s.dataId).values,[u,h]=Im(i,r.shape,r.dtype,o,l,!0);return n.makeTensorInfo(h,r.dtype,u)}},{kernelName:rl,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
         ${a.shape}`);if(1!==s.shape.length)throw Error(`Segment ids should be a vector but received shape
         ${s.shape}`);if(a.shape[0]!==s.shape[0])throw Error("segmentIds and indices should have same size.");let i=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,l=n.data.get(s.dataId).values,[u,h]=Im(i,r.shape,r.dtype,o,l);return n.makeTensorInfo(h,r.dtype,u)}},{kernelName:ru,backendName:"cpu",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{sparseIndices:s,sparseValues:i,defaultValue:o}=n,{outputShape:l}=a,{sliceRank:u,numUpdates:h,sliceSize:p,strides:d,outputSize:c}=ch.calculateShapes(i,s,l),f=r.bufferSync(s);switch(i.dtype){case"bool":{let e=r.bufferSync(i),n=!!r.data.get(o.dataId).values[0];t=Ia(f,e,l,c,p,h,u,d,n,!1);break}case"float32":{let e=r.bufferSync(i),n=r.data.get(o.dataId).values[0];t=Ia(f,e,l,c,p,h,u,d,n,!1);break}case"int32":{let e=r.bufferSync(i),n=r.data.get(o.dataId).values[0];t=Ia(f,e,l,c,p,h,u,d,n,!1);break}case"string":{let e=r.bufferSync(i),n=rX.decodeString(r.data.get(o.dataId).values[0]);t=Ia(f,e,l,c,p,h,u,d,n,!1);break}default:throw Error(`Unsupported type ${i.dtype}`)}return r.makeTensorInfo(l,t.dtype,t.values)}},{kernelName:rr,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:s,axis:i}=r,o=rX.parseAxisParam(i,a.shape)[0],l=ch.prepareSplitSize(a,s,o),u=Array(a.shape.length).fill(0),h=a.shape.slice();return l.map(e=>{let t=[...h];t[o]=e;let r=v_({inputs:{x:a},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,r})}},{kernelName:re,backendName:"cpu",kernelFunc:Iy},{kernelName:rp,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{let{x:n}=e;k0(n,"square");let r=t.data.get(n.dataId).values,a=new Float32Array(r.length);for(let e=0;e<r.length;++e){let t=r[e];a[e]=t*t}let s=t.write(a,n.shape,n.dtype);return{dataId:s,shape:n.shape,dtype:n.dtype}}},{kernelName:rh,backendName:"cpu",kernelFunc:Ix},{kernelName:r$,backendName:"cpu",kernelFunc:Ik},{kernelName:rd,backendName:"cpu",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{begin:i,end:o,strides:l,beginMask:u,endMask:h,ellipsisMask:p,newAxisMask:d,shrinkAxisMask:c}=a;k0(s,"stridedSlice");let{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:k,strides:v}=oF.sliceInfo(s.shape,i,o,l,u,h,p,d,c);if(g)t=vy({inputs:{x:s},backend:r,attrs:{shape:m}});else if(y||b){rX.assert(s.shape.length>=1,()=>`Input must have rank at least 1, got: ${s.shape.length}`);let e=oF.computeOutShape(x,k,v),n=v_({inputs:{x:s},backend:r,attrs:{begin:x,size:e}});t=vy({inputs:{x:n},backend:r,attrs:{shape:m}}),r.disposeIntermediateTensorInfo(n)}else{let e=r.bufferSync(s),n=Iv(f,e,v,x);t=r.makeTensorInfo(m,n.dtype,n.values)}return t}},{kernelName:rc,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{separator:a,nGramWidths:s,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=r,{data:h,dataSplits:p}=t,d=n.data.get(h.dataId).values,c=n.data.get(p.dataId).values,[f,m]=II(d,c,a,s,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}},{kernelName:rf,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{skipEmpty:a}=r,{input:s,delimiter:i}=t;if("string"!==s.dtype)throw Error("Input must be of datatype string");if(1!==s.shape.length)throw Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==i.shape.length)throw Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let o=n.data.get(s.dataId).values,l=n.data.get(i.dataId).values[0],[u,h,p]=IS(o,l,a),d=h.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",h),n.makeTensorInfo([2],"int32",new Int32Array(p))]}},{kernelName:rm,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{numBuckets:a}=r,{input:s}=t;if("string"!==s.dtype)throw Error("Input must be of datatype string");if(a<=0)throw Error("Number of buckets must be at least 1");let i=n.data.get(s.dataId).values,o=IN(i,a);return n.makeTensorInfo(s.shape,"int32",o)}},{kernelName:rg,backendName:"cpu",kernelFunc:wi},{kernelName:rt,backendName:"cpu",kernelFunc:vY},{kernelName:ry,backendName:"cpu",kernelFunc:IT},{kernelName:rb,backendName:"cpu",kernelFunc:IC},{kernelName:rx,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reps:s}=r;k0(a,"tile");let i=I$(n.bufferSync(a),s);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:rk,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{k:s,sorted:i}=r;k0(a,"topk");let o=n.data.get(a.dataId).values,[l,u]=IA(o,a.shape,a.dtype,s,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},{kernelName:rv,backendName:"cpu",kernelFunc:function(e){let{inputs:t,attrs:n,backend:r}=e,{image:a,transforms:s}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[h,p,d,c]=a.shape,[f,m]=null!=u?u:[p,d],g=[h,f,m,c],y=rX.computeStrides(a.shape),b=y[0],x=y[1],k=y[2],v=rX.computeStrides(g),w=v[0],I=v[1],S=v[2],N=rX.getTypedArrayFromDType(a.dtype,rX.sizeFromShape(g));N.fill(l);let T=r.data.get(a.dataId).values,C=r.data.get(s.dataId).values;for(let e=0;e<h;++e){let t=1===s.shape[0]?C:C.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let r=0;r<m;++r)for(let a=0;a<c;++a){let s;let u=t[6]*r+t[7]*n+1;if(0===u)continue;let h=(t[0]*r+t[1]*n+t[2])/u,c=(t[3]*r+t[4]*n+t[5])/u,f=IR(h,d,o),m=IR(c,p,o);switch(i){case"nearest":s=function(e,t,n,r,a,s,i,o,l,u,h){let p=Math.round(o),d=Math.round(l);return IF(e,t,n,r,a,s,i,p,d,u,h)}(T,p,d,b,x,k,e,m,f,a,l);break;case"bilinear":s=function(e,t,n,r,a,s,i,o,l,u,h){let p=Math.floor(o),d=Math.floor(l),c=p+1,f=d+1,m=(f-l)*IF(e,t,n,r,a,s,i,p,d,u,h)+(l-d)*IF(e,t,n,r,a,s,i,p,f,u,h),g=(f-l)*IF(e,t,n,r,a,s,i,c,d,u,h)+(l-d)*IF(e,t,n,r,a,s,i,c,f,u,h);return(c-o)*m+(o-p)*g}(T,p,d,b,x,k,e,m,f,a,l);break;default:throw Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}let g=e*w+n*I+r*S+a;N[g]=s}return r.makeTensorInfo(g,a.dtype,N)}let $=r.write(N,g,a.dtype);return{dataId:$,shape:a.shape,dtype:a.dtype}}},{kernelName:rw,backendName:"cpu",kernelFunc:vI},{kernelName:rI,backendName:"cpu",kernelFunc:function(e){let{inputs:t,attrs:n,backend:r}=e,{axis:a}=n,{x:s}=t;k0(s,"unique");let i=r.data.get(s.dataId).values,{outputValues:o,outputShape:l,indices:u}=ID(i,a,s.shape,s.dtype);return[r.makeTensorInfo(l,s.dtype,o),r.makeTensorInfo([u.length],"int32",u)]}},{kernelName:rS,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{value:a}=t,{axis:s}=r;s<0&&(s+=a.shape.length);let i=a.shape.length,o=a.shape[s],l=Array(i-1),u=0;for(let e=0;e<i;e++)e!==s&&(l[u++]=a.shape[e]);let h=Array(i).fill(0),p=a.shape.slice();p[s]=1;let d=Array(o);for(let e=0;e<d.length;e++){h[s]=e;let t=v_({inputs:{x:a},backend:n,attrs:{begin:h,size:p}});d[e]=vy({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return d}},{kernelName:rN,backendName:"cpu",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:s}=t,{numSegments:i}=r;k0(a,"unsortedSegmentSum");let o=a.shape.length,l=s.shape.length,u=[],h=[],p=o-l,d=s;for(let e=0;e<p;++e){let t=v7({inputs:{input:d},backend:n,attrs:{dim:e+1}});d=t,h.push(t)}for(let e=0;e<i;++e){let t=rX.createScalarValue(e,"int32"),r=n.makeTensorInfo([],"int32",t),s=vJ({inputs:{a:r,b:d},backend:n}),i=vp({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),o=vX({inputs:{a:i,b:a},backend:n}),l=vY({inputs:{x:o},backend:n,attrs:{axis:0,keepDims:!1}});u.push(l),h.push(r),h.push(s),h.push(i),h.push(o),h.push(l)}let c=wZ({inputs:u,backend:n,attrs:{axis:0}});return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}},{kernelName:rC,backendName:"cpu",kernelFunc:wY}];for(let e of I_)rU(e);let IO={},IM={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function IL(e,t){if(!(e in IO)||null!=t){let n=function(e,t){if(1!==e&&2!==e)throw Error("Cannot get WebGL rendering context, WebGL is disabled.");let n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw Error("Cannot create a canvas in this context")}(e):t;return(n.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete IO[e]},!1),eM.getBool("SOFTWARE_WEBGL_ENABLED")&&(IM.failIfMajorPerformanceCaveat=!1),1===e)?n.getContext("webgl",IM)||n.getContext("experimental-webgl",IM):n.getContext("webgl2",IM)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;IO[e]=n}let n=IO[e];return null==n||n.isContextLost()?(delete IO[e],IL(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),IO[e])}function Iz(e){let t=rX.sizeFromShape(e),n=Math.ceil(t/4);return rX.sizeToSquarishShape(n)}function IP(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function IB(e,t){let n,r,a,s,i,o,l,u,h,p;return 2===eM.getNumber("WEBGL_VERSION")?(n=e.R32F,r=e.R16F,a=e.RGBA16F,s=e.RGBA32F,i=e.RED,l=4,u=1,h=e.HALF_FLOAT,p=e.FLOAT,o=e.RGBA8):(n=e.RGBA,r=e.RGBA,a=e.RGBA,s=e.RGBA,i=e.RGBA,l=4,u=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT,o=e.RGBA),{internalFormatFloat:n,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:a,internalFormatPackedFloat:s,textureFormatFloat:i,downloadTextureFormat:o,downloadUnpackNumChannels:l,defaultNumChannels:u,textureTypeHalfFloat:h,textureTypeFloat:p}}function IW(e,t){let n=t();return eM.getBool("DEBUG")&&function(e){let t=e.getError();if(t!==e.NO_ERROR)throw Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function IV(e,t){return IY(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(T||(T={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(C||(C={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}($||($={}));let IU=/ERROR: [0-9]+:([0-9]+):/g;function IG(e,t){let n=IU.exec(t);if(null==n){console.log(`Couldn't parse line number in error: ${t}`),console.log(e);return}let r=+n[1],a=e.split("\n"),s=a.length.toString().length+2,i=a.map((e,t)=>rX.rightPad((t+1).toString(),s)+e),o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);let l=i.slice(0,r-1),u=i.slice(r-1,r),h=i.slice(r);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${rX.rightPad(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}function IH(e,t){if(IW(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),Error("Shader program validation failed.")}function Iq(e,t,n,r,a,s,i){let o=e.getAttribLocation(t,n);return -1!==o&&(IW(e,()=>e.bindBuffer(e.ARRAY_BUFFER,r)),IW(e,()=>e.vertexAttribPointer(o,a,e.FLOAT,!1,s,i)),IW(e,()=>e.enableVertexAttribArray(o)),!0)}function Ij(e,t,n){IW(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),IW(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function IK(e,t){IW(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),IW(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function IX(e){let t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function IY(e,t,n){let r=IW(e,()=>t());if(null==r)throw Error(n);return r}function IZ(e,t=2){return rX.sizeFromShape(e.slice(0,e.length-t))}function IJ(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function IQ(e){let t=[1,1,1],n=0===e.length||1===e.length&&1===e[0];return n||(t=[IZ(e),...IJ(e)]),t}function I0(e,t){if(e=e.slice(-2),t=t.slice(-2),rX.arraysEqual(e,t)||!e.length||!t.length||0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){let n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r||n%2==0&&r%2==0&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&e[0]%2==0&&t[0]%2==0}function I1(e,t){let n=e.getExtension(t);return null!=n}function I2(e){try{let t=IL(e);if(null!=t)return!0}catch(e){console.log("Error when getting WebGL context: ",e)}return!1}function I3(e){let t=IB(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);let r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);let a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),a}function I4(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&rX.assert("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}let I6=eM;function I5(){let e,t,n,r,a,s,i,o,l,u;return 2===eM.getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",a="texture",s="outputColor",i="out vec4 outputColor;",o=eM.getBool("WEBGL2_ISNAN_CUSTOM")?`
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    `:"",l="",u=`
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `):(e="",t="attribute",n="varying",r="varying",a="texture2D",s="gl_FragColor",i="",o=`
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `,l=`
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `,u=`
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:a,output:s,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function I8(e,t,n="index"){let r=rX.computeStrides(t);return r.map((t,a)=>{let s=`int ${e[a]} = ${n} / ${t}`,i=a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`;return`${s}; ${i};`}).join("")}function I7(e,t,n="index"){let r=rX.computeStrides(t);return r.map((t,a)=>{let s=`int ${e[a]} = ${n} / outShapeStrides[${a}]`,i=a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * outShapeStrides[${a}]`:`index -= ${e[a]} * outShapeStrides[${a}]`;return`${s}; ${i};`}).join("")}function I9(e){let t=rX.computeStrides(e).map(e=>e.toString());return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;
  }
`}function Se(){return`
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`}I6.registerFlag("HAS_WEBGL",()=>I6.getNumber("WEBGL_VERSION")>0),I6.registerFlag("WEBGL_VERSION",()=>I2(2)?2:I2(1)?1:0),I6.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),I6.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===I6.get("WEBGL_VERSION")),I6.registerFlag("WEBGL_CPU_FORWARD",()=>!0),I6.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),I6.registerFlag("WEBGL_PACK",()=>I6.getBool("HAS_WEBGL")),I6.registerFlag("WEBGL_PACK_NORMALIZATION",()=>I6.getBool("WEBGL_PACK")),I6.registerFlag("WEBGL_PACK_CLIP",()=>I6.getBool("WEBGL_PACK")),I6.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>I6.getBool("WEBGL_PACK")),I6.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>I6.getBool("WEBGL_PACK")),I6.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>I6.getBool("WEBGL_PACK")),I6.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>I6.getBool("WEBGL_PACK")),I6.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>I6.getBool("WEBGL_PACK")),I6.registerFlag("WEBGL_PACK_REDUCE",()=>I6.getBool("WEBGL_PACK")),I6.registerFlag("WEBGL_LAZILY_UNPACK",()=>I6.getBool("WEBGL_PACK")),I6.registerFlag("WEBGL_CONV_IM2COL",()=>I6.getBool("WEBGL_PACK")),I6.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>(function(e){if(null==s){let t=IL(e);s=t.getParameter(t.MAX_TEXTURE_SIZE)}return s})(I6.getNumber("WEBGL_VERSION"))),I6.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>(function(e){if(null==i){let t=IL(e);i=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,i)})(I6.getNumber("WEBGL_VERSION"))),I6.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{let e=I6.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t=IL(e);return I1(t,"EXT_disjoint_timer_query_webgl2")&&2===e?2:I1(t,"EXT_disjoint_timer_query")?1:0}(e)}),I6.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>I6.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!a1.isMobile()),I6.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>(function(e){if(0===e)return!1;let t=IL(e);if(1===e){if(!I1(t,"OES_texture_float"))return!1}else if(!I1(t,"EXT_color_buffer_float"))return!1;let n=I3(t);return n})(I6.getNumber("WEBGL_VERSION"))),I6.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!I6.getBool("WEBGL_FORCE_F16_TEXTURES")&&I6.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),I6.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>(function(e){if(0===e)return!1;let t=IL(e);if(1===e){if(!I1(t,"OES_texture_float")||!I1(t,"WEBGL_color_buffer_float"))return!1}else{if(I1(t,"EXT_color_buffer_float"))return I3(t);let e="EXT_color_buffer_half_float";if(I1(t,e)){let n=t.getExtension(e);return function(e,t){let n=IB(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);let a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);let s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(a),s}(t,n)}return!1}let n=I3(t);return n})(I6.getNumber("WEBGL_VERSION"))),I6.registerFlag("WEBGL_FENCE_API_ENABLED",()=>(function(e){if(2!==e)return!1;let t=IL(e),n=null!=t.fenceSync;return n})(I6.getNumber("WEBGL_VERSION"))),I6.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>{let e=I6.getBool("WEBGL_RENDER_FLOAT32_ENABLED");return e?4:0}),I6.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if(e<0&&-1!==e)throw Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}),I6.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>a1.isMobile()?1:-1,e=>{if(e<0&&-1!==e)throw Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}),I6.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),I6.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),I6.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),I6.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),I6.registerFlag("WEBGL_EXP_CONV",()=>!1),I6.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>I6.getBool("IS_TEST")),I6.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),I6.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),I6.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1);let St=`
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`,{getBroadcastDims:Sn}=ch,Sr=`
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,Sa=`
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,Ss=`
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`,Si=`
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;function So(){return`
    int getOutputCoords() {
      return 0;
    }
  `}function Sl(e){return`offset${e}`}function Su(e){let t=e.name,n=rX.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`
    for (int i = 0; i < ${n}; i++) {
      if (i == index) {
        return ${t}[i];
      }
    }
  `}function Sh(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function Sp(e,t,n){let{newShape:r,keptDims:a}=rX.squeezeShape(t),s=t.length,i=e&&3===s&&1===t[0],o=i?t.slice(1):r,l=!e&&s>1&&!rX.arraysEqual(t,n)&&r.length<s||i,u=l?o:t;return{useSqueezeShape:l,uniformShape:u,keptDims:a}}function Sd(e,t){let n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function Sc(e,t){return t.map(t=>e[t]).join(", ")}function Sf(e,t,n){let r,a,s;let i={},o={},l={},u=[],h=null,p=null;p=e.getUniformLocation(n,"NAN",!1),1===eM.getNumber("WEBGL_VERSION")&&(h=e.getUniformLocation(n,"INFINITY",!1));for(let r=0;r<t.variableNames.length;r++){let a=t.variableNames[r];i[a]=e.getUniformLocation(n,a,!1),i[`offset${a}`]=e.getUniformLocation(n,`offset${a}`,!1),t.enableShapeUniforms&&(o[`${a}Shape`]=e.getUniformLocation(n,`${a}Shape`,!1),l[`${a}TexShape`]=e.getUniformLocation(n,`${a}TexShape`,!1))}return t.enableShapeUniforms&&(r=e.getUniformLocation(n,"outShape",!1),s=e.getUniformLocation(n,"outShapeStrides",!1),a=e.getUniformLocation(n,"outTexShape",!1)),t.customUniforms&&t.customUniforms.forEach((t,r)=>{u[r]=e.getUniformLocation(n,t.name,!1)}),{uniformLocations:i,customUniformLocations:u,infLoc:h,nanLoc:p,inShapesLocations:o,inTexShapesLocations:l,outShapeLocation:r,outShapeStridesLocation:s,outTexShapeLocation:a}}function Sm(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,n)=>{let r=e.logicalShape,a=t[n],s=a.shape;if(!rX.arraysEqual(r,s))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${s} must match`);if(e.isUniform&&a.isUniform)return;let i=e.texShape,o=a.isUniform?null:a.texData.texShape;if(!rX.arraysEqual(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)})}function Sg(e){return eM.getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class Sy{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=T.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=I5();this.outputShape=e,this.enableShapeUniforms=Sg(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?I7(["r","c","d"],e):I8(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t.output} = result;
      }
    `}}class Sb{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=T.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];let t=I5();this.outputShape=e,this.enableShapeUniforms=Sg(this.outputShape.length),this.userCode=`
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms?I7(["r","c","d"],e):I8(["r","c","d"],e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t.output} = result;
      }
    `}}class Sx{constructor(e){this.variableNames=["A"],this.outTexUsage=C.DOWNLOAD;let t=I5();this.outputShape=e,this.userCode=`
      ${St}

      void main() {
        float x = getAAtOutCoords();
        ${t.output} = encode_float(x);
      }
    `}}class Sk{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=C.DOWNLOAD;let t=I5();this.outputShape=e,this.userCode=`
      ${St}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t.output} = encode_float(x);
      }
    `}}class Sv{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];let n=I5();this.outputShape=e,this.enableShapeUniforms=Sg(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)"),this.userCode=`
      ${this.enableShapeUniforms?Se():I9(e)}

      void main() {
        ivec3 coords = getOutputCoords();

        int flatIndex = getFlatIndex(coords);
        int offset = imod(flatIndex, 4);

        flatIndex = idiv(flatIndex, 4, 1.);

        int r = flatIndex / texShape[1];
        int c = imod(flatIndex, texShape[1]);
        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
        vec4 values = ${n.texture2D}(A, uv);

        float result;

        if(offset == 0) {
          result = values[0];
        } else if(offset == 1) {
          result = values[1];
        } else if(offset == 2) {
          result = values[2];
        } else {
          result = values[3];
        }

        ${n.output} = vec4(${r}, 0., 0., 0.);
      }
    `}}class Sw{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];let n=I5();this.outputShape=e,this.enableShapeUniforms=Sg(this.outputShape.length);let r="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let a=0;a<=1;a++){let s=2*t+a;r+=`
          localCoords = coords;
          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {
          localCoords[2] += ${a};
          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {
            localCoords[1] += ${t};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${n.texture2D}(A, uv);

            if (offset == 0) {
              result[${s}] = values[0];
            } else if (offset == 1) {
              result[${s}] = values[1];
            } else if (offset == 2) {
              result[${s}] = values[2];
            } else {
              result[${s}] = values[3];
            }
          }
        }
        `}this.userCode=`
        ${this.enableShapeUniforms?Se():I9(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${r}

          ${n.output} = ${a};
        }
    `}}function SI(e,t,n,r,a,s){!function(e,t){let n=eM.getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0){let n=`[${e}x${t}]`;throw Error("Requested texture size "+n+" is invalid.")}if(e>n||t>n){let r=`[${e}x${t}]`,a=`[${n}x${n}]`;throw Error("Requested texture size "+r+" greater than WebGL maximum on this browser / GPU "+a+".")}}(t,n);let i=IY(e,()=>e.createTexture(),"Unable to create WebGLTexture."),o=e.TEXTURE_2D;return IW(e,()=>e.bindTexture(o,i)),IW(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),IW(e,()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),IW(e,()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST)),IW(e,()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST)),1===eM.getNumber("WEBGL_VERSION")?IW(e,()=>e.texImage2D(o,0,r,t,n,0,a,s,null)):IW(e,()=>e.texStorage2D(o,1,r,t,n)),IW(e,()=>e.bindTexture(e.TEXTURE_2D,null)),{texture:i,texShape:[n,t]}}function SS(e){return e.internalFormatFloat}function SN(e){return e.internalFormatHalfFloat}function ST(e){return e.downloadTextureFormat}function SC(e){return e.internalFormatPackedFloat}function S$(e){return e.internalFormatPackedHalfFloat}class SE{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];let t=eM.getNumber("WEBGL_VERSION");null!=e?(this.gl=e,IO[t]=e):this.gl=IL(t);let n="WEBGL_color_buffer_float",r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===eM.getNumber("WEBGL_VERSION")){let e="OES_texture_half_float";if(this.textureFloatExtension=IV(this.gl,"OES_texture_float"),I1(this.gl,e))this.textureHalfFloatExtension=IV(this.gl,e);else if(eM.get("WEBGL_FORCE_F16_TEXTURES"))throw Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),I1(this.gl,r))this.colorBufferHalfFloatExtension=IV(this.gl,r);else if(eM.get("WEBGL_FORCE_F16_TEXTURES"))throw Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",I1(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else if(I1(this.gl,r))this.colorBufferHalfFloatExtension=this.gl.getExtension(r);else throw Error("GL context does not support color renderable floats");this.vertexBuffer=function(e){let t=new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]);return function(e,t){let n=IY(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return IW(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),IW(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,t)}(this.gl),this.indexBuffer=function(e){let t=new Uint16Array([0,1,2,2,1,3]);return function(e,t){let n=IY(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return IW(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),IW(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}(e,t)}(this.gl),this.framebuffer=function(e){return IY(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=IB(this.gl,this.textureHalfFloatExtension)}get debug(){return eM.getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");let e=this.gl;IW(e,()=>e.finish()),IW(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),IW(e,()=>e.deleteFramebuffer(this.framebuffer)),IW(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),IW(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),IW(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){let[a,s]=[n,t];return SI(e,a,s,SS(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){let[a,s]=[n,t];return SI(e,a,s,SN(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){let[a,s]=[n,t];return SI(e,a,s,ST(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){var n;this.throwIfDisposed(),IW(n=this.gl,()=>n.bindTexture(n.TEXTURE_2D,e)),t.data instanceof Uint8Array?2===eM.getNumber("WEBGL_VERSION")?IW(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,t.width,t.height,n.RGBA,n.UNSIGNED_BYTE,t.data)):IW(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,t.width,t.height,0,n.RGBA,n.UNSIGNED_BYTE,t.data)):2===eM.getNumber("WEBGL_VERSION")?IW(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,n.RGBA,n.UNSIGNED_BYTE,t)):IW(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,t)),IW(n,()=>n.bindTexture(n.TEXTURE_2D,null))}uploadDenseMatrixToTexture(e,t,n,r){var a,s;let i,o,l;this.throwIfDisposed(),a=this.gl,s=this.textureConfig,IW(a,()=>a.bindTexture(a.TEXTURE_2D,e)),r instanceof Uint8Array?(i=new Uint8Array(t*n*4),o=a.UNSIGNED_BYTE,l=a.RGBA):(i=new Float32Array(t*n*4),o=a.FLOAT,l=s.internalFormatPackedFloat),i.set(r),2===eM.getNumber("WEBGL_VERSION")?IW(a,()=>a.texSubImage2D(a.TEXTURE_2D,0,0,0,t,n,a.RGBA,o,i)):IW(a,()=>a.texImage2D(a.TEXTURE_2D,0,l,t,n,0,a.RGBA,o,i)),IW(a,()=>a.bindTexture(a.TEXTURE_2D,null))}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){let[a,s]=IP(t,n);return SI(e,a,s,S$(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){let[a,s]=IP(t,n);return SI(e,a,s,SC(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(IK(this.gl,this.framebuffer),this.outputTexture=null),IW(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>(function(e,t,n,r){let[a,s]=[n,t],i=new Uint8Array(t*n*4);return IW(e,()=>e.readPixels(0,0,a,s,r.downloadTextureFormat,e.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)})(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,r,a,s){return function(e,t,n,r,a,s,i,o){let l=new Float32Array(function(e,t){let[n,r]=IP(e,t);return n*r*4}(s,i));return e.bindBuffer(e.PIXEL_PACK_BUFFER,t),e.getBufferSubData(e.PIXEL_PACK_BUFFER,0,l),e.bindBuffer(e.PIXEL_PACK_BUFFER,null),l}(this.gl,e,0,0,0,a,s,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){let r=new Float32Array(n);return e.bindBuffer(e.PIXEL_PACK_BUFFER,t),e.getBufferSubData(e.PIXEL_PACK_BUFFER,0,r),e.bindBuffer(e.PIXEL_PACK_BUFFER,null),r}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);let r=function(e,t,n,r){let a=e.createBuffer();IW(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a));let s=16*t*n;return IW(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,s,e.STREAM_READ)),IW(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),IW(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),a}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){let e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(eM.getBool("WEBGL_FENCE_API_ENABLED")){let r=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{let t=e.clientWaitSync(r,0,0);return t===e.ALREADY_SIGNALED||t===e.CONDITION_SATISFIED},t=r}else eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>(function(e,t,n){let r=new Float32Array(t*n*4);return IW(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r)),r})(this.gl,t,n))}createProgram(e){this.throwIfDisposed();let t=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){let t=I5(),n=`${t.version}
    precision highp float;
    ${t.attribute} vec3 clipSpacePos;
    ${t.attribute} vec2 uv;
    ${t.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;return function(e,t){let n=IY(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(IW(e,()=>e.shaderSource(n,t)),IW(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),Error("Failed to compile vertex shader.");return n}(e,n)}(t));let n=IY(t,()=>t.createProgram(),"Unable to create WebGLProgram.");return IW(t,()=>t.attachShader(n,this.vertexShader)),IW(t,()=>t.attachShader(n,e)),!function(e,t){if(IW(e,()=>e.linkProgram(t)),!eM.get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&IH(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){IW(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n));let r=Iq(e,t,"clipSpacePos",n,3,20,0);return r&&Iq(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&IW(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&IH(this.gl,this.program),IW(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){var r,a;return(this.throwIfDisposed(),n)?IY(r=this.gl,()=>r.getUniformLocation(e,a),'uniform "'+(a=t)+'" not present in program.'):this.gl.getUniformLocation(e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),IW(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){var r;this.throwIfDisposed(),this.throwIfNoProgram(),IW(r=this.gl,()=>{(function(e,t){let n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){let e=`[gl.TEXTURE0, gl.TEXTURE${n}]`;throw Error(`textureUnit must be in ${e}.`)}})(r,n),IW(r,()=>r.activeTexture(r.TEXTURE0+n)),IW(r,()=>r.bindTexture(r.TEXTURE_2D,e))}),IW(r,()=>r.uniform1i(t,n))}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();let[r,a]=IP(t,n);this.setOutputMatrixTextureDriver(e,r,a)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&IH(this.gl,this.program),IX(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();let e=this.gl;this.debug&&this.debugValidate(),IW(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),IW(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=IV(this.gl,2===eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){let e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}let e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){let e=this.gl,t=this.getQueryTimerExtensionWebGL2();e.endQuery(t.TIME_ELAPSED_EXT);return}let e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await rX.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){let t=this.gl,n=t.getQueryParameter(e,t.QUERY_RESULT);return n/1e6}{let t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT);return n/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){let t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{let t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){let e=function(e){let t=0;for(;t<e.length;++t){let n=e[t]();if(!n)break}return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){let{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){let n;this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||("setTimeoutCustom"in eM.platform&&(n=eM.platform.setTimeoutCustom.bind(eM.platform)),rX.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,n))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),Ij(this.gl,e,this.framebuffer),this.debug&&IX(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(Ij(this.gl,this.outputTexture,this.framebuffer),this.debug&&IX(this.gl)):IK(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);let n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();let r=this.gl;Ij(r,e,this.framebuffer),this.debug&&IX(r),this.outputTexture=e,IW(r,()=>r.viewport(0,0,t,n)),IW(r,()=>r.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),IW(this.gl,()=>this.gl.scissor(e,t,n,r))}throwIfDisposed(){if(this.disposed)throw Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw Error("No GPU program is currently set.")}}var SA={};R(SA,"simpleAbsImpl",()=>vx),R(SA,"addImpl",()=>vf),R(SA,"bincountImpl",()=>vO),R(SA,"bincountReduceImpl",()=>vM),R(SA,"castImpl",()=>vh),R(SA,"ceilImpl",()=>vL),R(SA,"concatImpl",()=>vB),R(SA,"equalImpl",()=>vZ),R(SA,"expImpl",()=>v5),R(SA,"expm1Impl",()=>v9),R(SA,"floorImpl",()=>wu),R(SA,"gatherNdImpl",()=>wc),R(SA,"gatherV2Impl",()=>wf),R(SA,"greaterImpl",()=>wm),R(SA,"greaterEqualImpl",()=>wy),R(SA,"lessImpl",()=>ww),R(SA,"lessEqualImpl",()=>wS),R(SA,"linSpaceImpl",()=>wT),R(SA,"logImpl",()=>wC),R(SA,"maxImpl",()=>wO),R(SA,"maximumImpl",()=>wL),R(SA,"minimumImpl",()=>wP),R(SA,"multiplyImpl",()=>vj),R(SA,"negImpl",()=>wG),R(SA,"notEqualImpl",()=>wK),R(SA,"prodImpl",()=>w1),R(SA,"raggedGatherImpl",()=>w3),R(SA,"raggedTensorToTensorImpl",()=>w7),R(SA,"rangeImpl",()=>w9),R(SA,"rsqrtImpl",()=>In),R(SA,"scatterImpl",()=>Ia),R(SA,"sigmoidImpl",()=>va),R(SA,"sliceImpl",()=>vD),R(SA,"sparseFillEmptyRowsImpl",()=>Ic),R(SA,"sparseReshapeImpl",()=>If),R(SA,"sparseSegmentReductionImpl",()=>Im),R(SA,"sqrtImpl",()=>Ig),R(SA,"squaredDifferenceImpl",()=>Ib),R(SA,"stridedSliceImpl",()=>Iv),R(SA,"stringNGramsImpl",()=>II),R(SA,"stringSplitImpl",()=>IS),R(SA,"stringToHashBucketFastImpl",()=>IN),R(SA,"subImpl",()=>wa),R(SA,"tileImpl",()=>I$),R(SA,"topKImpl",()=>IA),R(SA,"transposeImpl",()=>vw),R(SA,"uniqueImpl",()=>ID);let{addImpl:SR,bincountImpl:SF,bincountReduceImpl:SD,castImpl:S_,ceilImpl:SO,concatImpl:SM,equalImpl:SL,expImpl:Sz,expm1Impl:SP,floorImpl:SB,gatherNdImpl:SW,gatherV2Impl:SV,greaterImpl:SU,greaterEqualImpl:SG,lessImpl:SH,lessEqualImpl:Sq,linSpaceImpl:Sj,logImpl:SK,maxImpl:SX,maximumImpl:SY,minimumImpl:SZ,multiplyImpl:SJ,negImpl:SQ,notEqualImpl:S0,prodImpl:S1,raggedGatherImpl:S2,raggedTensorToTensorImpl:S3,rangeImpl:S4,rsqrtImpl:S6,scatterImpl:S5,sigmoidImpl:S8,simpleAbsImpl:S7,sliceImpl:S9,sparseFillEmptyRowsImpl:Ne,sparseReshapeImpl:Nt,sparseSegmentReductionImpl:Nn,sqrtImpl:Nr,stridedSliceImpl:Na,stringNGramsImpl:Ns,stringSplitImpl:Ni,stringToHashBucketFastImpl:No,subImpl:Nl,tileImpl:Nu,topKImpl:Nh,transposeImpl:Np,uniqueImpl:Nd}=SA;function Nc(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function Nf(e,t){return 1===t?[e]:Nc(e,t)}class Nm{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=Sg(this.outputShape.length),0===this.rank)this.userCode=`
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;else{let e=Nf("rc",this.rank),t=Sh(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),a=this.getOutput(e);this.userCode=`
        void main() {
          ${t} rc = getOutputCoords();

          if(${n}) {
            setOutput(vec4(0));
          } else {
            ${r}

            setOutput(vec4(${a}));
          }
        }
      `}}getSourceCoordsArr(e){let t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let a=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)a=`${e[e.length-1-t]},`+a;t.push(a)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";let t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`
      int r = ${t[0]};
      int c = ${t[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${n};
      bool rEdge = rp1 >= ${r};
    `}getOutput(e){let t=this.getSourceCoordsArr(e);if(1===this.rank){let e=this.enableShapeUniforms?"outShape":this.outputShape[0];return`getA(rc), (rc + 1 >= ${e} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),
            cEdge ? 0. : getA(${t[1]}),
            rEdge ? 0. : getA(${t[2]}),
            rEdge || cEdge ? 0. : getA(${t[3]})`}}class Ng{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=Sg(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`
        ${t}
        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${e}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${e>0?"}":""}
      `}this.userCode=`
      ${function(e,t){let n=t?function(e,t,n="index"){let r=e.map((e,t)=>t),a=function(e,t){let n=e.length,r=e.map(e=>`${t}[${e}]`),a=Array(n-1);a[n-2]=r[n-1];for(let e=n-3;e>=0;--e)a[e]=`(${a[e+1]} * ${r[e+1]})`;return a}(r,t);return a.map((t,r)=>{let s=`int ${e[r]} = ${n} / ${a[r]}`,i=r===a.length-1?`int ${e[r+1]} = ${n} - ${e[r]} * ${a[r]}`:`index -= ${e[r]} * ${a[r]}`;return`${s}; ${i};`}).join("")}(["r","c","d"],"inputShape"):I8(["r","c","d"],e);return`
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${n}
      return ivec3(r, c, d);
    }
  `}(t,this.enableShapeUniforms)}
      ${this.enableShapeUniforms?Se():I9(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};
        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};

        ${n}

        setOutput(result);
      }
    `}}class Ny{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){let r;let a=Nx(t,n),s=Nk(e,a,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);let i=Nb(e,a,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();let e=this.freeTextures[s].shift();return this.usedTextures[s].push(e),e}return a===$.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):a===$.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):a===$.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):a===$.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):a===$.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[s].push(r),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),r}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;let a=Nx(n,r),s=Nk(t,a,r);s in this.freeTextures||(this.freeTextures[s]=[]);let i=Nb(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=eM.get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[s].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;let l=this.usedTextures[s],u=l.indexOf(e);if(u<0)throw Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;let e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);let t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(let e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(let e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Nb(e,t,n,r,a){let s;let i=function(e,t){switch(e){case $.PACKED_2X2_FLOAT32:return SC(t);case $.PACKED_2X2_FLOAT16:return S$(t);case $.UNPACKED_FLOAT32:return SS(t);case $.UNPACKED_FLOAT16:return SN(t);case $.PACKED_4X1_UNSIGNED_BYTE:return ST(t);default:throw Error(`Unknown physical texture type ${e}`)}}(t,r);if(a){let[t,n]=IP(e[0],e[1]);s=t*n}else{var o;let[t,n]=(o=e[0],[e[1],o]);s=t*n}let l=function(e,t){if(t===e.R32F)return 4;if(t===e.R16F)return 2;if(t===e.RGBA32F||t===e.RGBA)return 16;if(t===e.RGBA16F)return 8;if(t===e.RGBA8)return 4;throw Error(`Unknown internal format ${t}`)}(n,i);return s*l}function Nx(e,t){if(e===C.UPLOAD)return $.PACKED_2X2_FLOAT32;if(e===C.RENDER||null==e)return eM.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?$.PACKED_2X2_FLOAT32:$.UNPACKED_FLOAT32:t?$.PACKED_2X2_FLOAT16:$.UNPACKED_FLOAT16;if(e===C.DOWNLOAD||e===C.PIXELS)return $.PACKED_4X1_UNSIGNED_BYTE;throw Error(`Unknown logical texture type ${e}`)}function Nk(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class Nv{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=Sg(this.outputShape.length),this.userCode=`
      float unaryOperation(float x) {
        ${t}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `}}let Nw="if (isnan(x)) return x;",NI="return abs(x);",NS=Nw+`
  return (x < 0.0) ? 0.0 : x;
`,NN=Nw+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,NT="return x;",NC=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,N$=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,NE=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;class NA{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=Sg(this.outputShape.length),this.userCode=`
      vec4 unaryOperation(vec4 x) {
        ${t}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `}}class NR{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=Sg(this.outputShape.length);let t=e.length,n=Nf("rc",t),r=Sh(t),a=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),s=n.slice(-2),i=t<=1?"rc":`vec2(${s.join(",")})`;this.userCode=`
      void main() {
        ${r} rc = getOutputCoords();
        vec4 packedInput = getA(${a});

        setOutput(getChannel(packedInput, ${i}));
      }
    `}}let NF=fm.whereImpl,ND={},N_=eM.getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class NO extends M{constructor(e){let t;if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!eM.getBool("HAS_WEBGL"))throw Error("WebGL is not supported on this device");if(null!=e){if(e instanceof SE)t=e;else{let n=IL(eM.getNumber("WEBGL_VERSION"),e);t=new SE(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{let e=IL(eM.getNumber("WEBGL_VERSION"));t=new SE(e),this.binaryCache=function(e){return e in ND||(ND[e]={}),ND[e]}(eM.getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new Ny(this.gpgpu),this.numMBBeforeWarning=null==eM.global.screen?1024:eM.global.screen.height*eM.global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new O(this,aQ)}nextDataId(){return NO.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((eM.getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||eM.getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");let r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:C.UPLOAD,refCount:1}),r}refCount(e){if(this.texData.has(e)){let t=this.texData.get(e);return t.refCount}return 0}incRef(e){let t=this.texData.get(e);t.refCount++}decRef(e){if(this.texData.has(e)){let t=this.texData.get(e);t.refCount--}}move(e,t,n,r,a){if(eM.getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:C.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){let t,n;let r=this.texData.get(e),{values:a,dtype:s,complexTensorInfos:i,slice:o,shape:l,isPacked:u}=r;if(null!=o){let t;t=u?new NA(l,NT):new Nv(l,NT);let n=this.runWebGLProgram(t,[{dataId:e,shape:l,dtype:s}],s),r=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=a)return this.convertAndCacheOnCPU(e);if("string"===s)return a;let h=null!=this.activeTimers;if(h&&(t=rX.now()),"complex64"===s){let e=this.readSync(i.real.dataId),t=this.readSync(i.imag.dataId);n=ch.mergeRealAndImagArrays(e,t)}else n=this.getValuesFromTexture(e);return h&&(this.downloadWaitMs+=rX.now()-t),this.convertAndCacheOnCPU(e,n)}async read(e){let t,n;if(this.pendingRead.has(e)){let t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}let r=this.texData.get(e),{values:a,shape:s,slice:i,dtype:o,complexTensorInfos:l,isPacked:u}=r;if(null!=i){let t;t=u?new NA(s,NT):new Nv(s,NT);let n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:o}],o),r=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),r}if(null!=a)return this.convertAndCacheOnCPU(e);if(eM.getBool("DEBUG")&&!eM.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===eM.getNumber("WEBGL_VERSION"))throw Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let h=null;if("complex64"!==o&&eM.get("WEBGL_BUFFER_SUPPORTED")){t=this.decode(e);let n=this.texData.get(t.dataId);h=this.gpgpu.createBufferFromTexture(n.texture.texture,...Iz(s))}if(this.pendingRead.set(e,[]),"complex64"!==o&&await this.gpgpu.createAndWaitForFence(),"complex64"===o){let e=await Promise.all([this.read(l.real.dataId),this.read(l.imag.dataId)]),t=e[0],r=e[1];n=ch.mergeRealAndImagArrays(t,r)}else if(null==h)n=this.getValuesFromTexture(e);else{let e=rX.sizeFromShape(s);n=this.gpgpu.downloadFloat32MatrixFromBuffer(h,e)}if(null!=t&&this.disposeIntermediateTensorInfo(t),null!=h){let e=this.gpgpu.gl;IW(e,()=>e.deleteBuffer(h))}let p=this.convertAndCacheOnCPU(e,n),d=this.pendingRead.get(e);return this.pendingRead.delete(e),d.forEach(e=>e(p)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&aQ.removeDataId(e,this),this.pendingDeletes--),p}readToGPU(e,t={}){let n=this.texData.get(e),{values:r,shape:a,slice:s,dtype:i,isPacked:o,texture:l}=n;if("complex64"===i)throw Error("Does not support reading texture for complex64 dtype.");if(null!=s){let n;n=o?new NA(a,NT):new Nv(a,NT);let r=this.runWebGLProgram(n,[{dataId:e,shape:a,dtype:i}],i),s=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),s}if(null==l){if(null!=r)throw Error("Data is not on GPU but on CPU.");throw Error("There is no data on GPU or CPU.")}let u=this.decode(e,t.customTexShape),h=aQ.makeTensorFromTensorInfo(u),p=this.texData.get(u.dataId);return Object.assign({tensorRef:h},p.texture)}bufferSync(e){let t=this.readSync(e.dataId);if("string"===e.dtype)try{let n=t.map(e=>rX.decodeString(e));return iI(e.shape,e.dtype,n)}catch(e){throw Error("Failed to decode encoded string bytes into utf-8")}return iI(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){let n=e[t];if(!(eM.getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===n||596e-10<Math.abs(n)&&65504>Math.abs(n))){if(eM.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){let{shape:t,dtype:n,isPacked:r}=this.texData.get(e),a=rX.sizeFromShape(t);if(eM.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){let n=this.decode(e),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...Iz(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),s}let s=eM.getBool("WEBGL_PACK")&&!0===r,i=s?IQ(t):t,o=s?new Sk(i):new Sx(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),h=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),h}timerAvailable(){return eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){let t=this.activeTimers,n=[],r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();let a=rX.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),s=rX.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,r&&(this.programTimersStack=null);let i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){let e=await Promise.all(a);i.kernelMs=rX.sum(e),i.getExtraProfileInfo=()=>e.map((e,t)=>({name:s[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:rX.now(),endMs:null}}endTimer(e){return eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=rX.now(),e)}async getQueryTime(e){return eM.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);let{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){let{texture:t,dtype:n,texShape:r,usage:a,isPacked:s,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,a,s)));let u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=N_){return eM.getBool("WEBGL_CPU_FORWARD")&&e.every(e=>null==this.texData.get(e.dataId).texture&&rX.sizeFromShape(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){ch.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");let t=e.dataSync();return NF(e.shape,t)}packedUnaryOp(e,t,n){let r=new NA(e.shape,t),a=this.compileAndRun(r,[e],n);return aQ.makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){let t=S7(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(eM.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,NI,e.dtype);let t=new Nv(e.shape,NI),n=this.compileAndRun(t,[e]);return aQ.makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&rX.isString(n[0])){let a=n.map(e=>rX.encodeString(e));r=this.write(a,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){return aQ.makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){let t=new NR(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){let t=new Nm(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){let n=[IZ(e.shape),...IJ(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},a=[IZ(t),...IJ(t)],s=new Ng(a,n),i=[n],o=this.runWebGLProgram(s,[r],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){let n;let r=this.texData.get(e),{isPacked:a,shape:s,dtype:i}=r;if(null!=t){let e=rX.sizeFromShape(s),n=t[0]*t[1]*4;rX.assert(e<=n,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}let o=IQ(s);n=a?new Sb(o):new Sy(o);let l=[null!=t?t:Iz(o)],u=this.runWebGLProgram(n,[{shape:o,dtype:i,dataId:e}],i,l,!0,t);return{dtype:i,shape:s,dataId:u.dataId}}runWebGLProgram(e,t,n,r,a=!1,s){let i;let o=this.makeTensorInfo(e.outputShape,n),l=this.texData.get(o.dataId);if(e.packedOutput&&(l.isPacked=!0),e.outPackingScheme===T.DENSE){let t=null!=s?s:Iz(e.outputShape);l.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(l.usage=e.outTexUsage),0===rX.sizeFromShape(o.shape))return l.values=rX.getTypedArrayFromDType(o.dtype,0),o;let u=[],h=t.map(t=>{if("complex64"===t.dtype)throw Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&rX.sizeFromShape(t.shape)<=eM.getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),u.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!I0(n.shape,t.shape)){let e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),u.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}});this.uploadToGPU(o.dataId);let p={shape:o.shape,texData:l,isUniform:!1},d=function(e,t,n){let r="";t.concat(n).forEach(t=>{let a=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){let s=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:l}=Sp(e.packedInputs,t.shape,s),u="",h="",p="";if(1===o.length&&e.packedInputs){let e=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){let e=rX.computeStrides(o);p=`${e[0]===s[1]}_${e[e.length-1]===s[1]}`}}else h=`${o[0]>1}_${o[1]>1}`;let d=t.shape.length,c=2===o.length&&rX.arraysEqual(t.shape,s),f=1===rX.sizeFromShape(t.shape),m=ch.getBroadcastDims(t.shape,n.shape),g=!e.packedInputs&&d===n.shape.length&&rX.arraysEqual(s,n.texData.texShape),y=e.packedInputs||o.length>2?"":`${s[0]>1}_${s[1]>1}`;r+=`${d}_${g}_${i?l:""}_${o.length}_${f}_${m}_${c}_${u}_${h}_${p}_${y}_${a}`}else{let e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${a}`}});let a=e.userCode;return e.constructor.name+("_"+r+"_"+a)+`${eM.getNumber("WEBGL_VERSION")}`}(e,h,p),c=this.getAndSaveBinary(d,()=>(function(e,t,n,r){let a=n.map((e,n)=>{let r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}}),s=a.map(e=>e.shapeInfo),i={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},o=function(e,t,n){let r,a;let s=[];if(e.forEach(e=>{let t=rX.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){let{uniformShape:t}=Sp(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}}),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach(e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)});let i=s.join("\n"),o=e.map(e=>(function(e,t,n=!1,r){let a="";n?a+=function e(t,n){let r=t.shapeInfo.logicalShape;switch(r.length){case 0:return function(e){let t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=I5();return`
    vec4 ${n}() {
      return ${r.texture2D}(${t}, halfCR);
    }
  `}(t);case 1:return function(e,t){let n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,s=I5();if(t)return`
    vec4 ${r}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${n}, uv);
    }
  `;let i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`
    vec4 ${r}(int index) {
      vec2 uv = packedUVfrom1D(
        ${i[0]}, ${i[1]}, index);
      return ${s.texture2D}(${n}, uv);
    }
  `}(t,n);case 2:return function(e,t){let n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.texShape,i=s[0],o=s[1],l=I5();if(null!=s&&rX.arraysEqual(n,s))return t?`
      vec4 ${a}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);

        return ${l.texture2D}(${r}, uv);
      }
    `:`
      vec4 ${a}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);

        return ${l.texture2D}(${r}, uv);
      }
    `;if(t)return`
    vec4 ${a}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${l.texture2D}(${r}, uv);
    }
  `;let u=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)],h=Math.ceil(n[1]/2);return`
    vec4 ${a}(int row, int col) {
      vec2 uv = packedUVfrom2D(${h}, ${u[0]}, ${u[1]}, row, col);
      return ${l.texture2D}(${r}, uv);
    }
  `}(t,n);case 3:return function(t,n){let r=t.shapeInfo.logicalShape,a=t.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),i=t.shapeInfo.texShape,o=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===r[0]){let a=r.slice(1),i=Sd(t,a);return`
        ${e(i,n)}
        vec4 ${s}(int b, int row, int col) {
          return ${s}(${Sc(["b","row","col"],[1,2])});
        }
      `}let l=I5();if(n)return`
    vec4 ${s}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${a}TexShape[0]) / 2.0), ceil(float(${a}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${a}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${a}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${l.texture2D}(${a}, uv);
    }
  `;let u=o[0],h=o[1],p=Math.ceil(r[2]/2),d=p*Math.ceil(r[1]/2);return`
    vec4 ${s}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${u}, ${h}, ${d}, ${p}, b, row, col);
      return ${l.texture2D}(${a}, uv);
    }
  `}(t,n);default:return function(e,t){let n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=I5();if(t)return`
    vec4 ${r}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${n}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${a.texture2D}(${n}, uv);
    }
  `;let s=e.shapeInfo.logicalShape,i=s.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],h=l[1],p=Math.ceil(s[i-1]/2),d=p*Math.ceil(s[i-2]/2),c="int b, int row, int col",f=`b * ${d} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<i-1;e++)c=`int b${e}, `+c,d*=s[i-e-1],f=`b${e} * ${d} + `+f;return`
    vec4 ${r}(${c}) {
      int index = ${f};
      int texR = index / ${h};
      int texC = index - texR * ${h};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}, ${u});
      return ${a.texture2D}(${n}, uv);
    }
  `}(t,n)}}(e,r):a+=function e(t,n=!1){let r=t.shapeInfo.logicalShape;switch(r.length){case 0:return function(e,t){let n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;let[a,s]=e.shapeInfo.texShape;if(1===a&&1===s)return`
      float ${r}() {
        return sampleTexture(${n}, halfCR);
      }
    `;let i=Sl(n);if(t)return`
    float ${r}() {
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});
      return sampleTexture(${n}, uv);
    }
  `;let[o,l]=e.shapeInfo.texShape;return`
    float ${r}() {
      vec2 uv = uvFromFlat(${o}, ${l}, ${i});
      return sampleTexture(${n}, uv);
    }
  `}(t,n);case 1:return function(e,t){let n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`
      float ${r}(int index) {
        ${Su(e)}
      }
    `;let a=e.shapeInfo.texShape,s=a[0],i=a[1];if(1===i&&1===s)return`
      float ${r}(int index) {
        return sampleTexture(${n}, halfCR);
      }
    `;let o=Sl(n);return 1===i?t?`
      float ${r}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));
        return sampleTexture(${n}, uv);
      }
    `:`
      float ${r}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${s}.0);
        return sampleTexture(${n}, uv);
      }
    `:1===s?t?`
      float ${r}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);
        return sampleTexture(${n}, uv);
      }
    `:`
      float ${r}(int index) {
        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);
        return sampleTexture(${n}, uv);
      }
    `:t?`
    float ${r}(int index) {
      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});
      return sampleTexture(${n}, uv);
    }
  `:`
    float ${r}(int index) {
      vec2 uv = uvFromFlat(${s}, ${i}, index + ${o});
      return sampleTexture(${n}, uv);
    }
  `}(t,n);case 2:return function(t,n){let r=t.shapeInfo.logicalShape,a=t.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),i=t.shapeInfo.texShape;if(null!=i&&rX.arraysEqual(r,i)){if(n)return`
      float ${s}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `;let e=i[0],t=i[1];return`
    float ${s}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${t}.0, ${e}.0);
      return sampleTexture(${a}, uv);
    }
  `}let{newShape:o,keptDims:l}=rX.squeezeShape(r);if(o.length<r.length){let r=Sd(t,o);return`
      ${e(r,n)}
      float ${s}(int row, int col) {
        return ${s}(${Sc(["row","col"],l)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${s}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${r[1]}, 1)));
        ${Su(t)}
      }
    `;let u=i[0],h=i[1],p=Sl(a);return 1===h?n?`
      float ${s}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${a}TexShape[0]));
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${s}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${r[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${a}, uv);
    }
  `:1===u?n?`
      float ${s}(int row, int col) {
        float index = dot(vec3(row, col, ${p}), vec3(${a}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${a}TexShape[1]), 0.5);
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${s}(int row, int col) {
      float index = dot(vec3(row, col, ${p}), vec3(${r[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${h}.0, 0.5);
      return sampleTexture(${a}, uv);
    }
  `:n?`
      float ${s}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${a}Shape[1] + col + ${p};
        vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
        return sampleTexture(${a}, uv);
      }
    `:`
  float ${s}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${r[1]} + col + ${p};
    vec2 uv = uvFromFlat(${u}, ${h}, index);
    return sampleTexture(${a}, uv);
  }
`}(t,n);case 3:return function(t,n){let r=t.shapeInfo.logicalShape,a=t.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),i=r[1]*r[2],o=r[2],{newShape:l,keptDims:u}=rX.squeezeShape(r);if(l.length<r.length){let r=Sd(t,l);return`
        ${e(r,n)}
        float ${s}(int row, int col, int depth) {
          return ${s}(${Sc(["row","col","depth"],u)});
        }
      `}if(t.shapeInfo.isUniform)return`
      float ${s}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${i}, ${o}, 1)));
        ${Su(t)}
      }
    `;let h=t.shapeInfo.texShape,p=h[0],d=h[1],c=t.shapeInfo.flatOffset;if(d===i&&null==c)return n?`
      float ${s}(int row, int col, int depth) {
        int stride1 = ${a}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
        float ${s}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${o}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${d}.0, ${p}.0);
          return sampleTexture(${a}, uv);
        }
      `;if(d===o&&null==c)return n?`
      float ${s}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${a}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
    float ${s}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${r[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${p}.0);
      return sampleTexture(${a}, uv);
    }
  `;let f=Sl(a);return n?`
    float ${s}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${a}Shape[1] * ${a}Shape[2];
      int stride1 = ${a}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index);
      return sampleTexture(${a}, uv);
    }
    `:`
      float ${s}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${i} + col * ${o} + depth + ${f};
        vec2 uv = uvFromFlat(${p}, ${d}, index);
        return sampleTexture(${a}, uv);
      }
  `}(t,n);case 4:return function(t,n){let r=t.shapeInfo.logicalShape,a=t.name,s="get"+a.charAt(0).toUpperCase()+a.slice(1),i=r[3],o=r[2]*i,l=r[1]*o,{newShape:u,keptDims:h}=rX.squeezeShape(r);if(u.length<r.length){let r=Sd(t,u);return`
      ${e(r,n)}
      float ${s}(int row, int col, int depth, int depth2) {
        return ${s}(${Sc(["row","col","depth","depth2"],h)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${s}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${l}, ${o}, ${i}, 1)));
        ${Su(t)}
      }
    `;let p=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,c=d[0],f=d[1],m=`int stride2 = ${a}Shape[3];`,g=`int stride1 = ${a}Shape[2] * stride2;`,y=`int stride0 = ${a}Shape[1] * stride1;`;if(f===l&&null==p)return n?`
      float ${s}(int row, int col, int depth, int depth2) {
        ${m}
        ${g}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${o}, ${i}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${c}.0);
        return sampleTexture(${a}, uv);
      }
    `;if(f===i&&null==p)return n?`
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${a}Shape[1] * ${a}Shape[2], ${a}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${a}TexShape[1], ${a}TexShape[0]);
        return sampleTexture(${a}, uv);
      }
    `:`
      float ${s}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${r[1]*r[2]}, ${r[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${c}.0);
        return sampleTexture(${a}, uv);
      }
    `;let b=Sl(a);return n?`
    float ${s}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${m}
      ${g}
      ${y}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${a}TexShape[0], ${a}TexShape[1], index + ${b});
      return sampleTexture(${a}, uv);
    }
  `:`
    float ${s}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${l} + col * ${o} +
          depth * ${i} + depth2;
      vec2 uv = uvFromFlat(${c}, ${f}, index + ${b});
      return sampleTexture(${a}, uv);
    }
  `}(t,n);case 5:return function(t){let n=t.shapeInfo.logicalShape,r=t.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=n[4],i=n[3]*s,o=n[2]*i,l=n[1]*o,{newShape:u,keptDims:h}=rX.squeezeShape(n);if(u.length<n.length){let n=Sd(t,u);return`
      ${e(n)}
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        return ${a}(${Sc(["row","col","depth","depth2","depth3"],h)});
      }
    `}if(t.shapeInfo.isUniform)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${l}, ${o}, ${i}, ${s})) +
          depth3;
        ${Su(t)}
      }
    `;let p=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,c=d[0],f=d[1];if(f===l&&null==p)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${o}, ${i}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${c}.0);
        return sampleTexture(${r}, uv);
      }
    `;if(f===s&&null==p)return`
      float ${a}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${n[1]*n[2]*n[3]},
               ${n[2]*n[3]}, ${n[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${c}.0);
        return sampleTexture(${r}, uv);
      }
    `;let m=Sl(r);return`
    float ${a}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${l} + col * ${o} + depth * ${i} +
          depth2 * ${s} + depth3 + ${m};
      vec2 uv = uvFromFlat(${c}, ${f}, index);
      return sampleTexture(${r}, uv);
    }
  `}(t);case 6:return function(t){let n=t.shapeInfo.logicalShape,r=t.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),{newShape:s,keptDims:i}=rX.squeezeShape(n);if(s.length<n.length){let n=Sd(t,s);return`
      ${e(n)}
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${a}(${Sc(["row","col","depth","depth2","depth3","depth4"],i)});
      }
    `}let o=n[5],l=n[4]*o,u=n[3]*l,h=n[2]*u,p=n[1]*h;if(t.shapeInfo.isUniform)return`
      float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${p}, ${h}, ${u}, ${l})) +
          dot(
            vec2(depth3, depth4),
            vec2(${o}, 1)));
        ${Su(t)}
      }
    `;let d=t.shapeInfo.flatOffset,c=t.shapeInfo.texShape,f=c[0],m=c[1];if(m===p&&null==d)return`
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${h}, ${u}, ${l}, ${o})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${m}.0, ${f}.0);
        return sampleTexture(${r}, uv);
      }
    `;if(m===o&&null==d)return`
      float ${a}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${n[1]*n[2]*n[3]*n[4]},
               ${n[2]*n[3]*n[4]},
               ${n[3]*n[4]},
               ${n[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${m}.0, ${f}.0);
        return sampleTexture(${r}, uv);
      }
    `;let g=Sl(r);return`
    float ${a}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${p} + col * ${h} + depth * ${u} +
          depth2 * ${l} + depth3 * ${o} + depth4 + ${g};
      vec2 uv = uvFromFlat(${f}, ${m}, index);
      return sampleTexture(${r}, uv);
    }
  `}(t);default:throw Error(`${r.length}-D input sampling is not yet supported`)}}(e,r);let s=e.shapeInfo.logicalShape,i=t.logicalShape;return s.length<=i.length&&(n?a+=function(e,t){let n;let r=e.name,a=r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=Sn(e.shapeInfo.logicalShape,t.logicalShape),l=Sh(i),u=i-s,h=["x","y","z","w","u","v"];n=0===s?"":i<2&&o.length>=1?"coords = 0;":o.map(e=>`coords.${h[e+u]} = 0;`).join("\n");let p="";p=i<2&&s>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${h[t+u]}`).join(", ");let d="return outputValue;",c=rX.sizeFromShape(e.shapeInfo.logicalShape),f=1===c,m=rX.sizeFromShape(t.logicalShape),g=1===m;if(1!==s||f||g){if(f&&!g)d=1===i?`
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      `:`
        return vec4(outputValue.x);
      `;else if(o.length){let e=s-2,t=s-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d=`
      return vec4(outputValue.xy, outputValue.xy);
    `;return`
    vec4 ${"get"+a+"AtOutCoords"}() {
      ${l} coords = getOutputCoords();
      ${n}
      vec4 outputValue = get${a}(${p});
      ${d}
    }
  `}(e,t):a+=function(e,t){let n;let r=e.name,a=r.charAt(0).toUpperCase()+r.slice(1),s="get"+a+"AtOutCoords",i=t.texShape,o=e.shapeInfo.texShape,l=e.shapeInfo.logicalShape.length,u=t.logicalShape.length;if(!e.shapeInfo.isUniform&&l===u&&null==e.shapeInfo.flatOffset&&rX.arraysEqual(o,i))return`
      float ${s}() {
        return sampleTexture(${r}, resultUV);
      }
    `;let h=Sh(u),p=Sn(e.shapeInfo.logicalShape,t.logicalShape),d=u-l,c=["x","y","z","w","u","v"];return n=0===l?"":u<2&&p.length>=1?"coords = 0;":p.map(e=>`coords.${c[e+d]} = 0;`).join("\n"),`
    float ${s}() {
      ${h} coords = getOutputCoords();
      ${n}
      return get${a}(${u<2&&l>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>`coords.${c[t+d]}`).join(", ")});
    }
  `}(e,t)),a})(e,t,n.packedInputs,n.enableShapeUniforms)).join("\n"),l=t.texShape,u=I5(),h=`
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${u.texture2D}(textureSampler, uv).r;
    }
  `,p=function(e){let t=`${e.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${e.varyingFs} vec2 resultUV;
    ${e.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${e.defineSpecialNaN}
    ${e.defineSpecialInf}
    ${e.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${Sr}
    ${Sa}
    ${Ss}
  `;return t}(u);t.isPacked?(r=function(e,t,n){switch(e.length){case 0:return So();case 1:return function(e,t,n){let r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===r[0]?n?`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${r[1]}.0);
      }
    `:1===r[1]?n?`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    `:`
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${r[0]}.0);
      }
    `:n?`
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${r[0]}, ${r[1]}));
      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);
    }
  `}(0,t,n);case 2:return function(e,t,n){let r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(rX.arraysEqual(e,t))return n?`
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));
      }
    `;let a=Math.ceil(e[1]/2);return n?`
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${r[0]}, ${r[1]}));

      int index = resTexRC.x * ${r[1]} + resTexRC.y;
      int r = 2 * (index / ${a});
      int c = imod(index, ${a}) * 2;

      return ivec2(r, c);
    }
  `}(e,t,n);case 3:return function(e,t,n){if(n)return`
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;let r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[2]/2),s=a*Math.ceil(e[1]/2);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${r[0]}, ${r[1]}));
      int index = resTexRC.x * ${r[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${a});
      int c = imod(index, ${a}) * 2;

      return ivec3(b, r, c);
    }
  `}(e,t,n);default:return function(e,t,n){if(n)return`
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;let r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),s=a*Math.ceil(e[e.length-2]/2),i=s,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`
      int b${t} = index / ${i};
      index -= b${t} * ${i};
    `+o,l=`b${t}, `+l;return`
    ivec${e.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${r[0]}, ${r[1]}));
      int index = resTexRC.x * ${r[1]} + resTexRC.y;

      ${o}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${a});
      int c = imod(index, ${a}) * 2;

      return ivec${e.length}(${l});
    }
  `}(e,t,n)}}(t.logicalShape,l,n.enableShapeUniforms),a=`
    void setOutput(vec4 val) {
      ${u.output} = val;
    }
  `):(r=function(e,t,n){switch(e.length){case 0:return So();case 1:return 1===t[0]?n?`
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.x * ${t[1]}.0);
      }
    `:1===t[1]?n?`
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    `:`
      int getOutputCoords() {
        return int(resultUV.y * ${t[0]}.0);
      }
    `:n?`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  `:`
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      return resTexRC.x * ${t[1]} + resTexRC.y;
    }
  `;case 2:return rX.arraysEqual(e,t)?n?`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    `:`
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));
      }
    `:1===e[1]?n?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    `:1===e[0]?n?`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    `:`
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${t[0]}, ${t[1]}));
        int index = resTexRC.x * ${t[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    `:n?`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  `:`
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      int r = index / ${e[1]};
      int c = index - r * ${e[1]};
      return ivec2(r, c);
    }
  `;case 3:return function(e,t,n){if(n){let t=I7(["r","c","d"],e);return`
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${t}
    return ivec3(r, c, d);
  }
`}let r=I8(["r","c","d"],e);return`
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${r}
      return ivec3(r, c, d);
    }
  `}(e,t,n);case 4:return function(e,t,n){if(n){let t=I7(["r","c","d","d2"],e);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${t}
      return ivec4(r, c, d, d2);
    }
  `}let r=I8(["r","c","d","d2"],e);return`
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;
      ${r}
      return ivec4(r, c, d, d2);
    }
  `}(e,t,n);case 5:return function(e,t){let n=I8(["r","c","d","d2","d3"],e);return`
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},
                             ${t[1]}));

      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${n}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `}(e,t);case 6:return function(e,t){let n=I8(["r","c","d","d2","d3","d4"],e);return`
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${t[0]}, ${t[1]}));
      int index = resTexRC.x * ${t[1]} + resTexRC.y;

      ${n}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `}(e,t);default:throw Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,l,n.enableShapeUniforms),a=`
    void setOutput(float val) {
      ${u.output} = vec4(val, 0, 0, 0);
    }
  `),n.packedInputs&&(p+=Si);let d=[p,h,a,i,r,o,n.userCode].join("\n");return d}(a,i,t),l=function(e,t){let n=IY(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(IW(e,()=>e.shaderSource(n,t)),IW(e,()=>e.compileShader(n)),eM.get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw IG(t,e.getShaderInfoLog(n)),Error("Failed to compile fragment shader.");return n}(e.gl,o),u=e.createProgram(l);return eM.get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:s,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:s,outShapeInfo:i},Sf(e,t,u))})(this.gpgpu,e,h,p)),f=null!=this.activeTimers;f&&(i=this.startTimer()),eM.get("ENGINE_COMPILE_ONLY")||function(e,t,n,r,a){t.program.enableShapeUniforms||(Sm(t.inShapeInfos,n),Sm([t.outShapeInfo],[r]));let s=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(s.texture,i[0],i[1]):e.setOutputMatrixTexture(s.texture,i[0],i[1]),e.setProgram(t.webGLProgram),1===eM.getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach((n,r)=>{let a=t.program.variableNames[r],s=t.uniformLocations[a],i=t.uniformLocations[`offset${a}`],o=t.inShapesLocations[`${a}Shape`],l=t.inTexShapesLocations[`${a}TexShape`];if(o){let{uniformShape:r}=Sp(t.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(o,new Int32Array(r));break;case 2:e.gl.uniform2iv(o,new Int32Array(r));break;case 3:e.gl.uniform3iv(o,new Int32Array(r));break;case 4:e.gl.uniform4iv(o,new Int32Array(r))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=s){if(n.isUniform){if(2>rX.sizeFromShape(n.shape))e.gl.uniform1f(s,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(s,t)}return}null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,s,r)}});let o=t.outShapeLocation;if(o)switch(r.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(r.shape))}if(t.outShapeStridesLocation){let n=rX.computeStrides(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&a&&t.program.customUniforms.forEach((n,r)=>{let s=t.customUniformLocations[r],i=a[r];if("float"===n.type)e.gl.uniform1fv(s,i);else if("vec2"===n.type)e.gl.uniform2fv(s,i);else if("vec3"===n.type)e.gl.uniform3fv(s,i);else if("vec4"===n.type)e.gl.uniform4fv(s,i);else if("int"===n.type)e.gl.uniform1iv(s,i);else if("ivec2"===n.type)e.gl.uniform2iv(s,i);else if("ivec3"===n.type)e.gl.uniform3iv(s,i);else if("ivec4"===n.type)e.gl.uniform4iv(s,i);else throw Error(`uniform type ${n.type} is not supported yet.`)}),e.executeProgram()}(this.gpgpu,c,h,p,r),u.forEach(e=>this.disposeIntermediateTensorInfo(e)),f&&(i=this.endTimer(i),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(i)}));let m=eM.get("WEBGL_FLUSH_THRESHOLD");if(m>0){let e=rX.now();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!eM.getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&!1===a){let e=this.unpackTensor(o);return this.disposeIntermediateTensorInfo(o),e}return o}compileAndRun(e,t,n,r,a=!1){n=n||t[0].dtype;let s=this.runWebGLProgram(e,t,n,r,a);return s}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!eM.getBool("IS_TEST")){let e=Object.keys(this.binaryCache);e.forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=i7(()=>{if(!eM.get("WEBGL_RENDER_FLOAT32_ENABLED")){let e=eM.getBool("DEBUG");eM.set("DEBUG",!1);let t=this.abs(ly(1e-8)).dataSync()[0];if(eM.set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){let t;let n=this.texData.get(e),{shape:r,dtype:a,values:s,texture:i,usage:o,isPacked:l}=n;if(null!=i)return;let u=null!=this.activeTimers;u&&(t=rX.now());let h=n.texShape;if(null==h&&(h=function(e,t=!1){let n=eM.getNumber("WEBGL_MAX_TEXTURE_SIZE"),r=eM.getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");if(r===1/0&&eM.getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(r=n/2),t&&(n*=2,r*=2,1===(e=e.map((t,n)=>n>=e.length-2?rX.nearestLargerEven(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length){let t=rX.squeezeShape(e);e=t.newShape}let a=rX.sizeFromShape(e),s=null;e.length<=1&&a<=n?s=[1,a]:2===e.length&&e[0]<=n&&e[1]<=n?s=e:3===e.length&&e[0]*e[1]<=n&&e[2]<=n?s=[e[0]*e[1],e[2]]:3===e.length&&e[0]<=n&&e[1]*e[2]<=n?s=[e[0],e[1]*e[2]]:4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n?s=[e[0]*e[1]*e[2],e[3]]:4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n&&(s=[e[0],e[1]*e[2]*e[3]]);let i=null!=s&&Math.max(...s)>r&&Math.min(...s)<=(t?2:1)&&Math.min(...s)>0;if(null==s||i){if(t){let t=IZ(e),n=2,r=2;e.length&&([n,r]=IJ(e)),a=t*(n/2)*(r/2),s=rX.sizeToSquarishShape(a).map(e=>2*e)}else s=rX.sizeToSquarishShape(a)}return s}(r,l),n.texShape=h),null!=s){let e;let i=IQ(r),o=h[1],p=h[0],d=s instanceof Uint8Array||s instanceof Uint8ClampedArray;(l||!d)&&([o,p]=IP(h[0],h[1])),e=l?new Sw(i,d):new Sv(i,d);let c=d?[p,o]:h,f=this.makeTensorInfo(c,a),m=this.texData.get(f.dataId);d?m.usage=C.PIXELS:m.usage=C.UPLOAD,m.texShape=c,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),o,p,s);let g=[[p,o]],y=this.runWebGLProgram(e,[f],a,g,!0),b=this.texData.get(y.dataId);n.texShape=b.texShape,n.isPacked=b.isPacked,n.usage=b.usage,eM.get("ENGINE_COMPILE_ONLY")?this.disposeData(y.dataId):(n.texture=b.texture,n.values=null,this.texData.delete(y.dataId)),this.disposeIntermediateTensorInfo(f),u&&(this.uploadWaitMs+=rX.now()-t)}else{let e=this.acquireTexture(h,o,a,l);n.texture=e}}convertAndCacheOnCPU(e,t){let n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){let n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1048576*this.numMBBeforeWarning){let e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*rX.bytesPerElement(t)}checkCompileCompletion(){for(let[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){let e=[];if(this.gpgpu.parallelCompilationExtension){for(let[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(let[,t]of Object.entries(this.binaryCache)){let n=new Promise(e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}});e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await cu(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw IG(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),Error("Failed to compile fragment shader.");throw Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(let[,e]of Object.entries(this.binaryCache)){let{uniformLocations:t,customUniformLocations:n,infLoc:r,nanLoc:a,inShapesLocations:s,inTexShapesLocations:i,outShapeLocation:o,outShapeStridesLocation:l,outTexShapeLocation:u}=Sf(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=r,e.nanLoc=a,e.inShapesLocations=s,e.inTexShapesLocations=i,e.outShapeLocation=o,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}}NO.nextDataId=0,a1.isBrowser()&&ol("webgl",()=>new NO,2);let NM=`
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;class NL{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=ch.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=Sg(this.outputShape.length),this.userCode=`
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `}}let Nz=`
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;class NP{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=ch.assertAndGetBroadcastShape(t,n);let a=this.outputShape.length;this.enableShapeUniforms=Sg(a);let s="";if(r){if(0===a||1===rX.sizeFromShape(this.outputShape))s=`
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;else{let e=Sh(a);if(s=`
          ${e} coords = getOutputCoords();
        `,1===a)this.enableShapeUniforms?s+=`
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `:s+=`
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;else{let e=Nf("coords",a);this.enableShapeUniforms?s+=`
            bool nextRowOutOfBounds =
              (${e[a-2]} + 1) >= outShape[${a} - 2];
            bool nextColOutOfBounds =
              (${e[a-1]} + 1) >= outShape[${a} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `:s+=`
            bool nextRowOutOfBounds =
              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};
            bool nextColOutOfBounds =
              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `}}}this.userCode=`
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${s}

        setOutput(result);
      }
    `}}function NB(e){let{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}function NW(e){let{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.makeTensorInfo(r.shape,"complex64"),i=n.texData.get(s.dataId),o=NB({inputs:{x:r},backend:n}),l=NB({inputs:{x:a},backend:n});return i.complexTensorInfos={real:o,imag:l},s}let NV="return (a < 0.) ? b * a : a;",NU=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`,NG="return (a < 0.) ? b * a : a;",NH=`
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`,Nq="if (isnan(x)) return x;";function Nj({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:a,backend:s})=>{let i;let{x:o}=a,l=r||o.dtype;if(s.shouldExecuteOnCPU([o])&&null!=n){let e=s.texData.get(o.dataId),t=n(e.values,l);return s.makeTensorInfo(o.shape,l,t)}let u=eM.getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t;return i=u?new NA(o.shape,t):new Nv(o.shape,e),s.runWebGLProgram(i,[o],l)}}function NK({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:a,dtype:s}){return({inputs:i,backend:o})=>{let l;let{a:u,b:h}=i;if(r&&"complex64"===u.dtype){let t=o.texData.get(u.dataId),n=o.texData.get(h.dataId),[r,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(t=>{let[n,r]=t,a={dataId:n.dataId,dtype:n.dtype,shape:u.shape},s={dataId:r.dataId,dtype:r.dtype,shape:h.shape},i=new NL(e,u.shape,h.shape);return o.runWebGLProgram(i,[a,s],aU(n.dtype,r.dtype))}),s=NW({inputs:{real:r,imag:a},backend:o});return o.disposeIntermediateTensorInfo(r),o.disposeIntermediateTensorInfo(a),s}let p=s||aU(u.dtype,h.dtype);if(("string"===u.dtype||"string"===h.dtype||o.shouldExecuteOnCPU([u,h]))&&null!=a){let e=o.texData.get(u.dataId).values,t=o.texData.get(h.dataId).values,n="string"===u.dtype?ch.fromUint8ToStringArray(e):e,r="string"===u.dtype?ch.fromUint8ToStringArray(t):t,[s,i]=a(u.shape,h.shape,n,r,p),l=o.makeTensorInfo(i,p),d=o.texData.get(l.dataId);return d.values=s,l}let d=eM.getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t;return l=d?new NP(t,u.shape,h.shape,n):new NL(e,u.shape,h.shape),o.runWebGLProgram(l,[u,h],p)}}function NX(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?N$:NS;if("elu"===e)return t?NC:"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?NE:NN;if("prelu"===e)return t?NH:NG;if("leakyrelu"===e)return t?NU:NV;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class NY{constructor(e,t,n,r=!1,a=!1,s=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=Sg(this.outputShape.length);let u=r?e[1]:e[2],h=Math.ceil(u/2),p=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],c="",f="";i&&(c=o?`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }`:l?`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }`:`vec4 activation(vec4 x) {
          ${i}
        }`,f="result = activation(result);"),s&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let m="rc.x",g="rc.x";e[0]<t[0]?m=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(g=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`
      ${c}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${h}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${h}; i++) {
          int batchA = ${m};
          int batchB = ${g};
          vec4 a = getMatrixA(batchA, ${r?"i * 2, rc.y":"rc.y, i * 2"});
          vec4 b = getMatrixB(batchB, ${a?"rc.z, i * 2":"i * 2, rc.z"});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${p[0]} * ${d[0]});
          result += (${p[1]} * ${d[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${s?"result += getBiasAtOutCoords();":""}

        ${f}

        setOutput(result);
      }
    `}}let NZ={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class NJ{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=ch.assertAndGetBroadcastShape(t,n),this.userCode=`
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `}}let NQ="return a * b;";function N0(e){let t;let{inputs:n,backend:r}=e,{a:a,b:s}=n,i=ch.upcastType(a.dtype,s.dtype);if("complex64"===a.dtype){let e=r.texData.get(a.dataId),t=r.texData.get(s.dataId),n=new NJ(NZ.REAL,a.shape,s.shape),i=new NJ(NZ.IMAG,a.shape,s.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:a.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:a.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],l=r.runWebGLProgram(n,o,"float32"),u=r.runWebGLProgram(i,o,"float32"),h=NW({inputs:{real:l,imag:u},backend:r});return r.disposeIntermediateTensorInfo(l),r.disposeIntermediateTensorInfo(u),h}if(r.shouldExecuteOnCPU([a,s])){let e=r.texData.get(a.dataId),t=r.texData.get(s.dataId),[n,o]=SJ(a.shape,s.shape,e.values,t.values,i),l=r.makeTensorInfo(o,i),u=r.texData.get(l.dataId);return u.values=n,l}return t=eM.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new NP(NQ,a.shape,s.shape):new NL(NQ,a.shape,s.shape),r.runWebGLProgram(t,[a,s],i)}function N1(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:s}=r,i=rX.sizeFromShape(a.shape),o=rX.inferFromImplicitShape(s,i),l=rX.sizeFromShape(o);rX.assert(i===l,()=>`The new shape (${o}) has ${l} elements and the old shape (${a.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);let u=n.texData.get(a.dataId);return!u.isPacked||I0(a.shape,o)||null!==u.texture&&I0(u.shape,o)?(n.incRef(a.dataId),{dataId:a.dataId,shape:o,dtype:a.dtype}):function(e,t,n){let r=[IZ(e.shape),...IJ(e.shape)],a={dtype:e.dtype,shape:r,dataId:e.dataId},s=[IZ(t),...IJ(t)],i=new Ng(s,r),o=[r],l=n.runWebGLProgram(i,[a],e.dtype,o,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(a,o,n)}class N2{constructor(e,t){this.variableNames=["x"];let{windowSize:n,batchSize:r,inSize:a,outSize:s}=e;this.outputShape=[r,s];let i=4*Math.floor(n/4),o=n%4,l="sumValue += dot(values, ones);";if(null!=t){let e=1/t;l=`sumValue += dot(values * ${rX.isInt(e)?e.toPrecision(2):e}, ones);`}let u="";a%n>0&&(u=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return 0.0;
        }
      `),this.userCode=`
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${u}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${l}
        }

        int inIdx = inOffset + ${i};
        if (${1===o}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${l}
        } else if (${2===o}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${l}
        } else if (${3===o}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${l}
        }
        setOutput(sumValue);
      }
    `}}class N3{constructor(e,t){this.variableNames=["x"];let{windowSize:n,batchSize:r,inSize:a,outSize:s}=e;this.outputShape=[r,s];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");let u=4*Math.floor(n/4),h=n%4,p=`
      if (${"sum"===t}) {
        sumValue += dot(values, ones);
      } else if (${"prod"===t}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${o}(values, minMaxValue);
        if (${"min"===t} || ${"max"===t}) {
          minMaxValue = ${o}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `,d="vec4";"all"===t?(i="1.0",p=`
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `,d="bvec4"):"any"===t&&(i="0.0",p=`
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `,d="bvec4");let c="";a%n>0&&(c=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `),this.userCode=`
      const float initializationValue = ${i};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        vec4 minMaxValue = vec4(${i});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${u}; i += 4) {
          int inIdx = inOffset + i;
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${p}
        }

        int inIdx = inOffset + ${u};
        if (${1===h}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${p}
        } else if (${2===h}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${p}
        } else if (${3===h}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${p}
        }
        setOutput(${l});
      }
    `}}function N4(e,t,n,r){let a=function(e){let t=[];for(;0===t.length||1!==t[t.length-1].outSize;){let n=t.length?t[t.length-1].outSize:e[1],r=ch.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape),s=e;for(let i=0;i<a.length;i++){let o,l;let{inSize:u,windowSize:h,outSize:p}=a[i];o="mean"===n?0===i?new N2({windowSize:h,inSize:u,batchSize:e.shape[0],outSize:p},u):new N2({windowSize:h,inSize:u,batchSize:e.shape[0],outSize:p}):new N3({windowSize:h,inSize:u,batchSize:e.shape[0],outSize:p},n),l=s,s=r.runWebGLProgram(o,[s],t),l.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(l)}return s}class N6{constructor(e,t){this.variableNames=["A"];let n=Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;let r=Sh(this.rank),a=function(e){let t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);let n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`
    void main() {
      ${r} resRC = getOutputCoords();
      setOutput(getA(${a}));
    }
    `}}class N5{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;let n=Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);let r=Sh(this.rank),a=Nc("rc",this.rank),s=Array(this.rank);for(let e=0;e<t.length;e++)s[t[e]]=a[e];let i=`vec2(${s.slice(-2).join()})`,o=`++${a[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${s.join()}), ${i})`;this.userCode=`
    void main() {
      ${r} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${l};
      if(${o}) {
        result[1] = ${l};
      }
      --${a[this.rank-1]};
      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {
        result[2] = ${l};
        if(${o}) {
          result[3] = ${l};
        }
      }
      setOutput(result);
    }
    `}}function N8(e,t,n){let r=eM.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new N5(e.shape,t):new N6(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function N7(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:i}=r;return function(e,t,n,r){let a=e.shape.length,s=rX.parseAxisParam(t,e.shape),i=s,o=ch.getAxesPermutation(i,a),l=null!=o,u=e;l&&(u=N8(e,o,r),i=ch.getInnerMostAxes(i.length,a)),ch.assertAxesAreInnerMostDims("sum",i,a);let[h,p]=ch.computeOutAndReduceShapes(u.shape,i),d=h;n&&(d=ch.expandShapeToKeepDim(h,s));let c=rX.sizeFromShape(p),f=rX.sizeFromShape(e.shape),m=f/c,g=N1({inputs:{x:u},attrs:{shape:[m,c]},backend:r}),y=aG(e.dtype),b=N4(g,y,"sum",r),x=N1({inputs:{x:b},attrs:{shape:d},backend:r});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(b),l&&r.disposeIntermediateTensorInfo(u),x}(a,s,i,n)}function N9(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{perm:i}=a,o=s.shape.length,l=Array(o);for(let e=0;e<l.length;e++)l[e]=s.shape[i[e]];if(r.shouldExecuteOnCPU([s])){let e=r.texData.get(s.dataId),n=e.values,a=Np(n,s.shape,s.dtype,i,l);t=r.makeTensorInfo(l,s.dtype);let o=r.texData.get(t.dataId);o.values=a}else t=N8(s,i,r);return t}function Te({a:e,b:t,transposeA:n,transposeB:r,backend:a,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){let u;let h=e.shape.length,p=t.shape.length,d=n?e.shape[h-2]:e.shape[h-1],c=r?t.shape[p-1]:t.shape[p-2],f=n?e.shape[h-1]:e.shape[h-2],m=r?t.shape[p-2]:t.shape[p-1],g=e.shape.slice(0,-2),y=t.shape.slice(0,-2),b=rX.sizeFromShape(g),x=rX.sizeFromShape(y),k=og.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)),v=k.concat([f,m]);rX.assert(d===c,()=>`Error in matMul: inner shapes (${d}) and (${c}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`);let w=n?[b,d,f]:[b,f,d],I=r?[x,m,c]:[x,c,m],S=N1({inputs:{x:e},backend:a,attrs:{shape:w}}),N=N1({inputs:{x:t},backend:a,attrs:{shape:I}}),T=[S,N],C=Math.max(b,x),$=n?S.shape[1]:S.shape[2],E=null!=s,A=null!=i,R="leakyrelu"===l,F=null!=l?NX(l,!0):null,D=E||A||R||null!=F;if((1===f||1===m)&&$>1e3&&!1===D){let e=S,t=N;n&&(e=N9({inputs:{x:S},backend:a,attrs:{perm:[0,2,1]}}),T.push(e)),r&&(t=N9({inputs:{x:N},backend:a,attrs:{perm:[0,2,1]}}),T.push(t));let s=1!==m,i=1===m,o=e;s&&(o=N1({inputs:{x:e},backend:a,attrs:{shape:[C,$,1]}}),T.push(o));let l=1===m?2:1,h=t;i&&(h=N1({inputs:{x:t},backend:a,attrs:{shape:[C,1,$]}}),T.push(h));let p=N0({inputs:{a:o,b:h},backend:a});u=N7({inputs:{x:p},backend:a,attrs:{axis:l,keepDims:!0}}),T.push(p)}else{let l=aU(e.dtype,t.dtype),h=new NY(w,I,[C,f,m],n,r,E,F,A,R),p=[S,N];if(null!=s&&p.push(s),A&&p.push(i),R){let e=a.makeTensorInfo([],"float32",rX.createScalarValue(o,"float32"));p.push(e),T.push(e)}u=a.runWebGLProgram(h,p,l)}let _=N1({inputs:{x:u},backend:a,attrs:{shape:v}});for(let e of(T.push(u),T))a.disposeIntermediateTensorInfo(e);return _}let Tt="return abs(x);",Tn=Nw+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`,Tr=Nj({opSnippet:Tn}),Ta=Nw+`
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`,Ts=Nj({opSnippet:Ta}),Ti="return a + b;",To=NK({opSnippet:Ti,packedOpSnippet:Ti,supportsComplex:!0,cpuKernelImpl:SR});class Tl{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);let n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});let r=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`
      void main() {
        ${n.join("\n        ")}

        float result = ${r};
        setOutput(result);
      }
    `}}class Tu{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>`T${t}`);let n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});let r=this.variableNames.map(e=>`v${e}`).join(" + ");this.userCode=`
      void main() {
        ${n.join("\n        ")}

        vec4 result = ${r};
        setOutput(result);
      }
    `}}class Th{constructor(e,t,n){this.variableNames=["A"];let{windowSize:r,batchSize:a,outSize:s}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,s],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${r};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${r}; i++) {
          int inIdx = ${n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};
          float candidate = getA(batch, inIdx);
          if (candidate ${"max"===t?">":"<"} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `}}class Tp{constructor(e,t,n,r){let a,s;this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,rX.assert(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);let i=e[e.length-1],o=Math.ceil(i/t);this.outputShape=e.slice(0,-1),o>1&&this.outputShape.push(o),r||this.variableNames.push("bestIndicesA");let l=this.outputShape,u=l.length,h=Sh(u),p=Nf("coords",u);if(1===o){s=u+1;let e=Sh(s);a=`
        ${e} sourceLocR = ${e}(${p.join()}, 0);
        ++${p[u-1]};
        ${e} sourceLocG = ${e}(${p.join()}, 0);
        ++${p[u-2]};
        ${e} sourceLocA = ${e}(${p.join()}, 0);
        --${p[u-1]};
        ${e} sourceLocB = ${e}(${p.join()}, 0);
        --${p[u-2]};`}else s=u,a=`
        ${h} sourceLocR = coords;
        ++${p[u-1]};
        ${h} sourceLocG = coords;
        ++${p[u-2]};
        ${h} sourceLocA = coords;
        --${p[u-1]};
        ${h} sourceLocB = coords;
        --${p[u-2]};`;let d=["x","y","z","w","u","v"].slice(0,s),c="."+d[s-1],f=d.map(e=>"int "+e),m=Nf("sourceLocR",s-1).concat("inIdx.r"),g=Nf("sourceLocG",s-1).concat("inIdx.g"),y=Nf("sourceLocB",s-1).concat("inIdx.b"),b=Nf("sourceLocA",s-1).concat("inIdx.a"),x=r?"":`
          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),
                             getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${y.join()}),
                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(
            getAChannel(${m.join()}),
            hasNextCol ? getAChannel(${g.join()}) : 0.,
            hasNextRow ? getAChannel(${y.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=r?"":`
      float getBestIndicesAChannel(${f.join()}) {
        return getChannel(getBestIndicesA(${d.join()}),
                                          vec2(${d.slice(-2).join()}));
      }`;this.userCode=`
      float getAChannel(${f.join()}) {
        return getChannel(getA(${d.join()}),
                               vec2(${d.slice(-2).join()}));
      }
      ${v}
      void main() {
        ${h} coords = getOutputCoords();
        bool hasNextCol = ${p[u-1]} < ${l[u-1]-1};
        bool hasNextRow = ${p[u-2]} < ${l[u-2]-1};
        ${a}
        ivec4 srcIdx = ivec4(sourceLocR${c}, sourceLocG${c},
          sourceLocB${c}, sourceLocA${c}) * ${t};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${k};

        for (int i = 0; i < ${t}; i++) {
          inIdx = srcIdx;
          ${x}
          vec4 candidate = ${k};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${"max"===n?"greaterThan":"lessThan"}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `}}function Td(e,t,n,r){let a=[n];if(ch.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),a,t.shape.length),!eM.getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){let n=[],s=e.texData.get(t.dataId),i=null!==s&&s.isPacked,o=t;i&&n.push(o=e.unpackTensor(t));let[l,u]=ch.computeOutAndReduceShapes(o.shape,a),h=rX.sizeFromShape(u),p=N1({inputs:{x:o},backend:e,attrs:{shape:[-1,h]}});n.push(p);let d=function e(t,n,r,a=null){let s=n.shape[0],i=n.shape[1];null!=a&&(s=a.shape[0],i=a.shape[1]);let o=ch.computeOptimalWindowSize(i),l={windowSize:o,inSize:i,batchSize:s,outSize:Math.ceil(i/o)},u=new Th(l,r,null==a),h=[n];null!=a&&h.push(a);let p=t.runWebGLProgram(u,h,"int32");if(1===p.shape[1])return p;let d=e(t,n,r,p);return t.disposeIntermediateTensorInfo(p),d}(e,p,r);n.push(d);let c=N1({inputs:{x:d},backend:e,attrs:{shape:l}});return n.forEach(t=>e.disposeIntermediateTensorInfo(t)),c}return function e(t,n,r,a=null){let s=null!=a?a.shape:n.shape,i=s[s.length-1],o=ch.computeOptimalWindowSize(i),l=new Tp(s,o,r,null==a),u=null==a?[n]:[n,a],h=t.runWebGLProgram(l,u,"int32");if(h.shape.length===n.shape.length){let a=e(t,n,r,h);return t.disposeIntermediateTensorInfo(h),a}return h}(e,t,r)}let Tc=Nw+`
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`,Tf=Nj({opSnippet:Tc}),Tm=Nj({opSnippet:Nw+"return log(x + sqrt(x * x + 1.0));"}),Tg=Nw+`
  return atan(x);
`,Ty=Nj({opSnippet:Tg}),Tb=NM+`
  return atan(a, b);
`,Tx=`
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+Nz+`
  return result;
`,Tk=NK({opSnippet:Tb,packedOpSnippet:Tx}),Tv=Nw+`
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`,Tw=Nj({opSnippet:Tv});class TI{constructor(e,t,n,r=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw Error("Cannot compute positions for average pool.");let s=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=e.padInfo.top,c=e.padInfo.left;this.outputShape=e.outShape;let f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`,y="0.0";if(f||(y="-1.0 / 1e-20"),n){this.userCode=`
        const ivec2 strides = ivec2(${i}, ${o});
        const ivec2 pads = ivec2(${d}, ${c});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${h};
              wR += ${l}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${p};
                wC += ${u}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value >= currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${r?a?m:g:`wR * ${p} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");let x=4*Math.floor(s/4),k=s%4,v=`
      if (${f}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec2 strides = ivec2(${i}, ${o});
      const ivec2 pads = ivec2(${d}, ${c});
      const float initializationValue = ${y};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${y});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${h};
            wR += ${l}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${x}; wC += 4) {
            int xC = xCCorner + wC * ${u};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              getValue(batch, xR, xC + 3 * ${u}, d)
            );

            ${v}
          }

          int xC = xCCorner + ${x};
          if (${1===k}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${v}
          } else if (${2===k}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              initializationValue,
              initializationValue
            );

            ${v}
          } else if (${3===k}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${u}, d),
              getValue(batch, xR, xC + 2 * ${u}, d),
              initializationValue
            );

            ${v}
          }
        }
        setOutput(${b});
      }
    `}}class TS{constructor(e,t,n,r=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw Error("Cannot compute positions for average pool.");let s=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,h=e.dilationHeight,p=e.dilationWidth,d=e.effectiveFilterDepth,c=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;let b="avg"===t,x="0.0";if(b||(x="-1.0 / 1e-20"),n){this.userCode=`
        const ivec3 strides =
            ivec3(${i}, ${o}, ${l});
        const ivec3 pads = ivec3(${m}, ${g}, ${y});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${d};
              wD += ${u}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${c};
                wR += ${h}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${f};
                  wC += ${p}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value >= currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${r?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${c} * ${f} +
                      wR * ${f} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;return}let k=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(k="avgValue / count");let v=4*Math.floor(s/4),w=s%4,I=`
      if (${b}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = max(values, minMaxValue);
      }
    `;this.userCode=`
      const ivec3 strides =
        ivec3(${i}, ${o}, ${l});
      const ivec3 pads = ivec3(${m}, ${g}, ${y});
      const float initializationValue = ${x};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${x});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${u}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${c};
            wR += ${h}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${v}; wC += 4) {
              int xC = xCCorner + wC * ${p};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${p}, ch),
                getValue(batch, xD, xR, xC + 2 * ${p}, ch),
                getValue(batch, xD, xR, xC + 3 * ${p}, ch)
              );

              ${I}
            }

            int xC = xCCorner + ${v};
            if (${1===w}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${I}
            } else if (${2===w}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${p}, ch),
                initializationValue,
                initializationValue
              );

              ${I}
            } else if (${3===w}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${p}, ch),
                getValue(batch, xD, xR, xC + 2 * ${p}, ch),
                initializationValue
              );

              ${I}
            }
          }
          setOutput(${k});
        }
      }
    `}}class TN{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,h=l-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${u}, ${h});
      const float avgMultiplier = float(${1/(t*n)});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${o};
            wR += ${s}) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${l};
            wC+= ${i}) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `}}class TT{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;let t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,h=e.effectiveFilterDepth,p=e.effectiveFilterHeight,d=e.effectiveFilterWidth,c=h-1-e.padInfo.front,f=p-1-e.padInfo.top,m=d-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${c}, ${f}, ${m});
      const float avgMultiplier = float(${1/(t*n*r)});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${h};
            wD += ${o}) {
          float dyD = float(dyDCorner + wD) / ${a}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${p};
              wR += ${l}) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${d};
                wC += ${u}) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class TC{constructor(e,t,n,r,a,s){this.outputShape=[],this.variableNames=["x","mean","variance"],ch.assertAndGetBroadcastShape(e,t),ch.assertAndGetBroadcastShape(e,n);let i="0.0";null!=r&&(ch.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=a&&(ch.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${o};
        float inv = scale * inversesqrt(variance + float(${s}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `}}class T${constructor(e,t,n,r,a,s){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],ch.assertAndGetBroadcastShape(e,t),ch.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=r&&(ch.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=a&&(ch.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${o};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${s}));

        setOutput((x - mean) * inv + offset);
      }
    `}}class TE{constructor(e){let t;this.variableNames=["source"],this.outputShape=e,this.rank=e.length;let n=Sh(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let r=function(e){if(1===e)return"sourceLoc";if(e<=6)return TA.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank),a=e.map((e,t)=>`sourceLoc.${TA[t]} = start[${t}] + coords.${TA[t]};`);t=`
        ${n} sourceLoc;
        ${n} coords = getOutputCoords();
        ${a.join("\n")}
      `,this.userCode=`
      void main() {
        ${t}
        setOutput(getSource(${r}));
      }
    `}}let TA=["x","y","z","w","u","v"];class TR{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];let t=Sh(this.rank),n=Nf("coords",this.rank),r=Nf("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,s=`getChannel(getSource(${r.join()}), ${a})`,i=`
      result.x = ${s};
      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {
        ++${r[this.rank-1]};
        result.y = ${s};
        --${r[this.rank-1]};
      }
    `,o=1===this.rank?"":`
      --${n[this.rank-1]};
      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {
        ++${r[this.rank-2]};
        result.z = ${s};
        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {
          ++${r[this.rank-1]};
          result.w = ${s};
        }
      }
    `,l=this.rank<=4?`sourceLoc = coords +
            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`
      void main() {
        ${t} coords = getOutputCoords();
        ${t} sourceLoc;
        ${l}
        vec4 result = vec4(0.);
        ${i}
        ${o}
        setOutput(result);
      }
    `}}function TF(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,size:i}=r,[o,l]=oF.parseSliceParams(a,s,i);if(oF.assertParamsValid(a,o,l),0===rX.sizeFromShape(l))return n.makeTensorInfo(l,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){let e=n.texData.get(a.dataId),t=S9(e.values,o,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,t)}let{isPacked:u}=n.texData.get(a.dataId),h=oF.isSliceContinous(a.shape,o,l);if(u||!h){let e=eM.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new TR(l):new TE(l),t=[o];return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,r){let a=r.texData.get(e.dataId),s=r.makeTensorInfo(n,e.dtype),i=r.texData.get(s.dataId);Object.assign(i,a),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=oF.computeFlatOffset(t,rX.computeStrides(e.shape));a.slice&&(o+=a.slice.flatOffset),i.slice={flatOffset:o,origDataId:a.slice&&a.slice.origDataId||e.dataId};let l=r.dataRefCount.get(i.slice.origDataId)||1;return r.dataRefCount.set(i.slice.origDataId,l+1),s}(a,o,l,n)}let TD=NK({opSnippet:"return float(a != b);",cpuKernelImpl:S0,dtype:"bool"});function T_(e){let{inputs:t,backend:n}=e,{input:r}=t,a=n.texData.get(r.dataId);return NB({inputs:{x:a.complexTensorInfos.real},backend:n})}let TO="return ceil(x);",TM=Nj({opSnippet:TO,packedOpSnippet:TO,cpuKernelImpl:SO});class TL{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `}}class Tz{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode=`
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `}}class TP{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode=`
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `}}function TB(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}class TW{constructor(e){this.outputShape=[],this.outputShape=ch.computeOutShape(e,1),this.variableNames=e.map((e,t)=>`T${t}`);let t=Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];let n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){let r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}let r=t.length,a=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${a}));`),this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${n.join("\n        ")}
      }
    `}}class TV{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=ch.computeOutShape(e,t);let n=this.outputShape,r=n.length,a=Sh(r),s=Nf("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map((e,t)=>`T${t}`);let o=Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];let l=i[t],u=i.slice(-2),h=i.join(),p=`if (${l} < ${o[0]}) {
        return getChannel(
            getT0(${h}), vec2(${u.join()}));
        }`;for(let e=1;e<o.length;e++){let t=o[e-1];p+=`
        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {
          return getChannel(
            getT${e}(${TU(i,l,t)}),
            vec2(${TU(u,l,t)}));
        }`}let d=o.length,c=o[o.length-1];p+=`
        return getChannel(
          getT${d}(${TU(i,l,c)}),
          vec2(${TU(u,l,c)}));`,this.userCode=`
      float getValue(${i.map(e=>"int "+e)}) {
        ${p}
      }

      void main() {
        ${a} coords = getOutputCoords();
        vec4 result = vec4(getValue(${s}), 0., 0., 0.);

        ${s[r-1]} = ${s[r-1]} + 1;
        if (${s[r-1]} < ${n[r-1]}) {
          result.g = getValue(${s});
        }

        ${s[r-2]} = ${s[r-2]} + 1;
        if (${s[r-2]} < ${n[r-2]}) {
          result.a = getValue(${s});
        }

        ${s[r-1]} = ${s[r-1]} - 1;
        if (${s[r-2]} < ${n[r-2]} &&
            ${s[r-1]} < ${n[r-1]}) {
          result.b = getValue(${s});
        }
        setOutput(result);
      }
    `}}function TU(e,t,n){let r=e.indexOf(t),a=e.map((e,t)=>t===r?`${e} - ${n}`:e);return a.join()}function TG(e){let{inputs:t,backend:n}=e,{input:r}=t,a=n.texData.get(r.dataId);return NB({inputs:{x:a.complexTensorInfos.imag},backend:n})}function TH(e){let{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,s=rX.parseAxisParam(a,t[0].shape)[0],i=t.map(e=>e.shape);ch.assertParamsConsistent(i,s);let o=ch.computeOutShape(t.map(e=>e.shape),s);if(0===rX.sizeFromShape(o))return n.makeTensorInfo(o,t[0].dtype,[]);let l=t.filter(e=>rX.sizeFromShape(e.shape)>0);return 1===l.length?NB({inputs:{x:l[0]},backend:n}):function e(t,n,r){let a=t[0].dtype;if("complex64"===a){let a=t.map(e=>T_({inputs:{input:e},backend:r})),s=t.map(e=>TG({inputs:{input:e},backend:r})),i=e(a,n,r),o=e(s,n,r),l=NW({inputs:{real:i,imag:o},backend:r});return a.forEach(e=>r.disposeIntermediateTensorInfo(e)),s.forEach(e=>r.disposeIntermediateTensorInfo(e)),r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(o),l}let s=r.shouldExecuteOnCPU(t);if("string"===a&&(s=!0),s){let e=t.map(e=>{let t=rX.sizeFromShape(e.shape.slice(n));return N1({inputs:{x:e},backend:r,attrs:{shape:[-1,t]}})}),s=e.map(e=>({vals:r.readSync(e.dataId),shape:e.shape})),i=ch.computeOutShape(e.map(e=>e.shape),1),o=1===e[0].shape[0],l=SM(s,i,a,o),u=ch.computeOutShape(t.map(e=>e.shape),n),h=r.makeTensorInfo(u,a,l);return e.forEach(e=>r.disposeIntermediateTensorInfo(e)),h}let i=eM.getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(t.length>i){let a=[];for(let s=0;s<t.length;s+=i){let o=t.slice(s,s+i);a.push(e(o,n,r))}let s=e(a,n,r);for(let e of a)r.disposeIntermediateTensorInfo(e);return s}if(eM.getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].shape.length>1){let e=new TV(t.map(e=>e.shape),n);return r.runWebGLProgram(e,t,a)}let{tensors2D:o,outShape:l}=function(e,t,n){let r=ch.computeOutShape(e.map(e=>e.shape),t),a=e.map(e=>N1({inputs:{x:e},attrs:{shape:[-1,rX.sizeFromShape(e.shape.slice(t))]},backend:n}));return{tensors2D:a,outShape:r}}(t,n,r),u=new TW(o.map(e=>e.shape)),h=r.runWebGLProgram(u,o,a);o.forEach(e=>r.disposeIntermediateTensorInfo(e));let p=N1({inputs:{x:h},attrs:{shape:l},backend:r});return r.disposeIntermediateTensorInfo(h),p}(l,s,n)}class Tq{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;let s=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,h=e.dilationWidth,p=e.filterHeight,d=e.filterWidth,c=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g="",y="";n&&(g=r?`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }`:a?`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }`:`
          float activation(float x) {
            ${n}
          }
        `,y="result = activation(result);"),t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${g}

      const ivec2 strides = ivec2(${o}, ${l});
      const ivec2 pads = ivec2(${s}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${m?3:1}];

        ivec2 xRCCorner =
            ivec2(coords[${m?1:2}], coords[${m?2:3}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${p}; wR++) {
          int xR = xRCorner + wR * ${u};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${d}; wC++) {
            int xC = xCCorner + wC * ${h};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${c}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${m}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${1===f}) {

              if (${m}) {
                dotProd +=
                    getX(batch, xR, xC, ${c}) *
                    getW(wR, wC, ${c}, d2);
              } else {
                dotProd +=
                    getX(batch, ${c}, xR, xC) *
                    getW(wR, wC, ${c}, d2);
              }

            } else if (${2===f}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${c}, d2),
                getW(wR, wC, ${c} + 1, d2)
              );

              if (${m}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${c}),
                  getX(batch, xR, xC, ${c} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${c}, xR, xC),
                  getX(batch, ${c} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${3===f}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${c}, d2),
                getW(wR, wC, ${c} + 1, d2),
                getW(wR, wC, ${c} + 2, d2)
              );

              if (${m}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${c}),
                  getX(batch, xR, xC, ${c} + 1),
                  getX(batch, xR, xC, ${c} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${c}, xR, xC),
                  getX(batch, ${c} + 1, xR, xC),
                  getX(batch, ${c} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${t?"result += getBiasAtOutCoords();":""}
        ${y}
        setOutput(result);
      }
    `}}class Tj{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,a=e.strideDepth,s=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,h=e.filterDepth,p=e.filterHeight,d=e.filterWidth,c=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`
      const ivec3 strides = ivec3(${a}, ${s}, ${i});
      const ivec3 pads = ivec3(${t}, ${n}, ${r});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${h}; wF++) {
          int xF = xFCorner + wF * ${o};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${p}; wR++) {
            int xR = xRCorner + wR * ${l};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d}; wC++) {
              int xC = xCCorner + wC * ${u};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${c}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${1===f}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${c}) *
                  getW(wF, wR, wC, ${c}, d2);
              } else if (${2===f}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${c}),
                  getX(batch, xF, xR, xC, ${c} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${c}, d2),
                  getW(wF, wR, wC, ${c} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${3===f}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${c}),
                  getX(batch, xF, xR, xC, ${c} + 1),
                  getX(batch, xF, xR, xC, ${c} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${c}, d2),
                  getW(wF, wR, wC, ${c} + 1, d2),
                  getW(wF, wR, wC, ${c} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class TK{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Sg(this.outputShape.length);let s=e.padInfo.left,i=e.strideWidth,o=e.dilationWidth,l=e.filterHeight,u=e.filterWidth,h=`
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;for(let e=0;e<u;e++)h+=`
           vec4 xTexelC${2*e};
           int xTexelC${2*e}Ready;
           vec4 xTexelC${2*e+1};
           int xTexelC${2*e+1}Ready;
           vec4 xC${e};`;h+=`
     for (int r = 0; r < ${l}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;for(let e=0;e<u;e++)h+=`
           xTexelC${2*e} = vec4(0.0);
           xTexelC${2*e}Ready = 0;
           xTexelC${2*e+1} = vec4(0.0);
           xTexelC${2*e+1}Ready = 0;
           xC${e} = vec4(0.0);`;h+=`
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;for(let t=0;t<(u+1)/2;t++){let n=2*t;if(h+=`
           xC = xCCorner + ${n*o};
           `,1===i){if(n<u&&(s%2==1?(h+=`
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {
                   xTexelC${n} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${n}.zw = vec2(0.0);
                   }
                   xTexelC${n}Ready = 1;
                 }
               `,1===o&&n>0?h+=`
                 xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);
                 `:h+=`
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${n} = vec4(previous.zw, xTexelC${n}.xy);
                   } else {
                     xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);
                   }
                   `):h+=`
                 if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {
                   xTexelC${n} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${n}.zw = vec2(0.0);
                   }
                   xTexelC${n}Ready = 1;
                 }

                 xC${n} = xTexelC${n};
                 `,n+1<u)){let e=s%2==0?rX.nearestLargerEven(o):o;o%2==0&&s%2==1||o%2!=0&&s%2!=1?(h+=`
                   xCOffset = xC + imod(pads[1], 2) + ${e};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {
                     xTexelC${n+1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${n+1}.zw = vec2(0.0);
                     }
                     xTexelC${n+1}Ready = 1;
                   }
                   `,o>1?h+=`
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${n+1} = vec4(previous.zw, xTexelC${n+1}.xy);
                     } else {
                      xC${n+1} = vec4(0.0, 0.0, xTexelC${n+1}.xy);
                     }
                     `:h+=`
                     xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);
                     `):1===e?h+=`
                     xC${n+1} = xTexelC${n};
                     `:h+=`
                     xCOffset = xC + ${e};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {
                       xTexelC${n+1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${n+1}.zw = vec2(0.0);
                       }
                       xTexelC${n+1}Ready = 1;
                     }

                     xC${n+1} = xTexelC${n+1};
                     `}}else n<u&&(s%2==1?(h+=`
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {
                   xTexelC${n} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${n}.zw = vec2(0.0);
                   }
                   xTexelC${n}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {
                   xTexelC${n+1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${n+1}.zw = vec2(0.0);
                   }
                   xTexelC${n+1}Ready = 1;
                 }

                 xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);
               `,n+1<u&&(h+=`
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);
                 `)):(h+=`
                 if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {
                   xTexelC${n} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${n}.zw = vec2(0.0);
                   }
                   xTexelC${n}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {
                   xTexelC${n+1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${n+1}.zw = vec2(0.);
                   }
                   xTexelC${n+1}Ready = 1;
                 }

                 xC${n} = vec4(
                   xTexelC${n}.xy, xTexelC${n+1}.xy);
               `,n+1<u&&(h+=`
                   xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);
                 `)));n<u&&(h+=`
             wTexel = getW(r, ${n}, d1, d2);
             dotProd += xC${n}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${n}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `,n+1<u&&(h+=`
               wTexel = getW(r, ${n+1}, d1, d2);
               dotProd += xC${n+1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${n+1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `))}h+=`
     }
   
     }
   
     }
   `;let p="",d="";n&&(p=r?`vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${n}
         }`:a?`vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${n}
         }`:`vec4 activation(vec4 x) {
           ${n}
         }`,d="result = activation(result);"),t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
       ${p}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${h}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${t?"result += getBiasAtOutCoords();":""}
         ${d}
         setOutput(result);
       }
     `}}class TX{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=Sg(this.outputShape.length);let{dataFormat:n}=t,r=I5(),a="channelsLast"===n,s=a?1:2,i=a?2:3,o=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`,l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`
          blockIndex = rc.z + ${t};
          pos = rc.y + ${e};

          ${o}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${s}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${i}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${a}) {
                  innerDims = vec2(d1, ch);
                  result[${2*e+t}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${2*e+t}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;this.userCode=`
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${l}

        ${r.output} = result;
      }
    `}}function TY(e,t){let n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function TZ({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:o=null}){let l;let u=e.shape,h=r.texData.get(e.dataId),p=n.inChannels,d=u[0]*u[1]*u[2],c=n.outChannels,f="channelsLast"===n.dataFormat,m=[];if(null!=s){let e=TY(s.shape,f);null!=e&&(s=N1({inputs:{x:s},backend:r,attrs:{shape:e}}),m.push(s))}if(null!=a){let e=TY(a.shape,f);null!=e&&(a=N1({inputs:{x:a},backend:r,attrs:{shape:e}}),m.push(a))}let g=!((1===d||1===c)&&p>1e3)&&h.isPacked&&f&&null!=h.texture&&u[2]%2!=0&&rX.arraysEqual(h.shape.slice(-3),u.slice(-3));if(g){let p=u[0]*u[1]*(u[2]+1),d={dataId:e.dataId,shape:[1,p,n.inChannels],dtype:e.dtype},c=h.shape;h.shape=h.shape.slice(),h.shape[h.shape.length-2]++,rX.assert(I0(h.shape,d.shape),()=>`packed reshape ${h.shape} to ${d.shape} isn't free`);let f=N1({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(f);let g=Te({a:d,b:f,backend:r,transposeA:!1,transposeB:!1,bias:a,activation:o,preluActivationWeights:s,leakyreluAlpha:i}),y=r.texData.get(g.dataId);rX.assert(y.isPacked,()=>"batchMatMul result is expected to be packed"),h.shape=c,y.shape=n.outShape,(l=NB({inputs:{x:g},backend:r})).shape=n.outShape,m.push(g)}else{let u=n.outHeight*n.outWidth,h=N1({inputs:{x:e},backend:r,attrs:{shape:f?[n.batchSize,u,n.inChannels]:[n.batchSize,n.inChannels,u]}}),p=N1({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),d=Te({a:f?h:p,b:f?p:h,transposeA:!f,transposeB:!1,backend:r,bias:a,activation:o,preluActivationWeights:s,leakyreluAlpha:i});l=N1({inputs:{x:d},backend:r,attrs:{shape:n.outShape}}),m.push(h),m.push(p),m.push(d)}for(let e of m)r.disposeIntermediateTensorInfo(e);return l}function TJ({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:s=null,leakyreluAlpha:i=0,activation:o=null}){let{filterWidth:l,filterHeight:u,inChannels:h,outWidth:p,outHeight:d,dataFormat:c}=n,f="channelsLast"===c,m=l*u*h,g=d*p,y=[n.batchSize,m,g],b=[];if(null!=s){let e=TY(s.shape,f);null!=e&&(s=N1({inputs:{x:s},backend:r,attrs:{shape:e}}),b.push(s))}if(null!=a){let e=TY(a.shape,f);null!=e&&(a=N1({inputs:{x:a},backend:r,attrs:{shape:e}}),b.push(a))}let x=N1({inputs:{x:t},backend:r,attrs:{shape:[1,m,rX.sizeFromShape(t.shape)/m]}});b.push(x);let k=new TX(y,n),v=[e.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],w=r.runWebGLProgram(k,[e],"float32",v),I=N1({inputs:{x:w},backend:r,attrs:{shape:y}});b.push(w),b.push(I);let S=null!=a,N=null!=s,T="leakyrelu"===o,C=o?NX(o,!0):null,$=new NY(f?I.shape:x.shape,f?x.shape:I.shape,f?[n.batchSize,g,n.outChannels]:[n.batchSize,n.outChannels,g],!0,!1,S,C,N,T),E=f?[I,x]:[x,I];if(a&&E.push(a),N&&E.push(s),T){let e=r.makeTensorInfo([],"float32",rX.createScalarValue(i,"float32"));E.push(e),b.push(e)}let A=r.runWebGLProgram($,E,"float32"),R=N1({inputs:{x:A},backend:r,attrs:{shape:n.outShape}});for(let e of(b.push(A),b))r.disposeIntermediateTensorInfo(e);return R}class TQ{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s="channelsLast"===e.dataFormat;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${r};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              if (${s}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}}class T0{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${s?3:1}];

        ivec2 dyCorner = ivec2(coords[${s?1:2}], coords[${s?2:3}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${s}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `}}class T1{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.padInfo.front,s=e.padInfo.top,i=e.padInfo.left;this.userCode=`
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t} - ${a};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${n} - ${s};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${r} - ${i};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class T2{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=r-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${o}, ${l}, ${u});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t}; wF++) {
          float dyF = float(dyFCorner + wF) / ${a}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t} - 1 - wF;

          for (int wR = 0; wR < ${n}; wR++) {
            float dyR = float(dyRCorner + wR) / ${s}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${n} - 1 - wR;

            for (int wC = 0; wC < ${r}; wC++) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${r} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `}}let T3=Nq+`
  return cos(x);
`,T4=Nj({opSnippet:T3}),T6=`
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`,T5=Nj({opSnippet:T6});class T8{constructor(e,t,n,r,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];let[s,i,o,l]=e,[u]=t,[h,p]=n;this.outputShape=[u,h,p,l];let[d,c]=[`${i-1}.0`,`${o-1}.0`],[f,m,g]=h>1?[`${(i-1)/(h-1)}`,"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[y,b,x]=p>1?[`${(o-1)/(p-1)}`,"(x2-x1) * width_ratio",`x1*${c} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${c}`];this.userCode=`
      const float height_ratio = float(${f});
      const float width_ratio = float(${y});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${s}) {
          return;
        }

        float height_scale = ${m};
        float width_scale = ${b};

        float in_y = ${g};
        if( in_y < 0.0 || in_y > ${d} ) {
          setOutput(float(${a}));
          return;
        }
        float in_x = ${x};
        if( in_x < 0.0 || in_x > ${c} ) {
          setOutput(float(${a}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${"bilinear"===r?1:0} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `}}!function(e){e.Prod="*",e.Sum="+"}(E||(E={}));class T7{constructor(e,t,n,r){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];let a=this.outputShape.length,s=this.op===E.Prod?"1.0":"0.0",i=n?s:`getX(${T9(a,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1],l="",u="";n?(l=r?`end != ${o-1}`:"end != 0",u=r?"end + 1":"end - 1"):(l=r?`end + pow2 < ${o}`:"end >= pow2",u=r?"end + pow2":"end - pow2"),this.userCode=`
      void main() {
        ${Sh(a)} coords = getOutputCoords();
        int end = ${Ce(a,"coords",this.op)};
        float val = ${i};
        int pow2 = int(pow(2.0, index));
        if (${l}) {
          int idx = ${u};
          ${Ce(a,"coords",this.op)} = idx;
          val ${this.op}= getX(${T9(a,"coords",this.op)});
        }
        setOutput(val);
      }
    `}}function T9(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function Ce(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function Ct(e,t,n,r,a,s){let i=t.shape.length,o=ch.getAxesPermutation([r],i),l=t;null!=o&&(l=N9({inputs:{x:t},backend:n,attrs:{perm:o}}));let u=ch.getInnerMostAxes(1,i)[0];if(u!==i-1)throw Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);let h=l.shape[u],p=NB({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(h))-1;t++){let r=new T7(e,l.shape,!1,s),a=[[t]],i=p;p=n.runWebGLProgram(r,[p],p.dtype,a),n.disposeIntermediateTensorInfo(i)}if(a){let t=new T7(e,l.shape,a,s),r=p;p=n.runWebGLProgram(t,[p],p.dtype),n.disposeIntermediateTensorInfo(r)}if(null!=o){let e=ch.getUndoAxesPermutation(o),t=N9({inputs:{x:p},backend:n,attrs:{perm:e}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(l),t}return p}class Cn{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t};
      int offset_h = imod(h, ${t});
      int in_w = w / ${t};
      int offset_w = imod(w, ${t});
      int offset_d = (offset_h * ${t} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}class Cr{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Sg(this.outputShape.length);let s=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels,l="",u="";n&&(l=r?`float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }`:a?`float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }`:`
          float activation(float x) {
            ${n}
          }
        `,u="result = activation(result);"),t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${l}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${o};
        int q = d2 - d1 * ${o};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${s}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${t?"result += getBiasAtOutCoords();":""}
        ${u}
        setOutput(result);
      }
    `}}class Ca{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=Sg(this.outputShape.length);let s=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,h=e.filterWidth,p=`
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;for(let e=0;e<h;e++)p+=`
          vec4 xTexelC${2*e};
          int xTexelC${2*e}Ready;
          vec4 xTexelC${2*e+1};
          int xTexelC${2*e+1}Ready;
          vec4 xC${e};`;p+=`
    for (int r = 0; r < ${u}; r++) {
      `;for(let e=0;e<h;e++)p+=`
          xTexelC${2*e} = vec4(0.0);
          xTexelC${2*e}Ready = 0;
          xTexelC${2*e+1} = vec4(0.0);
          xTexelC${2*e+1}Ready = 0;
          xC${e} = vec4(0.0);`;p+=`
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;for(let e=0;e<(h+1)/2;e++){let t=2*e;if(p+=`
          xC = xCCorner + ${t*l};
          `,1===o){if(t<h&&(i%2==1?(p+=`
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }
              `,1===l&&t>0?p+=`
                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);
                `:p+=`
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);
                  } else {
                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);
                  }
                  `):p+=`
                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                xC${t} = xTexelC${t};
                `,t+1<h)){let e=i%2==0?rX.nearestLargerEven(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(p+=`
                  xCOffset = xC + imod(pads[1], 2) + ${e};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${t+1}.zw = vec2(0.0);
                    }
                    xTexelC${t+1}Ready = 1;
                  }
                  `,l>1?p+=`
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${t+1} = vec4(previous.zw, xTexelC${t+1}.xy);
                    } else {
                     xC${t+1} = vec4(0.0, 0.0, xTexelC${t+1}.xy);
                    }
                    `:p+=`
                    xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);
                    `):1===e?p+=`
                    xC${t+1} = xTexelC${t};
                    `:p+=`
                    xCOffset = xC + ${e};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${t+1}.zw = vec2(0.0);
                      }
                      xTexelC${t+1}Ready = 1;
                    }

                    xC${t+1} = xTexelC${t+1};
                    `}}else t<h&&(i%2==1?(p+=`
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {
                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${t+1}.zw = vec2(0.0);
                  }
                  xTexelC${t+1}Ready = 1;
                }

                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);
              `,t+1<h&&(p+=`
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);
                `)):(p+=`
                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {
                  xTexelC${t} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${t}.zw = vec2(0.0);
                  }
                  xTexelC${t}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {
                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${t+1}.zw = vec2(0.);
                  }
                  xTexelC${t+1}Ready = 1;
                }

                xC${t} = vec4(
                  xTexelC${t}.xy, xTexelC${t+1}.xy);
              `,t+1<h&&(p+=`
                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);
                `)));t<h&&(p+=`
            wTexel = getW(r, ${t}, d1, q);
            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);
          `,t+1<h&&(p+=`
              wTexel = getW(r, ${t+1}, d1, q);
              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);
            `))}p+=`
    }
  
      }
    `;let d="",c="";n&&(d=r?`vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${n}
        }`:a?`vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${n}
        }`:`vec4 activation(vec4 x) {
          ${n}
        }`,c="result = activation(result);"),t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`
      ${d}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${s};
        int q = d2 - d1 * ${s};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${p}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${t?"result += getBiasAtOutCoords();":""}
        ${c}
        setOutput(result);
      }
    `}}class Cs{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;let t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s=e.outChannels/e.inChannels;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${s} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t} - ${r};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${n} - ${a};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class Ci{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;let t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`
      const ivec2 pads = ivec2(${s}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t}; wR++) {
          float dyR = float(dyRCorner + wR) / ${r}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t} - 1 - wR;

          for (int wC = 0; wC < ${n}; wC++) {
            float dyC = float(dyCCorner + wC) / ${a}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${n} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${o}; dm++) {
              int d2 = d1 * ${o} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}class Co{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode=`
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `}}class Cl{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;let{inHeight:t,inWidth:n,padInfo:r,strideHeight:a,strideWidth:s,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:h,left:p}=r;this.userCode=`
      const ivec2 strides = ivec2(${a}, ${s});
      const ivec2 pads = ivec2(${h}, ${p});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${i}; h++) {
          int hIn = hBeg + h * ${l};

          if (hIn >= 0 && hIn < ${t}) {
            for (int w = 0; w < ${o}; w++) {
              int wIn = wBeg + w * ${u};

              if (wIn >= 0 && wIn < ${n}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `}}let Cu=`
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`,Ch=Nj({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:Cu}),Cp=`
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`,Cd=`
  return vec4(equal(a, b));
`,Cc=NK({opSnippet:"return float(a == b);",packedOpSnippet:Cd,dtype:"bool",cpuKernelImpl:SL}),Cf=`
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${ch.ERF_P};
  float a1 = ${ch.ERF_A1};
  float a2 = ${ch.ERF_A2};
  float a3 = ${ch.ERF_A3};
  float a4 = ${ch.ERF_A4};
  float a5 = ${ch.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`,Cm=Nj({opSnippet:Cf}),Cg=Nq+`
  return exp(x);
`,Cy=`
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,Cb=Nj({opSnippet:Cg,packedOpSnippet:Cy,cpuKernelImpl:Sz,dtype:"float32"});function Cx(e){let{inputs:t,attrs:n,backend:r}=e,{dim:a}=n,{input:s}=t,i=s.shape.length,o=s.shape.slice(),l=a;return a<0&&(rX.assert(-(i+1)<=a,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),l=i+a+1),o.splice(l,0,1),N1({inputs:{x:s},backend:r,attrs:{shape:o}})}let Ck="return exp(x) - 1.0;",Cv=Nj({opSnippet:Ck,packedOpSnippet:Ck,cpuKernelImpl:SP});class Cw{constructor(e,t,n){let r;this.variableNames=["real","imag"];let a=t[1];this.outputShape=t;let s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=n?`${a}.0`:"1.0";if("real"===e)r="return real * expR - imag * expI;";else if("imag"===e)r="return real * expI + imag * expR;";else throw Error(`FFT component must be either "real" or "imag", got ${e}.`);this.userCode=`
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${r}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${a});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${a}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${i};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `}}function CI(e,t,n){let r=n.texData.get(e.dataId),a=rX.sizeFromShape(e.shape),s=e.shape[e.shape.length-1],i=a/s,o=N1({inputs:{x:e},backend:n,attrs:{shape:[i,s]}}),l=o.shape,u=new Cw("real",l,t),h=new Cw("imag",l,t),p=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:l},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:l}],d=n.runWebGLProgram(u,p,"float32"),c=n.runWebGLProgram(h,p,"float32"),f=NW({inputs:{real:d,imag:c},backend:n});n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c);let m=N1({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(f),m}class CS{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode=`
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `}}function CN(e){let{backend:t,attrs:n}=e,{shape:r,value:a}=n,{dtype:s}=n;if("string"===(s=s||rX.inferDtype(a))){let e=rX.getArrayFromDType(s,rX.sizeFromShape(r));return e.fill(a),t.makeTensorInfo(r,s,e)}{let e=new CS(r,a),n=[[a]];return t.runWebGLProgram(e,[],s,n)}}class CT{constructor(e){this.variableNames=["Image"],this.outputShape=[];let t=e[2];this.outputShape=e,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `}}let CC="return floor(x);",C$=Nj({opSnippet:CC,packedOpSnippet:CC,cpuKernelImpl:SB}),CE=`
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`,CA=`
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`,CR=NK({opSnippet:CE,packedOpSnippet:CA,dtype:"int32"});class CF{constructor(e){this.variableNames=["A"];let t=I5(),[n,r]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);

        vec4 values = ${t.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `}}class CD{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;let t=I5(),[n,r]=e;this.outputShape=e,this.userCode=`
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${r}.0, ${n}.0);
            vec4 values = ${t.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t.output} = result;
      }
    `}}let C_=eM.getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");class CO{constructor(e,t,n,r){this.sliceDim=e,this.strides=t,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=n;let a=Sh(n.length),s=`
    int index;`;for(let e=0;e<this.sliceDim;e++)s+=`
          index = round(getIndices(coords[0], ${e}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[e]};
          flattenIndex += index * ${this.strides[e]};`;this.userCode=`
         void main() {
          ${a} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${s}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `}}class CM{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;let n=Sh(this.rank),r=function(e,t){let n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let t=0;t<e.length;t++)2===t?r.push("index"):r.push(`${n[t]}`);return r.join()}(e,0);this.userCode=`
      void main() {
        ${n} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${r}));
      }
    `}}function CL(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,indices:s}=t,{axis:i,batchDims:o}=r,l=rX.parseAxisParam(i,a.shape)[0];if(eM.get("DEBUG")){let e=n.readSync(s.dataId),t=a.shape[l];for(let n=0;n<e.length;++n){let r=e[n];rX.assert(r<=t-1&&r>=0,()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`)}}let u=ch.segment_util.collectGatherOpShapeInfo(a,s,l,o),h=rX.sizeFromShape(s.shape),p=[],d=N1({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),c=N1({inputs:{x:s},backend:n,attrs:{shape:[u.batchSize,h/u.batchSize]}});p.push(d),p.push(c);let f=[u.batchSize,u.outerSize,h/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([a,s])||"string"===a.dtype){let e=n.bufferSync(c),t=n.bufferSync(d),r=SV(t,e,f);return p.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(u.outputShape,r.dtype,r.values)}let m=new CM(d.shape,f),g=n.runWebGLProgram(m,[d,c],d.dtype);p.push(g);let y=N1({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return p.forEach(e=>n.disposeIntermediateTensorInfo(e)),y}let Cz=`
  return vec4(greaterThan(a, b));
`,CP=NK({opSnippet:"return float(a > b);",packedOpSnippet:Cz,cpuKernelImpl:SU,dtype:"bool"}),CB=`
  return vec4(greaterThanEqual(a, b));
`,CW=NK({opSnippet:"return float(a >= b);",packedOpSnippet:CB,dtype:"bool",cpuKernelImpl:SG}),CV=Nj({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),CU=Nj({opSnippet:"return float(isinf(x));",dtype:"bool"}),CG=Nj({opSnippet:"return float(isnan(x));",dtype:"bool"}),CH=`
  return vec4(lessThan(a, b));
`,Cq=NK({opSnippet:"return float(a < b);",packedOpSnippet:CH,cpuKernelImpl:SH,dtype:"bool"}),Cj=`
  return vec4(lessThanEqual(a, b));
`,CK=NK({opSnippet:"return float(a <= b);",packedOpSnippet:Cj,cpuKernelImpl:Sq,dtype:"bool"}),CX=Nq+`
  return x < 0.0 ? 0./0. : log(x);
`,CY=`
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`,CZ=Nj({opSnippet:CX,packedOpSnippet:CY,cpuKernelImpl:SK}),CJ=Nq+`
  return log(1.0 + x);
`,CQ=Nj({opSnippet:CJ}),C0=`
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`,C1=NK({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:C0,dtype:"bool"}),C2=Nj({opSnippet:"return float(!(x >= 1.0));"}),C3=`
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`,C4=NK({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:C3,dtype:"bool"});class C6{constructor(e,t,n,r,a){let s;this.variableNames=["x"],this.outputShape=[];let i=e[3]-1;this.outputShape=e;let o=`float(${n}) + float(${r}) * sum`;s=.5===a?`inversesqrt(${o})`:1===a?`1.0/(${o})`:`exp(log(${o}) * float(-${a}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${t}; j <= ${t}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${i}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${s};
        setOutput(val);
      }
    `}}class C5{constructor(e,t,n,r,a){let s;this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;let i=e[3]-1;this.outputShape=e;let o=`float(${n}) + float(${r}) * sum`;s=.5===a?`inversesqrt(${o})`:1===a?`1.0/(${o})`:`exp(log(${o}) * float(-${a}));`,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${t};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${t}; j <= ${t}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${s};
        setOutput(result);
      }
    `}}class C8{constructor(e,t,n,r,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=a,this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${r}) * norm + float(${n});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${r})
                * float(${a})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${a});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `}}function C7(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{reductionIndices:i,keepDims:o}=a,l=s.shape.length,u=rX.parseAxisParam(i,s.shape),h=u,p=ch.getAxesPermutation(h,l),d=null!=p,c=r.shouldExecuteOnCPU([s]),f=s;if(d){if(c){let e=r.texData.get(f.dataId),t=e.values,n=Array(l);for(let e=0;e<n.length;e++)n[e]=s.shape[p[e]];let a=Np(t,s.shape,s.dtype,p,n);f=r.makeTensorInfo(n,s.dtype);let i=r.texData.get(f.dataId);i.values=a}else f=N8(s,p,r);h=ch.getInnerMostAxes(h.length,l)}ch.assertAxesAreInnerMostDims("max",h,l);let[m,g]=ch.computeOutAndReduceShapes(f.shape,h),y=m;if(o&&(y=ch.expandShapeToKeepDim(m,u)),c){let e=r.texData.get(f.dataId),n=e.values,a=SX(n,rX.sizeFromShape(g),y,s.dtype);t=r.makeTensorInfo(y,s.dtype);let i=r.texData.get(t.dataId);i.values=a}else t=function(e,t,n,r){let a=rX.sizeFromShape(t),s=rX.sizeFromShape(e.shape),i=s/a,o=N1({inputs:{x:e},attrs:{shape:[i,a]},backend:r}),l=N4(o,e.dtype,"max",r),u=N1({inputs:{x:l},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(o),r.disposeIntermediateTensorInfo(l),u}(f,g,y,r);return d&&r.disposeIntermediateTensorInfo(f),t}let C9=NM+`
  return max(a, b);
`,$e=`
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+Nz+`
  return result;
`,$t=NK({opSnippet:C9,packedOpSnippet:$e,cpuKernelImpl:SY});class $n{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,a=e.effectiveFilterHeight,s=e.effectiveFilterWidth,i=a-1-e.padInfo.top,o=s-1-e.padInfo.left;this.userCode=`
      const ivec2 pads = ivec2(${i}, ${o});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${a};
          wR += ${r}) {
          float dyR = float(dyRCorner + wR) / ${t}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${s}; wC++) {
            float dyC = float(dyCCorner + wC) / ${n}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${a*s-1} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${s} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `}}class $r{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;let t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,h=o-1-e.padInfo.front,p=l-1-e.padInfo.top,d=u-1-e.padInfo.left;this.userCode=`
      const ivec3 pads = ivec3(${h}, ${p}, ${d});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${o};
           wD += ${a}) {
          float dyD = float(dyDCorner + wD) / ${t}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${l};
              wR += ${s}) {
            float dyR = float(dyRCorner + wR) / ${n}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${u};
                wC += ${i}) {
              float dyC = float(dyCCorner + wC) / ${r}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${o*l*u-1} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${l} * ${u} +
                  wR * ${u} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `}}let $a=NM+`
  return min(a, b);
`,$s=`
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  `+Nz+`
  return result;
`,$i=NK({opSnippet:$a,packedOpSnippet:$s,cpuKernelImpl:SZ});class $o{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);let r=e.length,a=Sh(r),s=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),l="reflect"===n?0:1;if(1===r){this.userCode=`
        int start = ${s};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${l};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${l};
          }
          setOutput(getX(outC - start));
        }
      `;return}this.userCode=`
      ${a} start = ${a}(${s});
      ${a} end = ${a}(${i});

      void main() {
        ${a} outC = getOutputCoords();
        for (int i = 0; i < ${r}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${l};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};
          }
        }
        ${a} coords = outC - start;
        setOutput(getX(${o}));
      }
    `}}class $l{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);let r=e.length,a=Sh(r),s=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=Nf("rc",r),l=Nf("source",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${l.slice(-2).join()})`,p="reflect"===n?0:1,d="";if(1===r){let e=`
        ${a} source = rc;
        if (source < start) {
          source = start * 2 - source - ${p};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${p};
        }
        source -= start;
      `;d=`
        ${a} rc = outputLoc;
        ${e}
        result[0] = getChannel(getX(${l.join()}), ${h});
        ${o[r-1]} += 1;
        if(${u}) {
          ${e}
          result[1] = getChannel(getX(${l.join()}), ${h});
        }
      `}else{let e=`
        ${a} source = rc;
        ${a} lt = ${a}(lessThan(source, start));
        ${a} gte = ${a}(greaterThanEqual(source, end));
        ${a} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${p}) +
                gte * ((end - 1) * 2 - source + ${p});
        source -= start;
      `;d=`
        ${a} rc = outputLoc;
        ${e}
        result[0] = getChannel(getX(${l.join()}), ${h});
        ${o[r-1]} += 1;
        if(${u}) {
          ${e}
          result[1] = getChannel(getX(${l.join()}), ${h});
        }
        rc = outputLoc;
        ${o[r-2]} += 1;
        if(${o[r-2]} < ${this.outputShape[r-2]}) {
          ${e}
          result[2] = getChannel(getX(${l.join()}), ${h});
          ${o[r-1]} += 1;
          if(${u}) {
            ${e}
            result[3] = getChannel(getX(${l.join()}), ${h});
          }
        }
      `}this.userCode=`
      const ${a} start = ${a}(${s});
      const ${a} end = ${a}(${i});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${d}
        setOutput(result);
      }
    `}}let $u=`if (b == 0.0) return NAN;
  return mod(a, b);`,$h=`
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  `+Nz+`
  return result;
`,$p=NK({opSnippet:$u,packedOpSnippet:$h});class $d{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t-1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t-1}));
      }
    `}}let $c=`
if (a == b) {
  return 1.0;
};
return a / b;`,$f=`
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`,$m=NK({opSnippet:$c,packedOpSnippet:$f,checkOutOfBounds:!0}),$g="return a - b;",$y=NK({opSnippet:$g,packedOpSnippet:$g,supportsComplex:!0,cpuKernelImpl:Nl});function $b(e){let{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:s}=r,i=rX.parseAxisParam([s],a.shape),o=C7({inputs:{x:a},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=ch.expandShapeToKeepDim(o.shape,i),u=N1({inputs:{x:o},backend:n,attrs:{shape:l}}),h=$y({inputs:{a:a,b:u},backend:n}),p=Cb({inputs:{x:h},backend:n}),d=N7({inputs:{x:p},backend:n,attrs:{axis:i,keepDims:!1}}),c=N1({inputs:{x:d},backend:n,attrs:{shape:l}}),f=$m({inputs:{a:p,b:c},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),f}let $x=Nw+`
  return -x;
`,$k=`
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,$v=fm.nonMaxSuppressionV3Impl,$w=fm.nonMaxSuppressionV4Impl,$I=fm.nonMaxSuppressionV5Impl;class $S{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${r}), float(${n}),
                      float(index == coords.y)));
      }
    `}}function $N(e){let{inputs:t,backend:n}=e,{x:r}=t;if("complex64"!==r.dtype)return CN({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n});{let e=T_({inputs:{input:r},backend:n}),t=$N({inputs:{x:e},backend:n}),a=TG({inputs:{input:r},backend:n}),s=$N({inputs:{x:a},backend:n}),i=NW({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),i}}class $T{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);let r=e.length,a=Sh(r),s=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);if(1===r){this.userCode=`
        int start = ${s};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;return}this.userCode=`
      ${a} start = ${a}(${s});
      ${a} end = ${a}(${i});

      void main() {
        ${a} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${a} coords = outC - start;
          setOutput(getX(${o}));
        }
      }
    `}}class $C{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);let r=e.length,a=Sh(r),s=t.map(e=>e[0]).join(","),i=t.map((t,n)=>t[0]+e[n]).join(","),o=Nf("rc",r),l=Nf("source",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${l.slice(-2).join()})`,p=[`${a} rc = outputLoc;`,`${o[r-1]} += 1;
       if(${u}) {
      `,1===r?"":`}
       rc = outputLoc;
       ${o[r-2]} += 1;
       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${o[r-1]} += 1;
         if(${u}) {`],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",c="";for(let e=0,t=1===r?2:4;e<t;e++)c+=`
        ${p[e]}
        if (${d}) {
          result[${e}] = float(value);
        } else {
          ${a} source = rc - start;
          result[${e}] = getChannel(getX(${l.join()}), ${h});
        }
      `;c+=1===r?"} ":"}}",this.userCode=`
      const ${a} start = ${a}(${s});
      const ${a} end = ${a}(${i});

      void main() {
        ${a} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${c}
        setOutput(result);
      }
    `}}let $$=e=>{let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,constantValue:i}=r;if(0===rX.sizeFromShape(a.shape)){let e=s.map((e,t)=>e[0]+a.shape[t]+e[1]);return CN({backend:n,attrs:{shape:e,value:i,dtype:a.dtype}})}let o=eM.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new $C(a.shape,s,i):new $T(a.shape,s,i),l=[[i]];return n.runWebGLProgram(o,[a],a.dtype,l)},$E=`
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`,$A=`
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  `+Nz+`
  return result;
`,$R=NK({opSnippet:$E,packedOpSnippet:$A}),$F=e=>{let{backend:t,attrs:n}=e,{start:r,stop:a,step:s,dtype:i}=n,o=S4(r,a,s,i);return t.makeTensorInfo([o.length],i,o)},$D=Nj({opSnippet:"return 1.0 / x;"}),$_=Nw+`
  return (x < 0.0) ? 0.0 : x;
`,$O=`
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,$M=Nj({opSnippet:$_,packedOpSnippet:$O}),$L=Nw+`
  return (x < 0.0) ? 0.0 : min(6.0, x);
`,$z=`
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,$P=Nj({opSnippet:$L,packedOpSnippet:$z});class $B{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];let[s,i,o,l]=e;this.outputShape=[s,t,n,l];let u=[r&&t>1?i-1:i,r&&n>1?o-1:o],h=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0]/h[0]},
          ${u[1]/h[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `}}class $W{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[s,i,o,l]=e;this.outputShape=[s,t,n,l];let u=[r&&t>1?i-1:i,r&&n>1?o-1:o],h=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0]/h[0]},
          ${u[1]/h[1]},
          ${u[1]/h[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l-1};
        bool hasNextRow = coords.z < ${n-1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `}}class $V{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,r,a]=t,[,s,i]=e,o=[n&&s>1?r-1:r,n&&i>1?a-1:a],l=[n&&s>1?s-1:s,n&&i>1?i-1:i],u=o[0]/l[0],h=o[1]/l[1],p=1/u,d=1/h,c=2*Math.ceil(p)+2,f=2*Math.ceil(d)+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${p});
        const float invWidthScale = float(${d});

        const int winHeight = int(${c});
        const int winWidth = int(${f});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${s}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}class $U{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];let[s,i,o,l]=e;this.outputShape=[s,t,n,l];let u=[r&&t>1?i-1:i,r&&n>1?o-1:o],h=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${u[0]/h[0]},
          ${u[1]/h[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `}}class $G{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];let[s,i,o,l]=e;this.outputShape=[s,t,n,l];let u=[r&&t>1?i-1:i,r&&n>1?o-1:o],h=[r&&t>1?t-1:t,r&&n>1?n-1:n];this.userCode=`
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${u[0]/h[0]},
          ${u[1]/h[1]},
          ${u[1]/h[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,
                                     ${o}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC"};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${l-1};
        bool hasNextRow = coords.z < ${n-1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `}}class $H{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;let[,r,a]=t,[,s,i]=e,o=[n&&s>1?r-1:r,n&&i>1?a-1:a],l=[n&&s>1?s-1:s,n&&i>1?i-1:i],u=o[0]/l[0],h=o[1]/l[1],p=1/u,d=1/h,c=2*Math.ceil(p)+2,f=2*Math.ceil(d)+2;this.userCode=`
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${u});
        const float widthScale = float(${h});

        const float invHeightScale = float(${p});
        const float invWidthScale = float(${d});

        const int winHeight = int(${c});
        const int winWidth = int(${f});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${s}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float sourceFracRow =
              float(${o[0]}) *
                (float(dyR) / float(${l[0]}));

            float sourceFracCol =
                float(${o[1]}) *
                  (float(dyC) / float(${l[1]}));

            int sourceNearestRow = int(min(
                float(int(${r}) - 1),
                ${n} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${a}) - 1),
                ${n} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `}}class $q{constructor(e,t){this.variableNames=["x"];let n=e.length;if(n>4)throw Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n){this.userCode=`
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;return}let r=n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`,a=e.map((e,t)=>r(t)).join(","),s=Sh(n);this.userCode=`
      void main() {
        ${s} coords = getOutputCoords();
        setOutput(getX(${a}));
      }
    `}}class $j{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;let n=e.length;if(n>4)throw Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;let r=Nf("rc",n),a=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,s=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,i=Sh(n);function o(n){let r=e.map((r,a)=>-1!==t.indexOf(a)&&1!==e[a]?`${e[a]} - ${n[a]} - 1`:`${n[a]}`),a=r.join(","),s=r.slice(-2).join(",");return`getChannel(getX(${a}), vec2(${s}))`}1===n?this.userCode=`
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${a}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      `:this.userCode=`
        void main() {
          ${i} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${o(r.slice())};
          if(${a}){
            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(r.slice())};
          }
          if(${s}) {
            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};
            if(${a}) {
              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(r.slice())};
            }
          }
          setOutput(result);
        }
    `}}class $K{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];let n=e[1],r=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`
        vec3 fill = vec3(${t.join(",")});
        float outputValue = fill[coords[3]];`,this.userCode=`
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${a}
          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `}}let $X=`
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`,$Y=Nj({opSnippet:$X}),$Z=Nj({opSnippet:"return inversesqrt(x);",cpuKernelImpl:S6});class $J{constructor(e,t,n,r,a,s,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=s;let o=Sh(a.length),l=Sh(s.length),u="";1===n?u="i":2===n&&(u="i, j");let h=`getIndices(${u})`,p="";1===r?p="i":2===r&&(p="i, coords[1]");let d=`getUpdates(${p})`;this.userCode=`
        ${o} strides = ${o}(${a});

        void main() {
          ${l} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t}; j++) {
              int index = round(${h});
              flattenedIndex += index * ${t>1?"strides[j]":"strides"};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${d};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `}}class $Q{constructor(e,t,n,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];let a=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,s=2===eM.getNumber("WEBGL_VERSION")?"while (left < right) {":a;this.userCode=`
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${s}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${"left"===r?"<":"<="} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `}}class $0{constructor(e,t,n){let r,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",r="resRC";else{let n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],i=[];for(let r=0;r<t.length;r++)i.push(`${n[r]}`),r<e&&s.push(`${n[r]}`);r=s.join(),a=i.join()}let s=Sh(n);this.userCode=`
      void main() {
        ${s} resRC = getOutputCoords();
        float cVal = getC(${r});
        if (cVal >= 1.0) {
          setOutput(getA(${a}));
        } else {
          setOutput(getB(${a}));
        }
      }
    `}}let $1=`
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${ch.SELU_SCALEALPHA};
  float scale = ${ch.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`,$2=Nj({opSnippet:$1}),$3=Nq+`
  return 1.0 / (1.0 + exp(-1.0 * x));
`,$4=`
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`,$6=Nj({opSnippet:$3,packedOpSnippet:$4,cpuKernelImpl:S8}),$5=`
  if (isnan(x)) { return 0.0; }
  return sign(x);
`,$8=Nj({opSnippet:$5}),$7=Nq+`
  return sin(x);
`,$9=Nj({opSnippet:$7}),Ee=`
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`,Et=Nj({opSnippet:Ee}),En=`
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`,Er=Nj({opSnippet:En}),Ea="return sqrt(x);",Es=Nj({opSnippet:Ea,packedOpSnippet:Ea,cpuKernelImpl:Nr}),Ei=Nj({opSnippet:"return x * x;"}),Eo="return (a - b) * (a - b);",El=NK({opSnippet:Eo,packedOpSnippet:Eo});class Eu{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;let r=n.length,a=Sh(n.length),s=Sh(n.length),i="";if(1===r)i="coords * strides + begin";else{let e=0;i=n.map((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`
      ${a} begin = ${a}(${e});
      ${a} strides = ${a}(${t});

      void main() {
        ${s} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `}}let Eh=Nj({opSnippet:"return tan(x);"}),Ep=`
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`,Ed=Nj({opSnippet:Ep});class Ec{constructor(e,t){this.variableNames=["A"];let n=Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;let r=Sh(this.rank),a=function(e){let t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;let n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`
      void main() {
        ${r} resRC = getOutputCoords();
        setOutput(getA(${a}));
      }
    `}}function Ef(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reps:s}=r;if("string"===a.dtype||a.shape.length>5){let e=n.readSync(a.dataId),t="string"===a.dtype?e.map(e=>rX.decodeString(e)):e,r=iI(a.shape,a.dtype,t),i=Nu(r,s);return n.makeTensorInfo(i.shape,i.dtype,i.values)}let i=new Ec(a.shape,s),o=n.runWebGLProgram(i,[a],a.dtype);return o}class Em{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode=`
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `}}class Eg{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode=`
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `}}function Ey(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function Eb(e){let t=1;for(;t<e;)t*=2;return t}class Ex{constructor(e,t,n,r,a,s){let i;switch(this.variableNames=["Image","Transforms"],this.outputShape=s,r){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${i} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${i} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${i} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${a});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${a});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t}));
                float mapY = mapCoord(inY, float(${e}));

                if (${"nearest"===n?1:2} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `}}class Ek{constructor(e,t){this.variableNames=["x","segmentIds"];let n=e.windowSize,r=e.batchSize,a=e.inSize,s=e.numSegments,i=s*Math.ceil(a/n);this.outputShape=[r,i];let o=4*Math.floor(n/4),l=n%4,u=`
        sumValue += dot(values, segFilter);
    `,h="";a%n>0&&(h=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return initializationValue;
        }
      `);let p="";a%n>0&&(p=`
        if (inIdx < 0 || inIdx >= ${a}) {
          return -1.0;
        }
      `),this.userCode=`
      const float initializationValue = 0.0;

      float getValue(int batch, int inIdx) {
        ${h}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${p}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${s})) * float(${n}));
        int currentSeg = int(mod(float(outIdx), float(${s})));

        float sumValue = 0.0;

        for (int i = 0; i < ${o}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${u}
        }

        int inIdx = inOffset + ${o};
        if (${1===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${u}
        } else if (${2===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${u}
        } else if (${3===l}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${u}
        }
        setOutput(sumValue);
      }
    `}}let Ev=[{kernelName:rR,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{a:a,b:s,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:h,leakyreluAlpha:p}=r;return Te({a:a,b:s,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:p,activation:h})}},{kernelName:eJ,backendName:"webgl",kernelFunc:function(e){let t;let{inputs:n,backend:r}=e,{x:a}=n;if(r.shouldExecuteOnCPU([a])&&"complex64"!==a.dtype){let e=r.texData.get(a.dataId),t=S7(e.values);return r.makeTensorInfo(a.shape,a.dtype,t)}return t=eM.getBool("WEBGL_PACK_UNARY_OPERATIONS")?new NA(a.shape,Tt):new Nv(a.shape,Tt),r.runWebGLProgram(t,[a],a.dtype)}},{kernelName:eQ,backendName:"webgl",kernelFunc:Tr},{kernelName:e0,backendName:"webgl",kernelFunc:Ts},{kernelName:e1,backendName:"webgl",kernelFunc:To},{kernelName:e2,backendName:"webgl",kernelFunc:function e(t){let{inputs:n,backend:r}=t;if(1===n.length)return NB({inputs:{x:n[0]},backend:r});if(n.length>eM.get("WEBGL_MAX_TEXTURES_IN_SHADER")){let t=Math.floor(n.length/2),a=e({inputs:n.slice(0,t),backend:r}),s=e({inputs:n.slice(t),backend:r});return e({inputs:[a,s],backend:r})}let a=n.map(e=>e.dtype).reduce((e,t)=>aU(e,t)),s=n.map(e=>e.shape),i=eM.getBool("WEBGL_PACK"),o=i?new Tu(n[0].shape,s):new Tl(n[0].shape,s);return r.runWebGLProgram(o,n,a)}},{kernelName:e3,backendName:"webgl",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{axis:i,keepDims:o}=a,l=s.shape.length,u=rX.parseAxisParam(i,s.shape),h=u,p=ch.getAxesPermutation(h,l),d=s;null!=p&&(d=N9({inputs:{x:s},backend:r,attrs:{perm:p}}),h=ch.getInnerMostAxes(h.length,l)),ch.assertAxesAreInnerMostDims("all",h,l);let[c,f]=ch.computeOutAndReduceShapes(d.shape,h),m=rX.sizeFromShape(f),g=N1({inputs:{x:d},backend:r,attrs:{shape:[-1,m]}}),y=N4(g,g.dtype,"all",r);if(o){let e=ch.expandShapeToKeepDim(c,u);t=N1({inputs:{x:y},backend:r,attrs:{shape:e}})}else t=N1({inputs:{x:y},backend:r,attrs:{shape:c}});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(y),null!=p&&r.disposeIntermediateTensorInfo(d),t}},{kernelName:e4,backendName:"webgl",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{axis:i,keepDims:o}=a,l=s.shape.length,u=rX.parseAxisParam(i,s.shape),h=u,p=ch.getAxesPermutation(h,l),d=s;null!=p&&(d=N9({inputs:{x:s},backend:r,attrs:{perm:p}}),h=ch.getInnerMostAxes(h.length,l)),ch.assertAxesAreInnerMostDims("any",h,l);let[c,f]=ch.computeOutAndReduceShapes(d.shape,h),m=rX.sizeFromShape(f),g=N1({inputs:{x:d},backend:r,attrs:{shape:[-1,m]}}),y=N4(g,g.dtype,"any",r);if(o){let e=ch.expandShapeToKeepDim(c,u);t=N1({inputs:{x:y},backend:r,attrs:{shape:e}})}else t=N1({inputs:{x:y},backend:r,attrs:{shape:c}});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(y),null!=p&&r.disposeIntermediateTensorInfo(d),t}},{kernelName:e6,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r,i=rX.parseAxisParam(s,a.shape),o=ch.getAxesPermutation(i,a.shape.length),l=a,u=[];null!=o&&(u.push(l=N9({inputs:{x:a},backend:n,attrs:{perm:o}})),i=ch.getInnerMostAxes(i.length,l.shape.length)),ch.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);let h=Td(n,l,i[0],"max");return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},{kernelName:e5,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r,i=rX.parseAxisParam(s,a.shape),o=ch.getAxesPermutation(i,a.shape.length),l=a,u=[];null!=o&&(u.push(l=N9({inputs:{x:a},backend:n,attrs:{perm:o}})),i=ch.getInnerMostAxes(i.length,l.shape.length)),ch.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);let h=Td(n,l,i[0],"min");return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},{kernelName:e8,backendName:"webgl",kernelFunc:Tf},{kernelName:e7,backendName:"webgl",kernelFunc:Tm},{kernelName:e9,backendName:"webgl",kernelFunc:Ty},{kernelName:tt,backendName:"webgl",kernelFunc:Tk},{kernelName:te,backendName:"webgl",kernelFunc:Tw},{kernelName:tn,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t;I4(a,"avgPool");let{filterSize:s,strides:i,pad:o,dimRoundingMode:l}=r;rX.assert(ch.eitherStridesOrDilationsAreOne(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);let u=ch.computePool2DInfo(a.shape,s,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&rX.arraysEqual(u.inShape,u.outShape))return NB({inputs:{x:a},backend:n});let h=new TI(u,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}},{kernelName:ta,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=r,h=ch.computePool3DInfo(a.shape,s,i,[1,1,1],o,l,u),p=new TS(h,"avg",!1);return n.runWebGLProgram(p,[a],"float32")}},{kernelName:ts,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=r,h=ch.computePool3DInfo(s.shape,i,o,[1,1,1],l,u),p=new TT(h);return n.runWebGLProgram(p,[a],s.dtype)}},{kernelName:tr,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t;I4([a,s],"avgPoolGrad");let{filterSize:i,strides:o,pad:l}=r,u=ch.computePool2DInfo(s.shape,i,o,1,l),h=new TN(u);return n.runWebGLProgram(h,[a],s.dtype)}},{kernelName:ti,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{a:a,b:s}=t,{transposeA:i,transposeB:o}=r;return Te({a:a,b:s,transposeA:i,transposeB:o,backend:n})}},{kernelName:tZ,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:r,mean:a,variance:s,offset:i,scale:o}=e;rX.assert(a.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),rX.assert(null==i||a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),rX.assert(null==o||a.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=n;null==l&&(l=.001);let u=[r,a,s],h=null;null!=i&&(h=i.shape,u.push(i));let p=null;null!=o&&(p=o.shape,u.push(o));let d=eM.getBool("WEBGL_PACK_NORMALIZATION")?new T$(r.shape,a.shape,s.shape,h,p,l):new TC(r.shape,a.shape,s.shape,h,p,l),c=t.runWebGLProgram(d,u,u[0].dtype);return c}},{kernelName:to,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,crops:i}=r;rX.assert(a.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");let o=s.reduce((e,t)=>e*t),l=ch.getReshaped(a.shape,s,o),u=ch.getPermuted(l.length,s.length),h=ch.getReshapedPermuted(a.shape,s,o),p=ch.getSliceBeginCoords(i,s.length),d=ch.getSliceSize(h,i,s.length),c=[],f=N1({inputs:{x:a},backend:n,attrs:{shape:l}}),m=N9({inputs:{x:f},backend:n,attrs:{perm:u}}),g=N1({inputs:{x:m},backend:n,attrs:{shape:h}}),y=TF({inputs:{x:g},backend:n,attrs:{begin:p,size:d}});return c.push(f),c.push(m),c.push(g),c.forEach(e=>n.disposeIntermediateTensorInfo(e)),y}},{kernelName:tl,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:i}=r,o=n.readSync(a.dataId),l=n.readSync(s.dataId),u=SF(o,l,s.dtype,s.shape,i);return n.makeTensorInfo([i],s.dtype,u)}},{kernelName:th,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{s0:r,s1:a}=t,s=n.readSync(r.dataId),i=n.readSync(a.dataId),o=ch.assertAndGetBroadcastShape(Array.from(s),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},{kernelName:tp,backendName:"webgl",kernelFunc:function e(t){let{inputs:n,backend:r,attrs:a}=t,{x:s}=n,{dtype:i}=a;if("complex64"===i){if("complex64"===s.dtype)return NB({inputs:{x:s},backend:r});let t=hT(s.shape),n=e({inputs:{x:s},backend:r,attrs:{dtype:"float32"}}),a=NW({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),a}if("complex64"===s.dtype){let t=T_({inputs:{input:s},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(t),n}if(!rX.hasEncodingLoss(s.dtype,i)){let e=NB({inputs:{x:s},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:i}}if(r.shouldExecuteOnCPU([s])){let e=r.texData.get(s.dataId).values,[t,n,a]=S_(e,s.shape,s.dtype,i);return r.makeTensorInfo(t,n,a)}if("int32"===i)return function(e,t){let n=new Nv(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(s,r);if("bool"===i){let e=r.makeTensorInfo([],"bool",rX.getTypedArrayFromDType("bool",1)),t=TD({inputs:{a:s,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw Error(`Error in Cast: failed to cast ${s.dtype} to ${i}`)}},{kernelName:td,backendName:"webgl",kernelFunc:TM},{kernelName:tc,backendName:"webgl",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{clipValueMin:i,clipValueMax:o}=a;t=eM.getBool("WEBGL_PACK_CLIP")?new Tz(s.shape):new TL(s.shape);let l=[[i],[o]];return r.runWebGLProgram(t,[s],s.dtype,l)}},{kernelName:tf,backendName:"webgl",kernelFunc:NW},{kernelName:tm,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:r}=t,a=n.texData.get(r.dataId),s=new TP(r.shape),i=[TB(r,a.complexTensorInfos.real),TB(r,a.complexTensorInfos.imag)];return n.runWebGLProgram(s,i,i[0].dtype)}},{kernelName:tg,backendName:"webgl",kernelFunc:TH},{kernelName:ty,backendName:"webgl",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s,filter:i}=n,{strides:o,pad:l,dataFormat:u,dilations:h,dimRoundingMode:p}=a,d=ch.convertConv2DDataFormat(u),c=ch.computeConv2DInfo(s.shape,i.shape,o,h,l,p,!1,d);if(1===c.filterHeight&&1===c.filterWidth&&1===c.dilationHeight&&1===c.dilationWidth&&1===c.strideHeight&&1===c.strideWidth&&("SAME"===c.padInfo.type||"VALID"===c.padInfo.type))t=TZ({x:s,filter:i,convInfo:c,backend:r});else if(c.strideWidth<=2&&"channelsLast"===d&&eM.getBool("WEBGL_EXP_CONV")){let e=new TK(c),n=[[c.padInfo.top,c.padInfo.left],[c.strideHeight,c.strideWidth],[c.dilationHeight,c.dilationWidth],[c.inHeight,c.inWidth]];t=r.runWebGLProgram(e,[s,i],"float32",n)}else if(eM.getBool("WEBGL_CONV_IM2COL"))t=TJ({x:s,filter:i,convInfo:c,backend:r});else{let e=new Tq(c);t=r.runWebGLProgram(e,[s,i],"float32")}let f=N1({inputs:{x:t},backend:r,attrs:{shape:c.outShape}});return r.disposeIntermediateTensorInfo(t),f}},{kernelName:tb,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:h}=r,p=ch.convertConv2DDataFormat(l),d=ch.computeConv2DInfo(a.shape,h,i,1,o,u,!1,p),c=new TQ(d);return n.runWebGLProgram(c,[a,s],"float32")}},{kernelName:tx,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:h}=r,p=ch.convertConv2DDataFormat(u),d=ch.computeConv2DInfo(i,s.shape,o,1,l,h,!1,p),c=new T0(d);return n.runWebGLProgram(c,[a,s],"float32")}},{kernelName:tk,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:i,pad:o,dilations:l}=r,u=ch.computeConv3DInfo(a.shape,s.shape,i,l,o),h=new Tj(u);return n.runWebGLProgram(h,[a,s],"float32")}},{kernelName:tv,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,pad:o,filterShape:l}=r,u=ch.computeConv3DInfo(a.shape,l,i,1,o),h=new T1(u);return n.runWebGLProgram(h,[a,s],"float32")}},{kernelName:tw,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{pad:i,strides:o,inputShape:l}=r,u=ch.computeConv3DInfo(l,s.shape,o,1,i),h=new T2(u);return n.runWebGLProgram(h,[a,s],"float32")}},{kernelName:tI,backendName:"webgl",kernelFunc:T4},{kernelName:tS,backendName:"webgl",kernelFunc:T5},{kernelName:tC,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:s,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=r,h=new T8(a.shape,s.shape,o,l,u);return n.runWebGLProgram(h,[a,s,i],"float32")}},{kernelName:tN,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:i,reverse:o}=r;return Ct(E.Prod,a,n,s,i,o)}},{kernelName:tT,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:i,reverse:o}=r;return Ct(E.Sum,a,n,s,i,o)}},{kernelName:t$,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:i,binaryOutput:o}=r;if(1===a.shape.length){let e=n.readSync(a.dataId),t=n.readSync(s.dataId),r=SF(e,t,s.dtype,s.shape,i);return n.makeTensorInfo([i],s.dtype,r)}if(2===a.shape.length){let e=n.bufferSync(a),t=n.bufferSync(s),r=SD(e,t,i,o);return n.makeTensorInfo(r.shape,s.dtype,r.values)}throw Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},{kernelName:tE,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:s,dataFormat:i}=r,o=a.shape[0],l="NHWC"===i?a.shape[1]:a.shape[2],u="NHWC"===i?a.shape[2]:a.shape[3],h="NHWC"===i?a.shape[3]:a.shape[1],p=l*s,d=u*s,c=h/(s*s),f="NHWC"===i?[o,p,d,c]:[o,c,p,d],m=new Cn(f,s,i);return n.runWebGLProgram(m,[a],a.dtype)}},{kernelName:tA,backendName:"webgl",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s,filter:i}=n,{strides:o,pad:l,dilations:u,dimRoundingMode:h}=a,p=u;null==p&&(p=[1,1]),rX.assert(ch.eitherStridesOrDilationsAreOne(o,p),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${p}'`);let d=ch.computeConv2DInfo(s.shape,i.shape,o,p,l,h,!0);t=eM.getBool("WEBGL_PACK_DEPTHWISECONV")&&d.strideWidth<=2&&d.outChannels/d.inChannels==1?new Ca(d):new Cr(d);let c=[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]];return r.runWebGLProgram(t,[s,i],"float32",c)}},{kernelName:tR,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:h}=r,p=ch.computeConv2DInfo(a.shape,h,i,o,l,u,!0),d=new Cs(p);return n.runWebGLProgram(d,[a,s],"float32")}},{kernelName:tF,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:h}=r,p=ch.computeConv2DInfo(h,s.shape,i,o,l,u,!0),d=new Ci(p);return n.runWebGLProgram(d,[a,s],"float32")}},{kernelName:tD,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:r}=t,a=[...r.shape,...r.shape],s=rX.sizeFromShape(r.shape),i=N1({inputs:{x:r},backend:n,attrs:{shape:[s]}}),o=new Co(s),l=n.runWebGLProgram(o,[i],i.dtype),u=N1({inputs:{x:l},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}},{kernelName:t_,backendName:"webgl",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s,filter:i}=n,{strides:o,pad:l,dilations:u}=a,h=ch.computeDilation2DInfo(s.shape,i.shape,o,l,"NHWC",u),p=new Cl(h);t=r.runWebGLProgram(p,[s,i],"float32");let d=N1({inputs:{x:t},backend:r,attrs:{shape:h.outShape}});return r.disposeIntermediateTensorInfo(t),d}},{kernelName:tz,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{equation:a}=r,{allDims:s,summedDims:i,idDims:o}=ch.decodeEinsumEquation(a,t.length);ch.checkEinsumDimSizes(s.length,o,t);let{path:l,steps:u}=ch.getEinsumComputePath(i,o),h=u.length,p=null,d=s.length,c=[];for(let e=0;e<h;++e){for(let r of u[e]){let e;let{permutationIndices:a,expandDims:s}=ch.getEinsumPermutation(d,o[r]);ch.isIdentityPermutation(a)?e=t[r]:(e=N9({inputs:{x:t[r]},backend:n,attrs:{perm:a}}),c.push(e));let i=e.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);rX.arraysEqual(e.shape,i)||(e=N1({inputs:{x:e},backend:n,attrs:{shape:i}}),c.push(e)),null===p?p=e:(p=N0({inputs:{a:e,b:p},backend:n}),c.push(p))}e<h-1&&(l[e]>=0&&(p=N7({inputs:{x:p},backend:n,attrs:{axis:l[e]-(s.length-d),keepDims:!1}}),c.push(p)),d--)}for(let e of c)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},{kernelName:tP,backendName:"webgl",kernelFunc:Ch},{kernelName:tB,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n}=e,{dy:r,y:a}=t,s=eM.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new NP(Cp,r.shape,a.shape):new NL("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,a.shape);return n.runWebGLProgram(s,[r,a],r.dtype)}},{kernelName:tV,backendName:"webgl",kernelFunc:Cc},{kernelName:tW,backendName:"webgl",kernelFunc:Cm},{kernelName:tU,backendName:"webgl",kernelFunc:Cb},{kernelName:tG,backendName:"webgl",kernelFunc:Cx},{kernelName:tH,backendName:"webgl",kernelFunc:Cv},{kernelName:tq,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:r}=t;return CI(r,!1,n)}},{kernelName:tj,backendName:"webgl",kernelFunc:CN},{kernelName:tK,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{let{image:n}=e,r=new CT(n.shape),a=t.runWebGLProgram(r,[n],n.dtype);return a}},{kernelName:tX,backendName:"webgl",kernelFunc:C$},{kernelName:tY,backendName:"webgl",kernelFunc:CR},{kernelName:rE,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{pixels:a}=t,{numChannels:s}=r,i="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,l="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[u,h]=i?[a.videoWidth,a.videoHeight]:[a.width,a.height],p=[h,u],d=[h,u,s];if(l||i){let e=eM.getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==o||e!==C_)&&(C_=e,o=document.createElement("canvas").getContext("2d",{willReadFrequently:C_})),o.canvas.width=u,o.canvas.height=h,o.drawImage(a,0,0,u,h),a=o.canvas}let c=n.makeTensorInfo(p,"int32");n.texData.get(c.dataId).usage=C.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(c.dataId),a);let f=eM.getBool("WEBGL_PACK")?new CD(d):new CF(d),m=n.runWebGLProgram(f,[c],"int32");return n.disposeData(c.dataId),m}},{kernelName:rF,backendName:"webgl",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s,filter:i,bias:o,preluActivationWeights:l}=n,{strides:u,pad:h,dataFormat:p,dilations:d,dimRoundingMode:c,activation:f,leakyreluAlpha:m}=a,g=ch.convertConv2DDataFormat(p),y=ch.computeConv2DInfo(s.shape,i.shape,u,d,h,c,!1,g),b=[],x=null!=o,k=null!=l,v="leakyrelu"===f,w=()=>{let e=[s,i],t=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){let t=N1({inputs:{x:e},backend:r,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(x&&e.push(t(o,p)),k&&e.push(t(l,p)),v){let t=r.makeTensorInfo([],"float32",rX.createScalarValue(m,"float32"));e.push(t),b.push(t)}return e};if(1===y.filterHeight&&1===y.filterWidth&&1===y.dilationHeight&&1===y.dilationWidth&&1===y.strideHeight&&1===y.strideWidth&&("SAME"===y.padInfo.type||"VALID"===y.padInfo.type))t=TZ({x:s,filter:i,convInfo:y,backend:r,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});else if(y.strideWidth<=2&&"channelsLast"===g&&eM.getBool("WEBGL_EXP_CONV")){let e=f?NX(f,!0):null,n=new TK(y,x,e,k,v),a=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],s=w();t=r.runWebGLProgram(n,s,"float32",a)}else if(eM.getBool("WEBGL_CONV_IM2COL"))t=TJ({x:s,filter:i,convInfo:y,backend:r,bias:o,activation:f,preluActivationWeights:l,leakyreluAlpha:m});else{let e=f?NX(f,!1):null,n=new Tq(y,x,e,k,v),a=w();t=r.runWebGLProgram(n,a,"float32")}let I=N1({inputs:{x:t},backend:r,attrs:{shape:y.outShape}});return b.push(t),b.forEach(e=>r.disposeIntermediateTensorInfo(e)),I}},{kernelName:rD,backendName:"webgl",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s,filter:i,bias:o,preluActivationWeights:l}=n,{strides:u,pad:h,dilations:p,dimRoundingMode:d,activation:c,leakyreluAlpha:f}=a,m=[],g=p;null==g&&(g=[1,1]),rX.assert(ch.eitherStridesOrDilationsAreOne(u,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${g}'`);let y=ch.computeConv2DInfo(s.shape,i.shape,u,g,h,d,!0),b=eM.getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,x=c?NX(c,b):null,k=[s,i],v=null!=o,w=null!=l,I="leakyrelu"===c;if(v&&k.push(o),w&&k.push(l),I){let e=r.makeTensorInfo([],"float32",rX.createScalarValue(f,"float32"));k.push(e),m.push(e)}t=b?new Ca(y,v,x,w,I):new Cr(y,v,x,w,I);let S=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],N=r.runWebGLProgram(t,k,"float32",S);return m.forEach(e=>r.disposeIntermediateTensorInfo(e)),N}},{kernelName:tQ,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{params:r,indices:a}=t,s=a.shape,i=s[s.length-1],o=rX.sizeFromShape(r.shape),[l,u,h,p]=ch.prepareAndValidate(r,a),d=N1({inputs:{x:a},backend:n,attrs:{shape:[u,i]}}),c=N1({inputs:{x:r},backend:n,attrs:{shape:[rX.sizeFromShape(r.shape)/h,h]}});if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){let e=n.readSync(a.dataId),t=n.bufferSync(r),s=SW(e,t,r.dtype,u,i,h,p,r.shape,o);return n.makeTensorInfo(l,r.dtype,s.values)}let f=new CO(i,p,[u,h],r.shape),m=n.runWebGLProgram(f,[c,d],c.dtype),g=N1({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(m),g}},{kernelName:tJ,backendName:"webgl",kernelFunc:CL},{kernelName:t0,backendName:"webgl",kernelFunc:CP},{kernelName:t1,backendName:"webgl",kernelFunc:CW},{kernelName:t2,backendName:"webgl",kernelFunc:NB},{kernelName:t3,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{input:r}=t;return CI(r,!0,n)}},{kernelName:t4,backendName:"webgl",kernelFunc:TG},{kernelName:t6,backendName:"webgl",kernelFunc:CV},{kernelName:t5,backendName:"webgl",kernelFunc:CU},{kernelName:t8,backendName:"webgl",kernelFunc:CG},{kernelName:t7,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:s}=r,i=n.makeTensorInfo([],"float32",rX.createScalarValue(s,"float32")),o=eM.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new NP(NU,a.shape,i.shape):new NL(NV,a.shape,i.shape),l=n.runWebGLProgram(o,[a,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},{kernelName:t9,backendName:"webgl",kernelFunc:Cq},{kernelName:ne,backendName:"webgl",kernelFunc:CK},{kernelName:nt,backendName:"webgl",kernelFunc:function(e){let{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,i=Sj(r,a,s);return t.makeTensorInfo([i.length],"float32",i)}},{kernelName:nn,backendName:"webgl",kernelFunc:CZ},{kernelName:nr,backendName:"webgl",kernelFunc:CQ},{kernelName:na,backendName:"webgl",kernelFunc:C1},{kernelName:ns,backendName:"webgl",kernelFunc:C2},{kernelName:ni,backendName:"webgl",kernelFunc:C4},{kernelName:nh,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{depthRadius:s,bias:i,alpha:o,beta:l}=r,u=eM.getBool("WEBGL_PACK_NORMALIZATION")?new C5(a.shape,s,i,o,l):new C6(a.shape,s,i,o,l);return n.runWebGLProgram(u,[a],a.dtype)}},{kernelName:np,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e,{x:a,y:s,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:h}=r,p=new C8(a.shape,o,l,u,h);return n.runWebGLProgram(p,[a,s,i],a.dtype)}},{kernelName:nd,backendName:"webgl",kernelFunc:C7},{kernelName:nc,backendName:"webgl",kernelFunc:$t},{kernelName:nf,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t;I4(a,"maxPool");let{filterSize:s,strides:i,pad:o,dimRoundingMode:l}=r;rX.assert(ch.eitherStridesOrDilationsAreOne(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);let u=ch.computePool2DInfo(a.shape,s,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&rX.arraysEqual(u.inShape,u.outShape))return NB({inputs:{x:a},backend:n});let h=new TI(u,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}},{kernelName:ng,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=r,h=ch.computePool3DInfo(a.shape,s,i,[1,1,1],o,u,l),p=new TS(h,"max",!1);return n.runWebGLProgram(p,[a],a.dtype)}},{kernelName:ny,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=r,h=ch.computePool3DInfo(s.shape,i,o,[1,1,1],l,u),p=new TS(h,"max",!0),d=n.runWebGLProgram(p,[s],s.dtype),c=new $r(h),f=n.runWebGLProgram(c,[a,d],s.dtype);return n.disposeIntermediateTensorInfo(d),f}},{kernelName:nm,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s,output:i}=t;I4([s,i],"maxPoolGrad");let{filterSize:o,strides:l,pad:u,dimRoundingMode:h}=r,p=ch.computePool2DInfo(s.shape,o,l,1,u,h),d=new TI(p,"max",!0),c=n.runWebGLProgram(d,[s],s.dtype),f=new $n(p),m=n.runWebGLProgram(f,[a,c],s.dtype);return n.disposeIntermediateTensorInfo(c),m}},{kernelName:nb,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{x:r}=e,{filterSize:a,strides:s,pad:i,includeBatchInIndex:o}=t;rX.assert(4===r.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);let l=[1,1];rX.assert(ch.eitherStridesOrDilationsAreOne(s,l),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${l}'`);let u=ch.computePool2DInfo(r.shape,a,s,l,i),[h,p]=function(e,t,n,r){let a=new TI(n,"max",!1),s=r.runWebGLProgram(a,[e],"float32");a=new TI(n,"max",!0,!0,t);let i=r.runWebGLProgram(a,[e],"float32");return[s,i]}(r,o,u,n);return[h,p]}},{kernelName:nx,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{x:r}=e,{keepDims:a,axis:s}=t,i=r.shape.length,o=rX.parseAxisParam(s,r.shape),l=o,u=ch.getAxesPermutation(l,i),h=null!=u,p=n.shouldExecuteOnCPU([r]),d=[],c=r;if(h){if(p){let e=n.texData.get(c.dataId),t=e.values,a=Array(i);for(let e=0;e<a.length;e++)a[e]=r.shape[u[e]];let s=Np(t,r.shape,r.dtype,u,a);c=n.makeTensorInfo(a,r.dtype);let o=n.texData.get(c.dataId);o.values=s}else c=N8(r,u,n);d.push(c),l=ch.getInnerMostAxes(l.length,i)}ch.assertAxesAreInnerMostDims("sum",l,i);let[f,m]=ch.computeOutAndReduceShapes(c.shape,l),g=f;a&&(g=ch.expandShapeToKeepDim(f,o));let y=function(e,t,n,r){let a=rX.sizeFromShape(t),s=rX.sizeFromShape(e.shape),i=s/a,o=N1({inputs:{x:e},attrs:{shape:[i,a]},backend:r}),l=N4(o,"float32","mean",r),u=N1({inputs:{x:l},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(o),r.disposeIntermediateTensorInfo(l),u}(c,m,g,n);for(let e of d)n.disposeIntermediateTensorInfo(e);return y}},{kernelName:nk,backendName:"webgl",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{axis:i,keepDims:o}=a,l=s.shape.length,u=rX.parseAxisParam(i,s.shape),h=u,p=ch.getAxesPermutation(h,l),d=s;null!=p&&(d=N9({inputs:{x:s},backend:r,attrs:{perm:p}}),h=ch.getInnerMostAxes(h.length,s.shape.length)),ch.assertAxesAreInnerMostDims("min",h,l);let[c,f]=ch.computeOutAndReduceShapes(d.shape,h),m=rX.sizeFromShape(f),g=N1({inputs:{x:d},backend:r,attrs:{shape:[-1,m]}}),y=N4(g,g.dtype,"min",r);if(o){let e=ch.expandShapeToKeepDim(c,u);t=N1({inputs:{x:y},backend:r,attrs:{shape:e}})}else t=N1({inputs:{x:y},backend:r,attrs:{shape:c}});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(y),null!=p&&r.disposeIntermediateTensorInfo(d),t}},{kernelName:nv,backendName:"webgl",kernelFunc:$i},{kernelName:nw,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{let{x:r}=e,{paddings:a,mode:s}=n,i=eM.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new $l(r.shape,a,s):new $o(r.shape,a,s),o=t.runWebGLProgram(i,[r],r.dtype);return o}},{kernelName:nI,backendName:"webgl",kernelFunc:$p},{kernelName:nS,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{numSamples:s,seed:i,normalized:o}=r,l=o?a:$b({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),u=l.shape[0],h=l.shape[1],p=new $d(u,h,s),d=n.runWebGLProgram(p,[l],"int32",[[i]]);return o||n.disposeIntermediateTensorInfo(l),d}},{kernelName:nN,backendName:"webgl",kernelFunc:N0},{kernelName:nT,backendName:"webgl",kernelFunc:function(e){let t;let{inputs:n,backend:r}=e,{x:a}=n;if(r.shouldExecuteOnCPU([a])){let e=r.texData.get(a.dataId),[t,n]=SQ(e.values,a.shape,a.dtype);return r.makeTensorInfo(n,a.dtype,t)}return t=eM.getBool("WEBGL_PACK_UNARY_OPERATIONS")?new NA(a.shape,$k):new Nv(a.shape,$x),r.runWebGLProgram(t,[a],a.dtype)}},{kernelName:n$,backendName:"webgl",kernelFunc:function(e){ch.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=r,u=n.readSync(a.dataId),h=n.readSync(s.dataId),{selectedIndices:p}=$v(u,h,i,o,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},{kernelName:nE,backendName:"webgl",kernelFunc:function(e){ch.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=r,h=n.readSync(a.dataId),p=n.readSync(s.dataId),{selectedIndices:d,validOutputs:c}=$w(h,p,i,o,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([c]))]}},{kernelName:nA,backendName:"webgl",kernelFunc:function(e){ch.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");let{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=r,h=n.readSync(a.dataId),p=n.readSync(s.dataId),{selectedIndices:d,selectedScores:c}=$I(h,p,i,o,l,u);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([c.length],"float32",new Float32Array(c))]}},{kernelName:nC,backendName:"webgl",kernelFunc:TD},{kernelName:nF,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{dtype:s,depth:i,onValue:o,offValue:l}=r,u=rX.sizeFromShape(a.shape),h=new $S(u,i,o,l),p=N1({inputs:{x:a},backend:n,attrs:{shape:[u]}}),d=n.runWebGLProgram(h,[p],s);n.disposeIntermediateTensorInfo(p);let c=[...a.shape,i],f=N1({inputs:{x:d},backend:n,attrs:{shape:c}});return n.disposeIntermediateTensorInfo(d),f}},{kernelName:nR,backendName:"webgl",kernelFunc:function e(t){let{inputs:n,backend:r}=t,{x:a}=n;if("string"===a.dtype)throw Error("onesLike is not supported under string dtype");if("complex64"!==a.dtype)return CN({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:r});{let t=T_({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r}),s=TG({inputs:{input:a},backend:r}),i=$N({inputs:{x:s},backend:r}),o=NW({inputs:{real:n,imag:i},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(i),o}}},{kernelName:nD,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return Cx({inputs:{input:t[0]},backend:n,attrs:{dim:a}});let s=t[0].shape,i=t[0].dtype;t.forEach(e=>{rX.assertShapesMatch(s,e.shape,"All tensors passed to stack must have matching shapes"),rX.assert(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});let o=[],l=t.map(e=>{let t=Cx({inputs:{input:e},backend:n,attrs:{dim:a}});return o.push(t),t}),u=TH({inputs:l,backend:n,attrs:{axis:a}});return o.forEach(e=>n.disposeIntermediateTensorInfo(e)),u}},{kernelName:n_,backendName:"webgl",kernelFunc:$$},{kernelName:nM,backendName:"webgl",kernelFunc:$R},{kernelName:nL,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{x:r,alpha:a}=t,s=eM.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new NP(NH,r.shape,a.shape):new NL(NG,r.shape,a.shape);return n.runWebGLProgram(s,[r,a],"float32")}},{kernelName:nz,backendName:"webgl",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{axis:i,keepDims:o}=a,l=s.shape.length,u=[],h=rX.parseAxisParam(i,s.shape),p=h,d=ch.getAxesPermutation(p,l),c=s;if(null!=d&&(c=N9({inputs:{x:s},backend:r,attrs:{perm:d}}),p=ch.getInnerMostAxes(p.length,l),u.push(c)),ch.assertAxesAreInnerMostDims("prod",p,l),r.shouldExecuteOnCPU([c])){let e=r.texData.get(c.dataId).values,{outVals:n,outShape:a,outDtype:s}=S1(c.shape,c.dtype,e,p);t=r.makeTensorInfo(a,s,n)}else{let[e,n]=ch.computeOutAndReduceShapes(c.shape,p),a=rX.sizeFromShape(n),i=N1({inputs:{x:c},backend:r,attrs:{shape:[-1,a]}}),o=aG(s.dtype),l=N4(i,o,"prod",r);t=N1({inputs:{x:l},backend:r,attrs:{shape:e}}),u.push(i),u.push(l)}if(o){u.push(t);let e=ch.expandShapeToKeepDim(t.shape,h);t=N1({inputs:{x:t},backend:r,attrs:{shape:e}})}return u.forEach(e=>r.disposeIntermediateTensorInfo(e)),t}},{kernelName:nP,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:a,paramsDenseValues:s,indices:i}=t,{outputRaggedRank:o}=r,l=a.map(e=>n.readSync(e.dataId)),u=a.map(e=>e.shape),h=n.readSync(s.dataId),p=n.readSync(i.dataId),[d,c,f]=S2(l,u,h,s.shape,s.dtype,p,i.shape,o),m=d.map(e=>n.makeTensorInfo([e.length],"int32",e)),g=n.makeTensorInfo(f,s.dtype,c);return m.concat([g])}},{kernelName:nB,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{shape:a,values:s,defaultValue:i,rowPartitionTensors:o}=t,{rowPartitionTypes:l}=r,u=n.readSync(a.dataId),h=n.readSync(s.dataId),p=n.readSync(i.dataId),d=o.map(e=>n.readSync(e.dataId)),c=o.map(e=>e.shape),[f,m]=S3(u,a.shape,h,s.shape,s.dtype,p,i.shape,d,c,l);return n.makeTensorInfo(f,s.dtype,m)}},{kernelName:nW,backendName:"webgl",kernelFunc:$F},{kernelName:nV,backendName:"webgl",kernelFunc:T_},{kernelName:tL,backendName:"webgl",kernelFunc:$m},{kernelName:nU,backendName:"webgl",kernelFunc:$D},{kernelName:nG,backendName:"webgl",kernelFunc:$M},{kernelName:nY,backendName:"webgl",kernelFunc:$P},{kernelName:nH,backendName:"webgl",kernelFunc:N1},{kernelName:nK,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:i,size:o}=r,[l,u]=o,h=eM.getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new $W(a.shape,l,u,s,i):new $B(a.shape,l,u,s,i);return n.runWebGLProgram(h,[a],"float32")}},{kernelName:nX,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:i}=r,o=new $V(s.shape,a.shape,i);return n.runWebGLProgram(o,[s],s.dtype)}},{kernelName:nq,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:i,size:o}=r,[l,u]=o,h=eM.getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new $G(a.shape,l,u,s,i):new $U(a.shape,l,u,s,i);return n.runWebGLProgram(h,[a],a.dtype)}},{kernelName:nj,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:i}=r,o=new $H(s.shape,a.shape,i);return n.runWebGLProgram(o,[s],s.dtype)}},{kernelName:nZ,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:s}=r,i=a.shape.length,o=rX.parseAxisParam(s,a.shape);if(0===i)return NB({inputs:{x:a},backend:n});let l=eM.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new $j(a.shape,o):new $q(a.shape,o);return n.runWebGLProgram(l,[a],a.dtype)}},{kernelName:rA,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{let{image:r}=e,{radians:a,fillValue:s,center:i}=t,o=new $K(r.shape,s),[l,u]=ch.getImageCenter(i,r.shape[1],r.shape[2]),h=[[l,u,Math.sin(a),Math.cos(a)]],p=n.runWebGLProgram(o,[r],r.dtype,h);return p}},{kernelName:nJ,backendName:"webgl",kernelFunc:$Y},{kernelName:nQ,backendName:"webgl",kernelFunc:$Z},{kernelName:n0,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{indices:a,updates:s}=t,{shape:i}=r,{sliceRank:o,numUpdates:l,sliceSize:u,strides:h,outputSize:p}=ch.calculateShapes(s,a,i),d=[p/u,u];if(0===p)return n.makeTensorInfo(i,a.dtype);let c=N1({inputs:{x:a},backend:n,attrs:{shape:[l,o]}}),f=N1({inputs:{x:s},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new $J(l,o,c.shape.length,f.shape.length,h,d),y=n.runWebGLProgram(g,[f,c,m],f.dtype),b=N1({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}},{kernelName:n1,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{sortedSequence:a,values:s}=t,{side:i}=r,o=new $Q(a.shape[0],a.shape[1],s.shape[1],i),l=[[a.shape[1]]];return n.runWebGLProgram(o,[a,s],"int32",l)}},{kernelName:n2,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{condition:r,t:a,e:s}=t,i=new $0(r.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(i,[r,a,s],aU(a.dtype,s.dtype))}},{kernelName:n3,backendName:"webgl",kernelFunc:$2},{kernelName:n7,backendName:"webgl",kernelFunc:$6},{kernelName:n8,backendName:"webgl",kernelFunc:$8},{kernelName:n6,backendName:"webgl",kernelFunc:$9},{kernelName:n5,backendName:"webgl",kernelFunc:Et},{kernelName:n4,backendName:"webgl",kernelFunc:TF},{kernelName:ra,backendName:"webgl",kernelFunc:$b},{kernelName:n9,backendName:"webgl",kernelFunc:Er},{kernelName:rn,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,paddings:i}=r;rX.assert(a.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");let o=s.reduce((e,t)=>e*t),l=[[0,0]];l.push(...i);for(let e=1+s.length;e<a.shape.length;++e)l.push([0,0]);let u=[],h=$$({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),p=ch.getReshaped(h.shape,s,o,!1),d=ch.getPermuted(p.length,s.length,!1),c=ch.getReshapedPermuted(h.shape,s,o,!1),f=N1({inputs:{x:h},backend:n,attrs:{shape:p}}),m=N9({inputs:{x:f},backend:n,attrs:{perm:d}}),g=N1({inputs:{x:m},backend:n,attrs:{shape:c}});return u.push(h),u.push(f),u.push(m),u.forEach(e=>n.disposeIntermediateTensorInfo(e)),g}},{kernelName:rs,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{indices:r,values:a,denseShape:s,defaultValue:i}=t;if(1!==s.shape.length)throw Error(`Dense shape must be a vector, saw:
         ${s.shape}`);if(2!==r.shape.length)throw Error(`Indices must be a matrix, saw:
         ${r.shape}`);if(1!==a.shape.length)throw Error(`Values must be a vector, saw:
         ${a.shape}`);if(0!==i.shape.length)throw Error(`Default value must be a scalar, saw:
        ${i.shape}`);let o=n.readSync(r.dataId),l=n.readSync(a.dataId),u=n.readSync(s.dataId),h=n.readSync(i.dataId)[0],[p,d,c,f,m]=Ne(o,r.shape,r.dtype,l,a.dtype,u,h);return[n.makeTensorInfo(d,r.dtype,p),n.makeTensorInfo([d[0]],a.dtype,c),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}},{kernelName:ri,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{inputIndices:r,inputShape:a,newShape:s}=t;if(2!==r.shape.length)throw Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==a.shape.length)throw Error(`Input shape should be a vector but received shape ${a.shape}`);if(1!==s.shape.length)throw Error(`Target shape should be a vector but received shape ${s.shape}`);let i=Array.from(n.readSync(a.dataId)),o=n.readSync(r.dataId),l=Array.from(n.readSync(s.dataId)),[u,h,p]=Nt(o,r.shape,r.dtype,i,l);return[n.makeTensorInfo(h,r.dtype,u),n.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}},{kernelName:ro,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
              ${a.shape}`);if(1!==s.shape.length)throw Error(`Segment ids should be a vector but received shape
              ${s.shape}`);let i=n.readSync(r.dataId),o=n.readSync(a.dataId),l=n.readSync(s.dataId),[u,h]=Nn(i,r.shape,r.dtype,o,l,!0);return n.makeTensorInfo(h,r.dtype,u)}},{kernelName:rl,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw Error(`Indices should be a vector but received shape
             ${a.shape}`);if(1!==s.shape.length)throw Error(`Segment ids should be a vector but received shape
             ${s.shape}`);let i=n.readSync(r.dataId),o=n.readSync(a.dataId),l=n.readSync(s.dataId),[u,h]=Nn(i,r.shape,r.dtype,o,l);return n.makeTensorInfo(h,r.dtype,u)}},{kernelName:ru,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{sparseIndices:a,sparseValues:s,defaultValue:i}=t,{outputShape:o}=r,{sliceRank:l,numUpdates:u,sliceSize:h,strides:p,outputSize:d}=ch.calculateShapes(s,a,o);if("string"===s.dtype){let e=n.bufferSync(a),t=n.bufferSync(s),r=rX.decodeString(n.readSync(i.dataId)[0]),c=S5(e,t,o,d,h,u,l,p,r,!1);return n.makeTensorInfo(o,c.dtype,c.values)}let c=new $J(u,l,a.shape.length,s.shape.length,p,[d,1],!1),f=n.runWebGLProgram(c,[s,a,i],s.dtype),m=N1({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),m}},{kernelName:rr,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:s,axis:i}=r,o=rX.parseAxisParam(i,a.shape)[0],l=ch.prepareSplitSize(a,s,o),u=a.shape.length,h=Array(u).fill(0),p=a.shape.slice();return l.map(e=>{let t=[...p];t[o]=e;let r=TF({inputs:{x:a},backend:n,attrs:{begin:h,size:t}});return h[o]+=e,r})}},{kernelName:re,backendName:"webgl",kernelFunc:Es},{kernelName:rp,backendName:"webgl",kernelFunc:Ei},{kernelName:rh,backendName:"webgl",kernelFunc:El},{kernelName:r$,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){let{x:r}=e,a=Nw+`
    return x > 0.0 ? 1.0 : float(${t.alpha});
  `,s=new Nv(r.shape,a);return n.runWebGLProgram(s,[r],r.dtype)}},{kernelName:rd,backendName:"webgl",kernelFunc:function(e){let t;let{inputs:n,backend:r,attrs:a}=e,{x:s}=n,{begin:i,end:o,strides:l,beginMask:u,endMask:h,ellipsisMask:p,newAxisMask:d,shrinkAxisMask:c}=a,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:b,begin:x,end:k,strides:v}=oF.sliceInfo(s.shape,i,o,l,u,h,p,d,c);if(g)t=N1({inputs:{x:s},backend:r,attrs:{shape:m}});else if(y||b){rX.assert(s.shape.length>=1,()=>`Input must have rank at least 1, got: ${s.shape.length}`);let e=oF.computeOutShape(x,k,v),n=TF({inputs:{x:s},backend:r,attrs:{begin:x,size:e}});t=N1({inputs:{x:n},backend:r,attrs:{shape:m}}),r.disposeIntermediateTensorInfo(n)}else{let e=r.shouldExecuteOnCPU([s]);if(e){let e=r.readSync(s.dataId),n=iI(s.shape,s.dtype,e),a=Na(f,n,v,x);t=r.makeTensorInfo(m,s.dtype,a.values)}else{let e=new Eu(x,v,f);t=r.runWebGLProgram(e,[s],s.dtype)}}let w=N1({inputs:{x:t},backend:r,attrs:{shape:m}});return r.disposeIntermediateTensorInfo(t),w}},{kernelName:rc,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{separator:a,nGramWidths:s,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=r,{data:h,dataSplits:p}=t,d=n.readSync(h.dataId),c=n.readSync(p.dataId),[f,m]=Ns(d,c,a,s,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(p.shape,"int32",m)]}},{kernelName:rf,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{skipEmpty:a}=r,{input:s,delimiter:i}=t;if("string"!==s.dtype)throw Error("Input must be of datatype string");if(1!==s.shape.length)throw Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==i.shape.length)throw Error(`Delimiter must be a scalar, got shape: ${i.shape}`);let o=n.readSync(s.dataId),l=n.readSync(i.dataId)[0],[u,h,p]=Ni(o,l,a),d=h.length;return[n.makeTensorInfo([d,2],"int32",u),n.makeTensorInfo([d],"string",h),n.makeTensorInfo([2],"int32",new Int32Array(p))]}},{kernelName:rm,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{numBuckets:a}=r,{input:s}=t;if("string"!==s.dtype)throw Error("Input must be of datatype string");if(a<=0)throw Error("Number of buckets must be at least 1");let i=n.readSync(s.dataId),o=No(i,a);return n.makeTensorInfo(s.shape,"int32",o)}},{kernelName:rg,backendName:"webgl",kernelFunc:$y},{kernelName:rt,backendName:"webgl",kernelFunc:N7},{kernelName:ry,backendName:"webgl",kernelFunc:Eh},{kernelName:rb,backendName:"webgl",kernelFunc:Ed},{kernelName:rx,backendName:"webgl",kernelFunc:Ef},{kernelName:rk,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{k:s,sorted:i}=r,o=eM.getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=eM.getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=a.shape,h=u[u.length-1];if(n.shouldExecuteOnCPU([a])||h<o||s>l){let e=n.readSync(a.dataId),[t,r]=Nh(e,u,a.dtype,s,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===s)return u[u.length-1]=0,[n.makeTensorInfo(u,a.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===h)return[a,CN({attrs:{shape:u,dtype:"int32",value:0},backend:n})];let p=n.texData.get(a.dataId),d=null!==p&&p.isPacked,c=d?n.unpackTensor(a):a,f=rX.sizeFromShape(u),m=f/h,g=N1({inputs:{x:c},attrs:{shape:[m,h]},backend:n});d&&Ey(n,c);let y=Eb(s),b=Eb(h),x=null,k=()=>null===x?[g,g]:[g,x],v=(e,t,r)=>{let a=k(),s=new Em(r),i=null===x?1:0,o=[[h],[i],[Number.NEGATIVE_INFINITY],[e],[t]],l=x;x=n.runWebGLProgram(s,a,"int32",o),Ey(n,l)};for(let e=1;e<y;e*=2){let t=2*e;for(let n=e;n>=1;n/=2)v(t,n,[m,b])}for(let e=b;e>y;e/=2){let t=k(),r=new Eg([m,e/2]),a=null===x?1:0,s=[[h],[a],[y]],i=x;x=n.runWebGLProgram(r,t,"int32",s),Ey(n,i);let o=y/2,l=2*o;for(let e=o;e>=1;e/=2)v(l,e,x.shape)}let w=x;x=TF({inputs:{x:x},backend:n,attrs:{begin:0,size:[m,s]}}),Ey(n,w);let I=CL({inputs:{x:g,indices:x},backend:n,attrs:{axis:1,batchDims:1}});Ey(n,g);let S=u.slice(0,-1);S.push(s),w=x,x=N1({inputs:{x:x},attrs:{shape:S},backend:n}),Ey(n,w);let N=I;return I=N1({inputs:{x:I},attrs:{shape:S},backend:n}),Ey(n,N),[I,x]}},{kernelName:rv,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{image:a,transforms:s}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=r,[h,p,d,c]=a.shape,[f,m]=null!=u?u:[p,d],g=new Ex(p,d,i,o,l,[h,f,m,c]);return n.runWebGLProgram(g,[a,s],"float32")}},{kernelName:rw,backendName:"webgl",kernelFunc:N9},{kernelName:rI,backendName:"webgl",kernelFunc:function(e){let{inputs:t,attrs:n,backend:r}=e,{axis:a}=n,{x:s}=t;I4(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");let i=r.readSync(s.dataId),{outputValues:o,outputShape:l,indices:u}=Nd(i,a,s.shape,s.dtype);return[r.makeTensorInfo(l,s.dtype,o),r.makeTensorInfo([u.length],"int32",u)]}},{kernelName:rS,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{value:a}=t,{axis:s}=r;s<0&&(s+=a.shape.length);let i=a.shape.length,o=a.shape[s],l=Array(i-1),u=0;for(let e=0;e<i;e++)e!==s&&(l[u++]=a.shape[e]);let h=[],p=Array(i).fill(0),d=a.shape.slice();d[s]=1;let c=Array(o);for(let e=0;e<c.length;e++){p[s]=e;let t=TF({inputs:{x:a},backend:n,attrs:{begin:p,size:d}}),r=N1({inputs:{x:t},backend:n,attrs:{shape:l}});c[e]=r,h.push(t)}return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}},{kernelName:rN,backendName:"webgl",kernelFunc:function(e){let{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:s}=t,{numSegments:i}=r,o=a.shape.length,l=[],u=0,h=ch.getAxesPermutation([u],o),p=a;null!=h&&(p=N9({inputs:{x:a},backend:n,attrs:{perm:h}}),l.push(p),u=ch.getInnerMostAxes(1,o)[0]);let d=ch.segment_util.computeOutShape(p.shape,u,i),c=rX.sizeFromShape([p.shape[u]]),f=N1({inputs:{x:p},backend:n,attrs:{shape:[-1,c]}});l.push(f);let m=aG(a.dtype),g=(e,t,r,a,s)=>{let i=e.shape[0],o=e.shape[1],u=ch.segment_util.segOpComputeOptimalWindowSize(o,s),h=new Ek({windowSize:u,inSize:o,batchSize:i,numSegments:s},t),p=n.compileAndRun(h,[e,r],a);if(l.push(p),p.shape[1]===s)return p;let d=$F({backend:n,attrs:{start:0,stop:s,step:1,dtype:"float32"}}),c=Ef({inputs:{x:d},backend:n,attrs:{reps:[o/u]}});l.push(d),l.push(c);let f=g(p,t,c,a,s);return f},y=g(f,"unsortedSegmentSum",s,m,i),b=N1({inputs:{x:y},backend:n,attrs:{shape:d}}),x=b;if(null!=h){l.push(b);let e=ch.getUndoAxesPermutation(h);x=N9({inputs:{x:x},backend:n,attrs:{perm:e}})}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}},{kernelName:rC,backendName:"webgl",kernelFunc:$N}];for(let e of Ev)rU(e);function Ew(e,t,n,r){return new(n||(n=Promise))(function(a,s){function i(e){try{l(r.next(e))}catch(e){s(e)}}function o(e){try{l(r.throw(e))}catch(e){s(e)}}function l(e){e.done?a(e.value):new n(function(t){t(e.value)}).then(i,o)}l((r=r.apply(e,t||[])).next())})}function EI(e,t){var n,r,a,s,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function o(s){return function(o){return function(s){if(n)throw TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===s[0]||2===s[0])){i=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){i.label=s[1];break}if(6===s[0]&&i.label<a[1]){i.label=a[1],a=s;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(s);break}a[2]&&i.ops.pop(),i.trys.pop();continue}s=t.call(e,i)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,o])}}}var ES={0:"tench, Tinca tinca",1:"goldfish, Carassius auratus",2:"great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias",3:"tiger shark, Galeocerdo cuvieri",4:"hammerhead, hammerhead shark",5:"electric ray, crampfish, numbfish, torpedo",6:"stingray",7:"cock",8:"hen",9:"ostrich, Struthio camelus",10:"brambling, Fringilla montifringilla",11:"goldfinch, Carduelis carduelis",12:"house finch, linnet, Carpodacus mexicanus",13:"junco, snowbird",14:"indigo bunting, indigo finch, indigo bird, Passerina cyanea",15:"robin, American robin, Turdus migratorius",16:"bulbul",17:"jay",18:"magpie",19:"chickadee",20:"water ouzel, dipper",21:"kite",22:"bald eagle, American eagle, Haliaeetus leucocephalus",23:"vulture",24:"great grey owl, great gray owl, Strix nebulosa",25:"European fire salamander, Salamandra salamandra",26:"common newt, Triturus vulgaris",27:"eft",28:"spotted salamander, Ambystoma maculatum",29:"axolotl, mud puppy, Ambystoma mexicanum",30:"bullfrog, Rana catesbeiana",31:"tree frog, tree-frog",32:"tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui",33:"loggerhead, loggerhead turtle, Caretta caretta",34:"leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea",35:"mud turtle",36:"terrapin",37:"box turtle, box tortoise",38:"banded gecko",39:"common iguana, iguana, Iguana iguana",40:"American chameleon, anole, Anolis carolinensis",41:"whiptail, whiptail lizard",42:"agama",43:"frilled lizard, Chlamydosaurus kingi",44:"alligator lizard",45:"Gila monster, Heloderma suspectum",46:"green lizard, Lacerta viridis",47:"African chameleon, Chamaeleo chamaeleon",48:"Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis",49:"African crocodile, Nile crocodile, Crocodylus niloticus",50:"American alligator, Alligator mississipiensis",51:"triceratops",52:"thunder snake, worm snake, Carphophis amoenus",53:"ringneck snake, ring-necked snake, ring snake",54:"hognose snake, puff adder, sand viper",55:"green snake, grass snake",56:"king snake, kingsnake",57:"garter snake, grass snake",58:"water snake",59:"vine snake",60:"night snake, Hypsiglena torquata",61:"boa constrictor, Constrictor constrictor",62:"rock python, rock snake, Python sebae",63:"Indian cobra, Naja naja",64:"green mamba",65:"sea snake",66:"horned viper, cerastes, sand viper, horned asp, Cerastes cornutus",67:"diamondback, diamondback rattlesnake, Crotalus adamanteus",68:"sidewinder, horned rattlesnake, Crotalus cerastes",69:"trilobite",70:"harvestman, daddy longlegs, Phalangium opilio",71:"scorpion",72:"black and gold garden spider, Argiope aurantia",73:"barn spider, Araneus cavaticus",74:"garden spider, Aranea diademata",75:"black widow, Latrodectus mactans",76:"tarantula",77:"wolf spider, hunting spider",78:"tick",79:"centipede",80:"black grouse",81:"ptarmigan",82:"ruffed grouse, partridge, Bonasa umbellus",83:"prairie chicken, prairie grouse, prairie fowl",84:"peacock",85:"quail",86:"partridge",87:"African grey, African gray, Psittacus erithacus",88:"macaw",89:"sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita",90:"lorikeet",91:"coucal",92:"bee eater",93:"hornbill",94:"hummingbird",95:"jacamar",96:"toucan",97:"drake",98:"red-breasted merganser, Mergus serrator",99:"goose",100:"black swan, Cygnus atratus",101:"tusker",102:"echidna, spiny anteater, anteater",103:"platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus",104:"wallaby, brush kangaroo",105:"koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus",106:"wombat",107:"jelly fish",108:"sea anemone, anemone",109:"brain coral",110:"flatworm, platyhelminth",111:"nematode, nematode worm, roundworm",112:"conch",113:"snail",114:"slug",115:"sea slug, nudibranch",116:"chiton, coat-of-mail shell, sea cradle, polyplacophore",117:"chambered nautilus, pearly nautilus, nautilus",118:"Dungeness crab, Cancer magister",119:"rock crab, Cancer irroratus",120:"fiddler crab",121:"king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica",122:"American lobster, Northern lobster, Maine lobster, Homarus americanus",123:"spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish",124:"crayfish, crawfish, crawdad, crawdaddy",125:"hermit crab",126:"isopod",127:"white stork, Ciconia ciconia",128:"black stork, Ciconia nigra",129:"spoonbill",130:"flamingo",131:"little blue heron, Egretta caerulea",132:"American egret, great white heron, Egretta albus",133:"bittern",134:"crane",135:"limpkin, Aramus pictus",136:"European gallinule, Porphyrio porphyrio",137:"American coot, marsh hen, mud hen, water hen, Fulica americana",138:"bustard",139:"ruddy turnstone, Arenaria interpres",140:"red-backed sandpiper, dunlin, Erolia alpina",141:"redshank, Tringa totanus",142:"dowitcher",143:"oystercatcher, oyster catcher",144:"pelican",145:"king penguin, Aptenodytes patagonica",146:"albatross, mollymawk",147:"grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus",148:"killer whale, killer, orca, grampus, sea wolf, Orcinus orca",149:"dugong, Dugong dugon",150:"sea lion",151:"Chihuahua",152:"Japanese spaniel",153:"Maltese dog, Maltese terrier, Maltese",154:"Pekinese, Pekingese, Peke",155:"Shih-Tzu",156:"Blenheim spaniel",157:"papillon",158:"toy terrier",159:"Rhodesian ridgeback",160:"Afghan hound, Afghan",161:"basset, basset hound",162:"beagle",163:"bloodhound, sleuthhound",164:"bluetick",165:"black-and-tan coonhound",166:"Walker hound, Walker foxhound",167:"English foxhound",168:"redbone",169:"borzoi, Russian wolfhound",170:"Irish wolfhound",171:"Italian greyhound",172:"whippet",173:"Ibizan hound, Ibizan Podenco",174:"Norwegian elkhound, elkhound",175:"otterhound, otter hound",176:"Saluki, gazelle hound",177:"Scottish deerhound, deerhound",178:"Weimaraner",179:"Staffordshire bullterrier, Staffordshire bull terrier",180:"American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier",181:"Bedlington terrier",182:"Border terrier",183:"Kerry blue terrier",184:"Irish terrier",185:"Norfolk terrier",186:"Norwich terrier",187:"Yorkshire terrier",188:"wire-haired fox terrier",189:"Lakeland terrier",190:"Sealyham terrier, Sealyham",191:"Airedale, Airedale terrier",192:"cairn, cairn terrier",193:"Australian terrier",194:"Dandie Dinmont, Dandie Dinmont terrier",195:"Boston bull, Boston terrier",196:"miniature schnauzer",197:"giant schnauzer",198:"standard schnauzer",199:"Scotch terrier, Scottish terrier, Scottie",200:"Tibetan terrier, chrysanthemum dog",201:"silky terrier, Sydney silky",202:"soft-coated wheaten terrier",203:"West Highland white terrier",204:"Lhasa, Lhasa apso",205:"flat-coated retriever",206:"curly-coated retriever",207:"golden retriever",208:"Labrador retriever",209:"Chesapeake Bay retriever",210:"German short-haired pointer",211:"vizsla, Hungarian pointer",212:"English setter",213:"Irish setter, red setter",214:"Gordon setter",215:"Brittany spaniel",216:"clumber, clumber spaniel",217:"English springer, English springer spaniel",218:"Welsh springer spaniel",219:"cocker spaniel, English cocker spaniel, cocker",220:"Sussex spaniel",221:"Irish water spaniel",222:"kuvasz",223:"schipperke",224:"groenendael",225:"malinois",226:"briard",227:"kelpie",228:"komondor",229:"Old English sheepdog, bobtail",230:"Shetland sheepdog, Shetland sheep dog, Shetland",231:"collie",232:"Border collie",233:"Bouvier des Flandres, Bouviers des Flandres",234:"Rottweiler",235:"German shepherd, German shepherd dog, German police dog, alsatian",236:"Doberman, Doberman pinscher",237:"miniature pinscher",238:"Greater Swiss Mountain dog",239:"Bernese mountain dog",240:"Appenzeller",241:"EntleBucher",242:"boxer",243:"bull mastiff",244:"Tibetan mastiff",245:"French bulldog",246:"Great Dane",247:"Saint Bernard, St Bernard",248:"Eskimo dog, husky",249:"malamute, malemute, Alaskan malamute",250:"Siberian husky",251:"dalmatian, coach dog, carriage dog",252:"affenpinscher, monkey pinscher, monkey dog",253:"basenji",254:"pug, pug-dog",255:"Leonberg",256:"Newfoundland, Newfoundland dog",257:"Great Pyrenees",258:"Samoyed, Samoyede",259:"Pomeranian",260:"chow, chow chow",261:"keeshond",262:"Brabancon griffon",263:"Pembroke, Pembroke Welsh corgi",264:"Cardigan, Cardigan Welsh corgi",265:"toy poodle",266:"miniature poodle",267:"standard poodle",268:"Mexican hairless",269:"timber wolf, grey wolf, gray wolf, Canis lupus",270:"white wolf, Arctic wolf, Canis lupus tundrarum",271:"red wolf, maned wolf, Canis rufus, Canis niger",272:"coyote, prairie wolf, brush wolf, Canis latrans",273:"dingo, warrigal, warragal, Canis dingo",274:"dhole, Cuon alpinus",275:"African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus",276:"hyena, hyaena",277:"red fox, Vulpes vulpes",278:"kit fox, Vulpes macrotis",279:"Arctic fox, white fox, Alopex lagopus",280:"grey fox, gray fox, Urocyon cinereoargenteus",281:"tabby, tabby cat",282:"tiger cat",283:"Persian cat",284:"Siamese cat, Siamese",285:"Egyptian cat",286:"cougar, puma, catamount, mountain lion, painter, panther, Felis concolor",287:"lynx, catamount",288:"leopard, Panthera pardus",289:"snow leopard, ounce, Panthera uncia",290:"jaguar, panther, Panthera onca, Felis onca",291:"lion, king of beasts, Panthera leo",292:"tiger, Panthera tigris",293:"cheetah, chetah, Acinonyx jubatus",294:"brown bear, bruin, Ursus arctos",295:"American black bear, black bear, Ursus americanus, Euarctos americanus",296:"ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus",297:"sloth bear, Melursus ursinus, Ursus ursinus",298:"mongoose",299:"meerkat, mierkat",300:"tiger beetle",301:"ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle",302:"ground beetle, carabid beetle",303:"long-horned beetle, longicorn, longicorn beetle",304:"leaf beetle, chrysomelid",305:"dung beetle",306:"rhinoceros beetle",307:"weevil",308:"fly",309:"bee",310:"ant, emmet, pismire",311:"grasshopper, hopper",312:"cricket",313:"walking stick, walkingstick, stick insect",314:"cockroach, roach",315:"mantis, mantid",316:"cicada, cicala",317:"leafhopper",318:"lacewing, lacewing fly",319:"dragonfly, darning needle, devil's darning needle, sewing needle, snake feeder, snake doctor, mosquito hawk, skeeter hawk",320:"damselfly",321:"admiral",322:"ringlet, ringlet butterfly",323:"monarch, monarch butterfly, milkweed butterfly, Danaus plexippus",324:"cabbage butterfly",325:"sulphur butterfly, sulfur butterfly",326:"lycaenid, lycaenid butterfly",327:"starfish, sea star",328:"sea urchin",329:"sea cucumber, holothurian",330:"wood rabbit, cottontail, cottontail rabbit",331:"hare",332:"Angora, Angora rabbit",333:"hamster",334:"porcupine, hedgehog",335:"fox squirrel, eastern fox squirrel, Sciurus niger",336:"marmot",337:"beaver",338:"guinea pig, Cavia cobaya",339:"sorrel",340:"zebra",341:"hog, pig, grunter, squealer, Sus scrofa",342:"wild boar, boar, Sus scrofa",343:"warthog",344:"hippopotamus, hippo, river horse, Hippopotamus amphibius",345:"ox",346:"water buffalo, water ox, Asiatic buffalo, Bubalus bubalis",347:"bison",348:"ram, tup",349:"bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis",350:"ibex, Capra ibex",351:"hartebeest",352:"impala, Aepyceros melampus",353:"gazelle",354:"Arabian camel, dromedary, Camelus dromedarius",355:"llama",356:"weasel",357:"mink",358:"polecat, fitch, foulmart, foumart, Mustela putorius",359:"black-footed ferret, ferret, Mustela nigripes",360:"otter",361:"skunk, polecat, wood pussy",362:"badger",363:"armadillo",364:"three-toed sloth, ai, Bradypus tridactylus",365:"orangutan, orang, orangutang, Pongo pygmaeus",366:"gorilla, Gorilla gorilla",367:"chimpanzee, chimp, Pan troglodytes",368:"gibbon, Hylobates lar",369:"siamang, Hylobates syndactylus, Symphalangus syndactylus",370:"guenon, guenon monkey",371:"patas, hussar monkey, Erythrocebus patas",372:"baboon",373:"macaque",374:"langur",375:"colobus, colobus monkey",376:"proboscis monkey, Nasalis larvatus",377:"marmoset",378:"capuchin, ringtail, Cebus capucinus",379:"howler monkey, howler",380:"titi, titi monkey",381:"spider monkey, Ateles geoffroyi",382:"squirrel monkey, Saimiri sciureus",383:"Madagascar cat, ring-tailed lemur, Lemur catta",384:"indri, indris, Indri indri, Indri brevicaudatus",385:"Indian elephant, Elephas maximus",386:"African elephant, Loxodonta africana",387:"lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens",388:"giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca",389:"barracouta, snoek",390:"eel",391:"coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch",392:"rock beauty, Holocanthus tricolor",393:"anemone fish",394:"sturgeon",395:"gar, garfish, garpike, billfish, Lepisosteus osseus",396:"lionfish",397:"puffer, pufferfish, blowfish, globefish",398:"abacus",399:"abaya",400:"academic gown, academic robe, judge's robe",401:"accordion, piano accordion, squeeze box",402:"acoustic guitar",403:"aircraft carrier, carrier, flattop, attack aircraft carrier",404:"airliner",405:"airship, dirigible",406:"altar",407:"ambulance",408:"amphibian, amphibious vehicle",409:"analog clock",410:"apiary, bee house",411:"apron",412:"ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin",413:"assault rifle, assault gun",414:"backpack, back pack, knapsack, packsack, rucksack, haversack",415:"bakery, bakeshop, bakehouse",416:"balance beam, beam",417:"balloon",418:"ballpoint, ballpoint pen, ballpen, Biro",419:"Band Aid",420:"banjo",421:"bannister, banister, balustrade, balusters, handrail",422:"barbell",423:"barber chair",424:"barbershop",425:"barn",426:"barometer",427:"barrel, cask",428:"barrow, garden cart, lawn cart, wheelbarrow",429:"baseball",430:"basketball",431:"bassinet",432:"bassoon",433:"bathing cap, swimming cap",434:"bath towel",435:"bathtub, bathing tub, bath, tub",436:"beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon",437:"beacon, lighthouse, beacon light, pharos",438:"beaker",439:"bearskin, busby, shako",440:"beer bottle",441:"beer glass",442:"bell cote, bell cot",443:"bib",444:"bicycle-built-for-two, tandem bicycle, tandem",445:"bikini, two-piece",446:"binder, ring-binder",447:"binoculars, field glasses, opera glasses",448:"birdhouse",449:"boathouse",450:"bobsled, bobsleigh, bob",451:"bolo tie, bolo, bola tie, bola",452:"bonnet, poke bonnet",453:"bookcase",454:"bookshop, bookstore, bookstall",455:"bottlecap",456:"bow",457:"bow tie, bow-tie, bowtie",458:"brass, memorial tablet, plaque",459:"brassiere, bra, bandeau",460:"breakwater, groin, groyne, mole, bulwark, seawall, jetty",461:"breastplate, aegis, egis",462:"broom",463:"bucket, pail",464:"buckle",465:"bulletproof vest",466:"bullet train, bullet",467:"butcher shop, meat market",468:"cab, hack, taxi, taxicab",469:"caldron, cauldron",470:"candle, taper, wax light",471:"cannon",472:"canoe",473:"can opener, tin opener",474:"cardigan",475:"car mirror",476:"carousel, carrousel, merry-go-round, roundabout, whirligig",477:"carpenter's kit, tool kit",478:"carton",479:"car wheel",480:"cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM",481:"cassette",482:"cassette player",483:"castle",484:"catamaran",485:"CD player",486:"cello, violoncello",487:"cellular telephone, cellular phone, cellphone, cell, mobile phone",488:"chain",489:"chainlink fence",490:"chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour",491:"chain saw, chainsaw",492:"chest",493:"chiffonier, commode",494:"chime, bell, gong",495:"china cabinet, china closet",496:"Christmas stocking",497:"church, church building",498:"cinema, movie theater, movie theatre, movie house, picture palace",499:"cleaver, meat cleaver, chopper",500:"cliff dwelling",501:"cloak",502:"clog, geta, patten, sabot",503:"cocktail shaker",504:"coffee mug",505:"coffeepot",506:"coil, spiral, volute, whorl, helix",507:"combination lock",508:"computer keyboard, keypad",509:"confectionery, confectionary, candy store",510:"container ship, containership, container vessel",511:"convertible",512:"corkscrew, bottle screw",513:"cornet, horn, trumpet, trump",514:"cowboy boot",515:"cowboy hat, ten-gallon hat",516:"cradle",517:"crane",518:"crash helmet",519:"crate",520:"crib, cot",521:"Crock Pot",522:"croquet ball",523:"crutch",524:"cuirass",525:"dam, dike, dyke",526:"desk",527:"desktop computer",528:"dial telephone, dial phone",529:"diaper, nappy, napkin",530:"digital clock",531:"digital watch",532:"dining table, board",533:"dishrag, dishcloth",534:"dishwasher, dish washer, dishwashing machine",535:"disk brake, disc brake",536:"dock, dockage, docking facility",537:"dogsled, dog sled, dog sleigh",538:"dome",539:"doormat, welcome mat",540:"drilling platform, offshore rig",541:"drum, membranophone, tympan",542:"drumstick",543:"dumbbell",544:"Dutch oven",545:"electric fan, blower",546:"electric guitar",547:"electric locomotive",548:"entertainment center",549:"envelope",550:"espresso maker",551:"face powder",552:"feather boa, boa",553:"file, file cabinet, filing cabinet",554:"fireboat",555:"fire engine, fire truck",556:"fire screen, fireguard",557:"flagpole, flagstaff",558:"flute, transverse flute",559:"folding chair",560:"football helmet",561:"forklift",562:"fountain",563:"fountain pen",564:"four-poster",565:"freight car",566:"French horn, horn",567:"frying pan, frypan, skillet",568:"fur coat",569:"garbage truck, dustcart",570:"gasmask, respirator, gas helmet",571:"gas pump, gasoline pump, petrol pump, island dispenser",572:"goblet",573:"go-kart",574:"golf ball",575:"golfcart, golf cart",576:"gondola",577:"gong, tam-tam",578:"gown",579:"grand piano, grand",580:"greenhouse, nursery, glasshouse",581:"grille, radiator grille",582:"grocery store, grocery, food market, market",583:"guillotine",584:"hair slide",585:"hair spray",586:"half track",587:"hammer",588:"hamper",589:"hand blower, blow dryer, blow drier, hair dryer, hair drier",590:"hand-held computer, hand-held microcomputer",591:"handkerchief, hankie, hanky, hankey",592:"hard disc, hard disk, fixed disk",593:"harmonica, mouth organ, harp, mouth harp",594:"harp",595:"harvester, reaper",596:"hatchet",597:"holster",598:"home theater, home theatre",599:"honeycomb",600:"hook, claw",601:"hoopskirt, crinoline",602:"horizontal bar, high bar",603:"horse cart, horse-cart",604:"hourglass",605:"iPod",606:"iron, smoothing iron",607:"jack-o'-lantern",608:"jean, blue jean, denim",609:"jeep, landrover",610:"jersey, T-shirt, tee shirt",611:"jigsaw puzzle",612:"jinrikisha, ricksha, rickshaw",613:"joystick",614:"kimono",615:"knee pad",616:"knot",617:"lab coat, laboratory coat",618:"ladle",619:"lampshade, lamp shade",620:"laptop, laptop computer",621:"lawn mower, mower",622:"lens cap, lens cover",623:"letter opener, paper knife, paperknife",624:"library",625:"lifeboat",626:"lighter, light, igniter, ignitor",627:"limousine, limo",628:"liner, ocean liner",629:"lipstick, lip rouge",630:"Loafer",631:"lotion",632:"loudspeaker, speaker, speaker unit, loudspeaker system, speaker system",633:"loupe, jeweler's loupe",634:"lumbermill, sawmill",635:"magnetic compass",636:"mailbag, postbag",637:"mailbox, letter box",638:"maillot",639:"maillot, tank suit",640:"manhole cover",641:"maraca",642:"marimba, xylophone",643:"mask",644:"matchstick",645:"maypole",646:"maze, labyrinth",647:"measuring cup",648:"medicine chest, medicine cabinet",649:"megalith, megalithic structure",650:"microphone, mike",651:"microwave, microwave oven",652:"military uniform",653:"milk can",654:"minibus",655:"miniskirt, mini",656:"minivan",657:"missile",658:"mitten",659:"mixing bowl",660:"mobile home, manufactured home",661:"Model T",662:"modem",663:"monastery",664:"monitor",665:"moped",666:"mortar",667:"mortarboard",668:"mosque",669:"mosquito net",670:"motor scooter, scooter",671:"mountain bike, all-terrain bike, off-roader",672:"mountain tent",673:"mouse, computer mouse",674:"mousetrap",675:"moving van",676:"muzzle",677:"nail",678:"neck brace",679:"necklace",680:"nipple",681:"notebook, notebook computer",682:"obelisk",683:"oboe, hautboy, hautbois",684:"ocarina, sweet potato",685:"odometer, hodometer, mileometer, milometer",686:"oil filter",687:"organ, pipe organ",688:"oscilloscope, scope, cathode-ray oscilloscope, CRO",689:"overskirt",690:"oxcart",691:"oxygen mask",692:"packet",693:"paddle, boat paddle",694:"paddlewheel, paddle wheel",695:"padlock",696:"paintbrush",697:"pajama, pyjama, pj's, jammies",698:"palace",699:"panpipe, pandean pipe, syrinx",700:"paper towel",701:"parachute, chute",702:"parallel bars, bars",703:"park bench",704:"parking meter",705:"passenger car, coach, carriage",706:"patio, terrace",707:"pay-phone, pay-station",708:"pedestal, plinth, footstall",709:"pencil box, pencil case",710:"pencil sharpener",711:"perfume, essence",712:"Petri dish",713:"photocopier",714:"pick, plectrum, plectron",715:"pickelhaube",716:"picket fence, paling",717:"pickup, pickup truck",718:"pier",719:"piggy bank, penny bank",720:"pill bottle",721:"pillow",722:"ping-pong ball",723:"pinwheel",724:"pirate, pirate ship",725:"pitcher, ewer",726:"plane, carpenter's plane, woodworking plane",727:"planetarium",728:"plastic bag",729:"plate rack",730:"plow, plough",731:"plunger, plumber's helper",732:"Polaroid camera, Polaroid Land camera",733:"pole",734:"police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria",735:"poncho",736:"pool table, billiard table, snooker table",737:"pop bottle, soda bottle",738:"pot, flowerpot",739:"potter's wheel",740:"power drill",741:"prayer rug, prayer mat",742:"printer",743:"prison, prison house",744:"projectile, missile",745:"projector",746:"puck, hockey puck",747:"punching bag, punch bag, punching ball, punchball",748:"purse",749:"quill, quill pen",750:"quilt, comforter, comfort, puff",751:"racer, race car, racing car",752:"racket, racquet",753:"radiator",754:"radio, wireless",755:"radio telescope, radio reflector",756:"rain barrel",757:"recreational vehicle, RV, R.V.",758:"reel",759:"reflex camera",760:"refrigerator, icebox",761:"remote control, remote",762:"restaurant, eating house, eating place, eatery",763:"revolver, six-gun, six-shooter",764:"rifle",765:"rocking chair, rocker",766:"rotisserie",767:"rubber eraser, rubber, pencil eraser",768:"rugby ball",769:"rule, ruler",770:"running shoe",771:"safe",772:"safety pin",773:"saltshaker, salt shaker",774:"sandal",775:"sarong",776:"sax, saxophone",777:"scabbard",778:"scale, weighing machine",779:"school bus",780:"schooner",781:"scoreboard",782:"screen, CRT screen",783:"screw",784:"screwdriver",785:"seat belt, seatbelt",786:"sewing machine",787:"shield, buckler",788:"shoe shop, shoe-shop, shoe store",789:"shoji",790:"shopping basket",791:"shopping cart",792:"shovel",793:"shower cap",794:"shower curtain",795:"ski",796:"ski mask",797:"sleeping bag",798:"slide rule, slipstick",799:"sliding door",800:"slot, one-armed bandit",801:"snorkel",802:"snowmobile",803:"snowplow, snowplough",804:"soap dispenser",805:"soccer ball",806:"sock",807:"solar dish, solar collector, solar furnace",808:"sombrero",809:"soup bowl",810:"space bar",811:"space heater",812:"space shuttle",813:"spatula",814:"speedboat",815:"spider web, spider's web",816:"spindle",817:"sports car, sport car",818:"spotlight, spot",819:"stage",820:"steam locomotive",821:"steel arch bridge",822:"steel drum",823:"stethoscope",824:"stole",825:"stone wall",826:"stopwatch, stop watch",827:"stove",828:"strainer",829:"streetcar, tram, tramcar, trolley, trolley car",830:"stretcher",831:"studio couch, day bed",832:"stupa, tope",833:"submarine, pigboat, sub, U-boat",834:"suit, suit of clothes",835:"sundial",836:"sunglass",837:"sunglasses, dark glasses, shades",838:"sunscreen, sunblock, sun blocker",839:"suspension bridge",840:"swab, swob, mop",841:"sweatshirt",842:"swimming trunks, bathing trunks",843:"swing",844:"switch, electric switch, electrical switch",845:"syringe",846:"table lamp",847:"tank, army tank, armored combat vehicle, armoured combat vehicle",848:"tape player",849:"teapot",850:"teddy, teddy bear",851:"television, television system",852:"tennis ball",853:"thatch, thatched roof",854:"theater curtain, theatre curtain",855:"thimble",856:"thresher, thrasher, threshing machine",857:"throne",858:"tile roof",859:"toaster",860:"tobacco shop, tobacconist shop, tobacconist",861:"toilet seat",862:"torch",863:"totem pole",864:"tow truck, tow car, wrecker",865:"toyshop",866:"tractor",867:"trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi",868:"tray",869:"trench coat",870:"tricycle, trike, velocipede",871:"trimaran",872:"tripod",873:"triumphal arch",874:"trolleybus, trolley coach, trackless trolley",875:"trombone",876:"tub, vat",877:"turnstile",878:"typewriter keyboard",879:"umbrella",880:"unicycle, monocycle",881:"upright, upright piano",882:"vacuum, vacuum cleaner",883:"vase",884:"vault",885:"velvet",886:"vending machine",887:"vestment",888:"viaduct",889:"violin, fiddle",890:"volleyball",891:"waffle iron",892:"wall clock",893:"wallet, billfold, notecase, pocketbook",894:"wardrobe, closet, press",895:"warplane, military plane",896:"washbasin, handbasin, washbowl, lavabo, wash-hand basin",897:"washer, automatic washer, washing machine",898:"water bottle",899:"water jug",900:"water tower",901:"whiskey jug",902:"whistle",903:"wig",904:"window screen",905:"window shade",906:"Windsor tie",907:"wine bottle",908:"wing",909:"wok",910:"wooden spoon",911:"wool, woolen, woollen",912:"worm fence, snake fence, snake-rail fence, Virginia fence",913:"wreck",914:"yawl",915:"yurt",916:"web site, website, internet site, site",917:"comic book",918:"crossword puzzle, crossword",919:"street sign",920:"traffic light, traffic signal, stoplight",921:"book jacket, dust cover, dust jacket, dust wrapper",922:"menu",923:"plate",924:"guacamole",925:"consomme",926:"hot pot, hotpot",927:"trifle",928:"ice cream, icecream",929:"ice lolly, lolly, lollipop, popsicle",930:"French loaf",931:"bagel, beigel",932:"pretzel",933:"cheeseburger",934:"hotdog, hot dog, red hot",935:"mashed potato",936:"head cabbage",937:"broccoli",938:"cauliflower",939:"zucchini, courgette",940:"spaghetti squash",941:"acorn squash",942:"butternut squash",943:"cucumber, cuke",944:"artichoke, globe artichoke",945:"bell pepper",946:"cardoon",947:"mushroom",948:"Granny Smith",949:"strawberry",950:"orange",951:"lemon",952:"fig",953:"pineapple, ananas",954:"banana",955:"jackfruit, jak, jack",956:"custard apple",957:"pomegranate",958:"hay",959:"carbonara",960:"chocolate sauce, chocolate syrup",961:"dough",962:"meat loaf, meatloaf",963:"pizza, pizza pie",964:"potpie",965:"burrito",966:"red wine",967:"espresso",968:"cup",969:"eggnog",970:"alp",971:"bubble",972:"cliff, drop, drop-off",973:"coral reef",974:"geyser",975:"lakeside, lakeshore",976:"promontory, headland, head, foreland",977:"sandbar, sand bar",978:"seashore, coast, seacoast, sea-coast",979:"valley, vale",980:"volcano",981:"ballplayer, baseball player",982:"groom, bridegroom",983:"scuba diver",984:"rapeseed",985:"daisy",986:"yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum",987:"corn",988:"acorn",989:"hip, rose hip, rosehip",990:"buckeye, horse chestnut, conker",991:"coral fungus",992:"agaric",993:"gyromitra",994:"stinkhorn, carrion fungus",995:"earthstar",996:"hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa",997:"bolete",998:"ear, spike, capitulum",999:"toilet tissue, toilet paper, bathroom tissue"},EN={"1.00":"module_apply_default/MobilenetV1/Logits/global_pool","2.00":"module_apply_default/MobilenetV2/Logits/AvgPool"},ET={"1.00":{.25:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_025_224/classification/1",inputRange:[0,1]},"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_050_224/classification/1",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_075_224/classification/1",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v1_100_224/classification/1",inputRange:[0,1]}},"2.00":{"0.50":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_050_224/classification/2",inputRange:[0,1]},.75:{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_075_224/classification/2",inputRange:[0,1]},"1.00":{url:"https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2",inputRange:[0,1]}}};!function(){function e(e,t,n,r,a){void 0===r&&(r=-1),void 0===a&&(a=1),this.version=e,this.alpha=t,this.modelUrl=n,this.inputMin=r,this.inputMax=a,this.normalizationConstant=(a-r)/255}e.prototype.load=function(){return Ew(this,void 0,void 0,function(){var e,t,n,r,a=this;return EI(this,function(s){switch(s.label){case 0:return this.modelUrl?(e=this,[4,kE(this.modelUrl)]):[3,2];case 1:return e.model=s.sent(),[3,4];case 2:return t=ET[this.version][this.alpha].url,n=this,[4,kE(t,{fromTFHub:!0})];case 3:n.model=s.sent(),s.label=4;case 4:return[4,(r=i7(function(){return a.model.predict(hT([1,224,224,3]))})).data()];case 5:return s.sent(),r.dispose(),[2]}})})},e.prototype.infer=function(e,t){var n=this;return void 0===t&&(t=!1),i7(function(){e instanceof az||(e=ok.fromPixels(e));var r=lr(li(iS(e,"float32"),n.normalizationConstant),n.inputMin),a=r;(224!==e.shape[0]||224!==e.shape[1])&&(a=ct.resizeBilinear(r,[224,224],!0));var s,i=l5(a,[-1,224,224,3]);if(t){var o=EN[n.version];s=pA(n.model.execute(i,o),[1,2])}else s=ut(n.model.predict(i),[0,1],[-1,1e3]);return s})},e.prototype.classify=function(e,t){return void 0===t&&(t=3),Ew(this,void 0,void 0,function(){var n,r;return EI(this,function(a){switch(a.label){case 0:return[4,function(e,t){return Ew(this,void 0,void 0,function(){var n,r,a,s,i,o,l;return EI(this,function(u){switch(u.label){case 0:return[4,(n=pI(e)).data()];case 1:for(r=u.sent(),n.dispose(),a=[],l=0;l<r.length;l++)a.push({value:r[l],index:l});for(a.sort(function(e,t){return t.value-e.value}),s=new Float32Array(t),i=new Int32Array(t),l=0;l<t;l++)s[l]=a[l].value,i[l]=a[l].index;for(o=[],l=0;l<i.length;l++)o.push({className:ES[i[l]],probability:s[l]});return[2,o]}})})}(n=this.infer(e),t)];case 1:return r=a.sent(),n.dispose(),[2,r]}})})}}(),chrome.tabs.onUpdated.addListener((e,t,n)=>{n.url&&("https://aims.iith.ac.in/aims/"==n.url||"https://aims.iith.ac.in/aims/login/loginHome"==n.url)&&chrome.tabs.sendMessage(e,{message:"login",captcha:""},t=>{t&&"data"==t.message&&EC(t.data,t=>{chrome.tabs.sendMessage(e,{message:"captcha",captcha:t})})})}),window=globalThis;let EC=(e,t)=>{(function(e,t){return null==t&&(t={}),ys(e,t)})("Model/model.json").then(function(n){n.predict(sa(e)).array().then(function(e){let n=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"];for(var r="",a=0;a<e.length;a++)r+=n[e[a].indexOf(Math.max(...e[a]))];t(r)})})}})();
//# sourceMappingURL=service_worker.js.map
